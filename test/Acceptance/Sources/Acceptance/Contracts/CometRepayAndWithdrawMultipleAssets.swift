@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum CometRepayAndWithdrawMultipleAssets {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b610de361002b8239610de390f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610206565b61001d5f3561002c565b63ff2038850361000e576101cc565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61006690610044565b90565b6100728161005d565b0361007957565b5f80fd5b9050359061008a82610069565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100d25781359167ffffffffffffffff83116100cd5760200192602083028401116100c857565b610094565b610090565b61008c565b909182601f830112156101115781359167ffffffffffffffff831161010c57602001926020830284011161010757565b610094565b610090565b61008c565b90565b61012281610116565b0361012957565b5f80fd5b9050359061013a82610119565b565b909160a0828403126101c257610154835f840161007d565b92602083013567ffffffffffffffff81116101bd5781610175918501610098565b92909360408101359167ffffffffffffffff83116101b85761019c846101b59484016100d7565b9390946101ac816060860161007d565b9360800161012d565b90565b610040565b610040565b61003c565b5f0190565b34610201576101eb6101df36600461013c565b959490949391936103de565b6101f3610032565b806101fd816101c7565b0390f35b610038565b5f80fd5b5090565b5090565b90565b90565b61022c61022761023192610212565b610215565b610116565b90565b61024861024361024d92610044565b610215565b610044565b90565b61025990610234565b90565b61026590610250565b90565b61027190610234565b90565b61027d90610268565b90565b61028990610234565b90565b61029590610280565b90565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906102dd9061029c565b810190811067ffffffffffffffff8211176102f757604052565b6102a6565b60e01b90565b5f91031261030c57565b61003c565b61031a9061005d565b9052565b61032790610116565b9052565b91602061034c92949361034560408201965f830190610311565b019061031e565b565b610356610032565b3d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b919081101561039b576020020190565b61035e565b356103aa81610119565b90565b91908110156103bd576020020190565b61035e565b356103cc81610069565b90565b60016103db9101610116565b90565b91969590949392936103f186899061020a565b61040d61040761040288889061020e565b610116565b91610116565b03610606578161042561041f5f610218565b91610116565b1161055e575b50506104365f610218565b5b8061045461044e610449888b9061020a565b610116565b91610116565b10156105555761046e6104698585849161038b565b6103a0565b61048061047a5f610218565b91610116565b11610494575b61048f906103cf565b610437565b6104a56104a083610274565b61028c565b9063f3fef3a36104bf6104ba888b85916103ad565b6103c2565b6104d36104ce8888869161038b565b6103a0565b93803b15610550576104f85f80946105036104ec610032565b988996879586946102fc565b84526004840161032b565b03925af191821561054b5761048f9261051f575b509050610486565b61053e905f3d8111610544575b61053681836102d3565b810190610302565b5f610517565b503d61052c565b61034e565b610298565b50505050509050565b61057261056a8261025c565b8484916106e8565b61058361057e84610274565b61028c565b9163f2b9fdb8919092803b15610601576105b05f80946105bb6105a4610032565b978896879586946102fc565b84526004840161032b565b03925af180156105fc576105d0575b8061042b565b6105ef905f3d81116105f5575b6105e781836102d3565b810190610302565b5f6105ca565b503d6105dd565b61034e565b610298565b5f7fb4fa3fb300000000000000000000000000000000000000000000000000000000815280610637600482016101c7565b0390fd5b61064490610280565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61068961068461068e92610647565b6102fc565b610650565b90565b151590565b60ff1690565b6106b06106ab6106b592610212565b610215565b610696565b90565b6106c19061069c565b9052565b9160206106e69294936106df60408201965f830190610311565b01906106b8565b565b909161072960049161071a61070063095ea7b3610675565b918661070a610032565b958694602086019081520161032b565b602082018103825203826102d3565b9061073e610738828490610868565b15610691565b610748575b505050565b610795600461079a94610790849161078161076663095ea7b3610675565b915f90610771610032565b96879460208601908152016106c5565b602082018103825203836102d3565b610a5a565b610a5a565b5f8080610743565b5f90565b906107b96107b2610032565b92836102d3565b565b67ffffffffffffffff81116107d9576107d560209161029c565b0190565b6102a6565b906107f06107eb836107bb565b6107a6565b918252565b606090565b3d5f146108155761080a3d6107de565b903d5f602084013e5b565b61081d6107f5565b90610813565b5190565b61083081610691565b0361083757565b5f80fd5b9050519061084882610827565b565b9060208282031261086357610860915f0161083b565b90565b61003c565b905f80916108746107a2565b5061087e8461063b565b9082602082019151925af16108916107fa565b816108bc575b5090816108a3575b5090565b6108b691506108b19061063b565b610ac6565b5f61089f565b90506108c781610823565b6108d96108d35f610218565b91610116565b149081156108e9575b505f610897565b610904915060206108f982610823565b81830101910161084a565b5f6108e2565b67ffffffffffffffff81116109285761092460209161029c565b0190565b6102a6565b9061093f61093a8361090a565b6107a6565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b610975602061092d565b9061098260208301610944565b565b61098c61096b565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b6109f2602a60409261098f565b6109fb81610998565b0190565b610a149060208101905f8183039101526109e5565b90565b15610a1e57565b610a26610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a56600482016109ff565b0390fd5b610aa391610a6a610a799261063b565b90610a73610984565b91610ae6565b610a8281610823565b610a94610a8e5f610218565b91610116565b14908115610aa5575b50610a17565b565b610ac091506020610ab582610823565b81830101910161084a565b5f610a9d565b610ace6107a2565b503b610ae2610adc5f610218565b91610116565b1190565b90610b059291610af46107f5565b5090610aff5f610218565b91610bd6565b90565b610b1190610280565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b6e602660409261098f565b610b7781610b14565b0190565b610b909060208101905f818303910152610b61565b90565b15610b9a57565b610ba2610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610bd260048201610b7b565b0390fd5b915f8091610c2c9593610be76107f5565b50610c0e610bf430610b08565b31610c07610c0185610116565b91610116565b1015610b93565b8591602082019151925af191610c226107fa565b9092909192610ccb565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c63601d60209261098f565b610c6c81610c2f565b0190565b610c859060208101905f818303910152610c56565b90565b15610c8f57565b610c97610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610cc760048201610c70565b0390fd5b919290610cd66107f5565b505f14610d1a5750610ce782610823565b610cf9610cf35f610218565b91610116565b14610d03575b5090565b610d0f610d1491610ac6565b610c88565b5f610cff565b82610d78565b5190565b90825f9392825e0152565b610d4e610d57602093610d5c93610d4581610d20565b9384809361098f565b95869101610d24565b61029c565b0190565b610d759160208201915f818403910152610d2f565b90565b90610d8282610823565b610d94610d8e5f610218565b91610116565b115f14610da45750805190602001fd5b610ddf90610db0610032565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d60565b0390fd"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610206565b61001d5f3561002c565b63ff2038850361000e576101cc565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61006690610044565b90565b6100728161005d565b0361007957565b5f80fd5b9050359061008a82610069565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100d25781359167ffffffffffffffff83116100cd5760200192602083028401116100c857565b610094565b610090565b61008c565b909182601f830112156101115781359167ffffffffffffffff831161010c57602001926020830284011161010757565b610094565b610090565b61008c565b90565b61012281610116565b0361012957565b5f80fd5b9050359061013a82610119565b565b909160a0828403126101c257610154835f840161007d565b92602083013567ffffffffffffffff81116101bd5781610175918501610098565b92909360408101359167ffffffffffffffff83116101b85761019c846101b59484016100d7565b9390946101ac816060860161007d565b9360800161012d565b90565b610040565b610040565b61003c565b5f0190565b34610201576101eb6101df36600461013c565b959490949391936103de565b6101f3610032565b806101fd816101c7565b0390f35b610038565b5f80fd5b5090565b5090565b90565b90565b61022c61022761023192610212565b610215565b610116565b90565b61024861024361024d92610044565b610215565b610044565b90565b61025990610234565b90565b61026590610250565b90565b61027190610234565b90565b61027d90610268565b90565b61028990610234565b90565b61029590610280565b90565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906102dd9061029c565b810190811067ffffffffffffffff8211176102f757604052565b6102a6565b60e01b90565b5f91031261030c57565b61003c565b61031a9061005d565b9052565b61032790610116565b9052565b91602061034c92949361034560408201965f830190610311565b019061031e565b565b610356610032565b3d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b919081101561039b576020020190565b61035e565b356103aa81610119565b90565b91908110156103bd576020020190565b61035e565b356103cc81610069565b90565b60016103db9101610116565b90565b91969590949392936103f186899061020a565b61040d61040761040288889061020e565b610116565b91610116565b03610606578161042561041f5f610218565b91610116565b1161055e575b50506104365f610218565b5b8061045461044e610449888b9061020a565b610116565b91610116565b10156105555761046e6104698585849161038b565b6103a0565b61048061047a5f610218565b91610116565b11610494575b61048f906103cf565b610437565b6104a56104a083610274565b61028c565b9063f3fef3a36104bf6104ba888b85916103ad565b6103c2565b6104d36104ce8888869161038b565b6103a0565b93803b15610550576104f85f80946105036104ec610032565b988996879586946102fc565b84526004840161032b565b03925af191821561054b5761048f9261051f575b509050610486565b61053e905f3d8111610544575b61053681836102d3565b810190610302565b5f610517565b503d61052c565b61034e565b610298565b50505050509050565b61057261056a8261025c565b8484916106e8565b61058361057e84610274565b61028c565b9163f2b9fdb8919092803b15610601576105b05f80946105bb6105a4610032565b978896879586946102fc565b84526004840161032b565b03925af180156105fc576105d0575b8061042b565b6105ef905f3d81116105f5575b6105e781836102d3565b810190610302565b5f6105ca565b503d6105dd565b61034e565b610298565b5f7fb4fa3fb300000000000000000000000000000000000000000000000000000000815280610637600482016101c7565b0390fd5b61064490610280565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61068961068461068e92610647565b6102fc565b610650565b90565b151590565b60ff1690565b6106b06106ab6106b592610212565b610215565b610696565b90565b6106c19061069c565b9052565b9160206106e69294936106df60408201965f830190610311565b01906106b8565b565b909161072960049161071a61070063095ea7b3610675565b918661070a610032565b958694602086019081520161032b565b602082018103825203826102d3565b9061073e610738828490610868565b15610691565b610748575b505050565b610795600461079a94610790849161078161076663095ea7b3610675565b915f90610771610032565b96879460208601908152016106c5565b602082018103825203836102d3565b610a5a565b610a5a565b5f8080610743565b5f90565b906107b96107b2610032565b92836102d3565b565b67ffffffffffffffff81116107d9576107d560209161029c565b0190565b6102a6565b906107f06107eb836107bb565b6107a6565b918252565b606090565b3d5f146108155761080a3d6107de565b903d5f602084013e5b565b61081d6107f5565b90610813565b5190565b61083081610691565b0361083757565b5f80fd5b9050519061084882610827565b565b9060208282031261086357610860915f0161083b565b90565b61003c565b905f80916108746107a2565b5061087e8461063b565b9082602082019151925af16108916107fa565b816108bc575b5090816108a3575b5090565b6108b691506108b19061063b565b610ac6565b5f61089f565b90506108c781610823565b6108d96108d35f610218565b91610116565b149081156108e9575b505f610897565b610904915060206108f982610823565b81830101910161084a565b5f6108e2565b67ffffffffffffffff81116109285761092460209161029c565b0190565b6102a6565b9061093f61093a8361090a565b6107a6565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b610975602061092d565b9061098260208301610944565b565b61098c61096b565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b6109f2602a60409261098f565b6109fb81610998565b0190565b610a149060208101905f8183039101526109e5565b90565b15610a1e57565b610a26610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a56600482016109ff565b0390fd5b610aa391610a6a610a799261063b565b90610a73610984565b91610ae6565b610a8281610823565b610a94610a8e5f610218565b91610116565b14908115610aa5575b50610a17565b565b610ac091506020610ab582610823565b81830101910161084a565b5f610a9d565b610ace6107a2565b503b610ae2610adc5f610218565b91610116565b1190565b90610b059291610af46107f5565b5090610aff5f610218565b91610bd6565b90565b610b1190610280565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b6e602660409261098f565b610b7781610b14565b0190565b610b909060208101905f818303910152610b61565b90565b15610b9a57565b610ba2610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610bd260048201610b7b565b0390fd5b915f8091610c2c9593610be76107f5565b50610c0e610bf430610b08565b31610c07610c0185610116565b91610116565b1015610b93565b8591602082019151925af191610c226107fa565b9092909192610ccb565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c63601d60209261098f565b610c6c81610c2f565b0190565b610c859060208101905f818303910152610c56565b90565b15610c8f57565b610c97610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610cc760048201610c70565b0390fd5b919290610cd66107f5565b505f14610d1a5750610ce782610823565b610cf9610cf35f610218565b91610116565b14610d03575b5090565b610d0f610d1491610ac6565b610c88565b5f610cff565b82610d78565b5190565b90825f9392825e0152565b610d4e610d57602093610d5c93610d4581610d20565b9384809361098f565b95869101610d24565b61029c565b0190565b610d759160208201915f818403910152610d2f565b90565b90610d8282610823565b610d94610d8e5f610218565b91610116565b115f14610da45750805190602001fd5b610ddf90610db0610032565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d60565b0390fd"

    public static let InvalidInputError = ABI.Function(
        name: "InvalidInput",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case invalidInput
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (InvalidInputError, _):
            return .invalidInput
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [InvalidInputError]
    public static let functions: [ABI.Function] = [runFn]
    public static let runFn = ABI.Function(
        name: "run",
        inputs: [.address, .array(.address), .array(.uint256), .address, .uint256],
        outputs: []
    )

    public static func run(comet: EthAddress, assets: [EthAddress], amounts: [BigUInt], baseAsset: EthAddress, repay: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try runFn.encoded(with: [.address(comet), .array(.address, assets.map {
                .address($0)
            }), .array(.uint256, amounts.map {
                .uint256($0)
            }), .address(baseAsset), .uint256(repay)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try runFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, runFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func runDecode(input: Hex) throws -> (EthAddress, [EthAddress], [BigUInt], EthAddress, BigUInt) {
        let decodedInput = try runFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple5(.address(comet), .array(.address, assets), .array(.uint256, amounts), .address(baseAsset), .uint256(repay)):
            return (comet, assets.map { $0.asEthAddress! }, amounts.map { $0.asBigUInt! }, baseAsset, repay)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, runFn.inputTuple)
        }
    }
}
