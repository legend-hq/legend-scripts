@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum CometRepayAndWithdrawMultipleAssets {
    public static let creationCode: Hex = "0x6080806040523460155761055a908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c63ff20388514610027575f80fd5b3461024c5760a036600319011261024c57600435906001600160a01b03821680830361024c5760243567ffffffffffffffff811161024c5761006d9036906004016102dc565b60449491943567ffffffffffffffff811161024c576100909036906004016102dc565b9094909290606435906001600160a01b0382169081830361024c57608435938686036102cd5784610185575b5050505050855b8181106100ce578680f35b6100d9818487610343565b356100e7575b6001016100c3565b866100f3828489610343565b356001600160a01b03811681036101815761010f838689610343565b3590863b1561017d5760405163f3fef3a360e01b81526001600160a01b0391909116600482015260248101919091528181604481838a5af1801561017257610159575b50506100df565b816101639161030d565b61016e57865f610152565b8680fd5b6040513d84823e3d90fd5b8280fd5b5080fd5b63095ea7b360e01b602083019081526001600160a01b03919091166024830152604480830186905282525f9081906101be60648561030d565b83519082865af16101cd610367565b8161029e575b5080610294575b15610250575b5050843b1561024c57604051631e573fb760e31b81526001600160a01b0391909116600482015260248101919091525f8160448183885af180156102415761022c575b808080806100bc565b6102399196505f9061030d565b5f945f610223565b6040513d5f823e3d90fd5b5f80fd5b61028d9161028860405163095ea7b360e01b60208201528960248201525f60448201526044815261028260648261030d565b826103be565b6103be565b5f806101e0565b50813b15156101da565b80518015925082156102b3575b50505f6101d3565b6102c692506020809183010191016103a6565b5f806102ab565b63b4fa3fb360e01b5f5260045ffd5b9181601f8401121561024c5782359167ffffffffffffffff831161024c576020808501948460051b01011161024c57565b90601f8019910116810190811067ffffffffffffffff82111761032f57604052565b634e487b7160e01b5f52604160045260245ffd5b91908110156103535760051b0190565b634e487b7160e01b5f52603260045260245ffd5b3d156103a1573d9067ffffffffffffffff821161032f5760405191610396601f8201601f19166020018461030d565b82523d5f602084013e565b606090565b9081602091031261024c5751801515810361024c5790565b9061041e9160018060a01b03165f80604051936103dc60408661030d565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af1610418610367565b916104a6565b805190811591821561048c575b50501561043457565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b61049f92506020809183010191016103a6565b5f8061042b565b9192901561050857508151156104ba575090565b3b156104c35790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561051b5750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fd"
    public static let runtimeCode: Hex = "0x6080806040526004361015610012575f80fd5b5f905f3560e01c63ff20388514610027575f80fd5b3461024c5760a036600319011261024c57600435906001600160a01b03821680830361024c5760243567ffffffffffffffff811161024c5761006d9036906004016102dc565b60449491943567ffffffffffffffff811161024c576100909036906004016102dc565b9094909290606435906001600160a01b0382169081830361024c57608435938686036102cd5784610185575b5050505050855b8181106100ce578680f35b6100d9818487610343565b356100e7575b6001016100c3565b866100f3828489610343565b356001600160a01b03811681036101815761010f838689610343565b3590863b1561017d5760405163f3fef3a360e01b81526001600160a01b0391909116600482015260248101919091528181604481838a5af1801561017257610159575b50506100df565b816101639161030d565b61016e57865f610152565b8680fd5b6040513d84823e3d90fd5b8280fd5b5080fd5b63095ea7b360e01b602083019081526001600160a01b03919091166024830152604480830186905282525f9081906101be60648561030d565b83519082865af16101cd610367565b8161029e575b5080610294575b15610250575b5050843b1561024c57604051631e573fb760e31b81526001600160a01b0391909116600482015260248101919091525f8160448183885af180156102415761022c575b808080806100bc565b6102399196505f9061030d565b5f945f610223565b6040513d5f823e3d90fd5b5f80fd5b61028d9161028860405163095ea7b360e01b60208201528960248201525f60448201526044815261028260648261030d565b826103be565b6103be565b5f806101e0565b50813b15156101da565b80518015925082156102b3575b50505f6101d3565b6102c692506020809183010191016103a6565b5f806102ab565b63b4fa3fb360e01b5f5260045ffd5b9181601f8401121561024c5782359167ffffffffffffffff831161024c576020808501948460051b01011161024c57565b90601f8019910116810190811067ffffffffffffffff82111761032f57604052565b634e487b7160e01b5f52604160045260245ffd5b91908110156103535760051b0190565b634e487b7160e01b5f52603260045260245ffd5b3d156103a1573d9067ffffffffffffffff821161032f5760405191610396601f8201601f19166020018461030d565b82523d5f602084013e565b606090565b9081602091031261024c5751801515810361024c5790565b9061041e9160018060a01b03165f80604051936103dc60408661030d565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af1610418610367565b916104a6565b805190811591821561048c575b50501561043457565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b61049f92506020809183010191016103a6565b5f8061042b565b9192901561050857508151156104ba575090565b3b156104c35790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561051b5750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fd"

    public static let InvalidInputError = ABI.Function(
            name: "InvalidInput",
            inputs: []
    )


    public enum RevertReason : Equatable, Error {
        case invalidInput
        case unknownRevert(String, String)
    }
    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (InvalidInputError, _):
            return .invalidInput
            case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
            }
    }
    public static let errors: [ABI.Function] = [InvalidInputError]
    public static let functions: [ABI.Function] = [runFn]
    public static let runFn = ABI.Function(
            name: "run",
            inputs: [.address, .array(.address), .array(.uint256), .address, .uint256],
            outputs: []
    )

    public static func run(comet: EthAddress, assets: [EthAddress], amounts: [BigUInt], baseAsset: EthAddress, repay: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<(), RevertReason> {
            do {
                let query = try runFn.encoded(with: [.address(comet), .array(.address, assets.map {
                                    .address($0)
                                }), .array(.uint256, amounts.map {
                                    .uint256($0)
                                }), .address(baseAsset), .uint256(repay)])
                let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
                let decoded = try runFn.decode(output: result)

                switch decoded {
                case  .tuple0:
                    return .success(())
                default:
                    throw ABI.DecodeError.mismatchedType(decoded.schema, runFn.outputTuple)
                }
            } catch let EVM.QueryError.error(e, v) {
                return .failure(rewrapError(e, value: v))
            }
    }


    public static func runDecode(input: Hex) throws -> (EthAddress, [EthAddress], [BigUInt], EthAddress, BigUInt) {
        let decodedInput = try runFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple5(.address(comet), .array(.address, assets), .array(.uint256, amounts), .address(baseAsset), .uint256(repay)):
            return  (comet, assets.map { $0.asEthAddress! }, amounts.map { $0.asBigUInt! }, baseAsset, repay)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, runFn.inputTuple)
        }
    }

    }