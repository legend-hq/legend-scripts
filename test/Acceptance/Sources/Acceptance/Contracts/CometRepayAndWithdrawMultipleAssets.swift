@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum CometRepayAndWithdrawMultipleAssets {
    public static let creationCode: Hex = "0x6080806040523460155761073b908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c63ff20388514610027575f80fd5b346103015760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610301576004359073ffffffffffffffffffffffffffffffffffffffff82168083036103015760243567ffffffffffffffff8111610301576100989036906004016103c3565b60449491943567ffffffffffffffff8111610301576100bb9036906004016103c3565b9290946064359073ffffffffffffffffffffffffffffffffffffffff821690818303610301576084359386860361039b57846101ee575b5050505050855b818110610104578680f35b61010f818487610462565b3561011d575b6001016100f9565b86610129828489610462565b3573ffffffffffffffffffffffffffffffffffffffff811681036101ea57610152838689610462565b3590863b156101e6576040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101919091528181604481838a5af180156101db576101c2575b5050610115565b816101cc916103f4565b6101d757865f6101bb565b8680fd5b6040513d84823e3d90fd5b8280fd5b5080fd5b7f095ea7b3000000000000000000000000000000000000000000000000000000006020830190815273ffffffffffffffffffffffffffffffffffffffff919091166024830152604480830186905282525f90819061024d6064856103f4565b83519082865af161025c61049f565b8161036c575b5080610362575b15610305575b5050843b15610301576040517ff2b9fdb800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101919091525f8160448183885af180156102f6576102e1575b808080806100f2565b6102ee9196505f906103f4565b5f945f6102d8565b6040513d5f823e3d90fd5b5f80fd5b61035b916103566040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201528960248201525f6044820152604481526103506064826103f4565b82610514565b610514565b5f8061026f565b50813b1515610269565b8051801592508215610381575b50505f610262565b61039492506020809183010191016104fc565b5f80610379565b7fb4fa3fb3000000000000000000000000000000000000000000000000000000005f5260045ffd5b9181601f840112156103015782359167ffffffffffffffff8311610301576020808501948460051b01011161030157565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761043557604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b91908110156104725760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3d156104f7573d9067ffffffffffffffff821161043557604051916104ec601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016602001846103f4565b82523d5f602084013e565b606090565b90816020910312610301575180151581036103015790565b9073ffffffffffffffffffffffffffffffffffffffff61058292165f80604051936105406040866103f4565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af161057c61049f565b91610636565b805190811591821561061c575b50501561059857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b61062f92506020809183010191016104fc565b5f8061058f565b919290156106b1575081511561064a575090565b3b156106535790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156106c45750805190602001fd5b60446020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040519485937f08c379a00000000000000000000000000000000000000000000000000000000085528160048601528051918291826024880152018686015e5f85828601015201168101030190fd"
    public static let runtimeCode: Hex = "0x6080806040526004361015610012575f80fd5b5f905f3560e01c63ff20388514610027575f80fd5b346103015760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610301576004359073ffffffffffffffffffffffffffffffffffffffff82168083036103015760243567ffffffffffffffff8111610301576100989036906004016103c3565b60449491943567ffffffffffffffff8111610301576100bb9036906004016103c3565b9290946064359073ffffffffffffffffffffffffffffffffffffffff821690818303610301576084359386860361039b57846101ee575b5050505050855b818110610104578680f35b61010f818487610462565b3561011d575b6001016100f9565b86610129828489610462565b3573ffffffffffffffffffffffffffffffffffffffff811681036101ea57610152838689610462565b3590863b156101e6576040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101919091528181604481838a5af180156101db576101c2575b5050610115565b816101cc916103f4565b6101d757865f6101bb565b8680fd5b6040513d84823e3d90fd5b8280fd5b5080fd5b7f095ea7b3000000000000000000000000000000000000000000000000000000006020830190815273ffffffffffffffffffffffffffffffffffffffff919091166024830152604480830186905282525f90819061024d6064856103f4565b83519082865af161025c61049f565b8161036c575b5080610362575b15610305575b5050843b15610301576040517ff2b9fdb800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101919091525f8160448183885af180156102f6576102e1575b808080806100f2565b6102ee9196505f906103f4565b5f945f6102d8565b6040513d5f823e3d90fd5b5f80fd5b61035b916103566040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201528960248201525f6044820152604481526103506064826103f4565b82610514565b610514565b5f8061026f565b50813b1515610269565b8051801592508215610381575b50505f610262565b61039492506020809183010191016104fc565b5f80610379565b7fb4fa3fb3000000000000000000000000000000000000000000000000000000005f5260045ffd5b9181601f840112156103015782359167ffffffffffffffff8311610301576020808501948460051b01011161030157565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761043557604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b91908110156104725760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3d156104f7573d9067ffffffffffffffff821161043557604051916104ec601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016602001846103f4565b82523d5f602084013e565b606090565b90816020910312610301575180151581036103015790565b9073ffffffffffffffffffffffffffffffffffffffff61058292165f80604051936105406040866103f4565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af161057c61049f565b91610636565b805190811591821561061c575b50501561059857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b61062f92506020809183010191016104fc565b5f8061058f565b919290156106b1575081511561064a575090565b3b156106535790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156106c45750805190602001fd5b60446020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040519485937f08c379a00000000000000000000000000000000000000000000000000000000085528160048601528051918291826024880152018686015e5f85828601015201168101030190fd"

    public static let InvalidInputError = ABI.Function(
        name: "InvalidInput",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case invalidInput
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (InvalidInputError, _):
            return .invalidInput
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [InvalidInputError]
    public static let functions: [ABI.Function] = [runFn]
    public static let runFn = ABI.Function(
        name: "run",
        inputs: [.address, .array(.address), .array(.uint256), .address, .uint256],
        outputs: []
    )

    public static func run(comet: EthAddress, assets: [EthAddress], amounts: [BigUInt], baseAsset: EthAddress, repay: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try runFn.encoded(with: [.address(comet), .array(.address, assets.map {
                .address($0)
            }), .array(.uint256, amounts.map {
                .uint256($0)
            }), .address(baseAsset), .uint256(repay)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try runFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, runFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func runDecode(input: Hex) throws -> (EthAddress, [EthAddress], [BigUInt], EthAddress, BigUInt) {
        let decodedInput = try runFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple5(.address(comet), .array(.address, assets), .array(.uint256, amounts), .address(baseAsset), .uint256(repay)):
            return (comet, assets.map { $0.asEthAddress! }, amounts.map { $0.asBigUInt! }, baseAsset, repay)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, runFn.inputTuple)
        }
    }
}
