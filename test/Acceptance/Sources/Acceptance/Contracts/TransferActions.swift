@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum TransferActions {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b610e3a61002b8239610e3a90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610192565b61001d5f3561003c565b806392940bf9146100375763ae77a7080361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b916105c8565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b906107b8565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b5f1c90565b90565b6101b26101ad6101b792610098565b61019b565b610098565b90565b6101c66101cb91610196565b61019e565b90565b90565b6101e56101e06101ea926101ce565b61019b565b610098565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61022961022f91939293610098565b92610098565b820391821161023a57565b6101ed565b90565b5f1b90565b61025b61025661026092610098565b610242565b61023f565b90565b6102a76102a26102927f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d56101ba565b61029c60016101d1565b9061021a565b610247565b90565b5f90565b9190916102b9610263565b916102c26102aa565b50825c6102e86102e26102dd6102d860016101d1565b610247565b61023f565b9161023f565b146102ff575f936102fc926001855d61047f565b5d565b5f7f37ed32e800000000000000000000000000000000000000000000000000000000815280610330600482016100f8565b0390fd5b61034861034361034d92610050565b61019b565b610050565b90565b61035990610334565b90565b61036590610350565b90565b61037190610334565b90565b61037d90610368565b90565b61038990610368565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906103cd9061038c565b810190811067ffffffffffffffff8211176103e757604052565b610396565b60e01b90565b905051906103ff8261009b565b565b9060208282031261041a57610417915f016103f2565b90565b61004c565b61042890610069565b9052565b919061043f905f6020850194019061041f565b565b610449610042565b3d5f823e3d90fd5b61045a90610368565b90565b61046690610098565b9052565b919061047d905f6020850194019061045d565b565b919091816104b56104af7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b14610532575b6104cf6104c78261035c565b848491610831565b6104d830610380565b9290919261052d61051b61051561050f7f1288af6a21bcbf8578557e4ee7c0be88a2be953a252ed25850019ea232b1a6bb94610451565b94610451565b94610451565b94610524610042565b9182918261046a565b0390a4565b905061057c602061054a6105458461035c565b610374565b6370a082319061057161055c30610380565b92610565610042565b958694859384936103ec565b83526004830161042c565b03915afa9081156105c3575f91610595575b50906104bb565b6105b6915060203d81116105bc575b6105ae81836103c3565b810190610401565b5f61058e565b503d6105a4565b610441565b906105d392916102ae565b565b6105dd610263565b906105e66102aa565b50815c61060c6106066106016105fc60016101d1565b610247565b61023f565b9161023f565b14610623575f92610620916001845d610699565b5d565b5f7f37ed32e800000000000000000000000000000000000000000000000000000000815280610654600482016100f8565b0390fd5b61066190610334565b90565b61066d90610658565b90565b61067990610368565b90565b151590565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90565b90806106cd6106c77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b146107a8575b6106fc5f8080806106eb6106e688610664565b610670565b869082821561079f575bf11561067c565b61076a5761070930610380565b91610712610681565b919261076561075361074d6107477f1288af6a21bcbf8578557e4ee7c0be88a2be953a252ed25850019ea232b1a6bb94610451565b94610451565b94610451565b9461075c610042565b9182918261046a565b0390a4565b5f7f90b8ec180000000000000000000000000000000000000000000000000000000081528061079b600482016100f8565b0390fd5b506108fc6106f5565b506107b230610380565b316106d3565b906107c2916105d5565b565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61080661080161080b926107c4565b6103ec565b6107cd565b90565b91602061082f92949361082860408201965f83019061041f565b019061045d565b565b9161087560049261086661087a959361084d63a9059cbb6107f2565b92610856610042565b968794602086019081520161080e565b602082018103825203836103c3565b610a45565b565b9061088f610888610042565b92836103c3565b565b67ffffffffffffffff81116108af576108ab60209161038c565b0190565b610396565b906108c66108c183610891565b61087c565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b6108fc60206108b4565b90610909602083016108cb565b565b6109136108f2565b90565b5190565b90565b61093161092c6109369261091a565b61019b565b610098565b90565b6109428161067c565b0361094957565b5f80fd5b9050519061095a82610939565b565b9060208282031261097557610972915f0161094d565b90565b61004c565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b6109dd602a60409261097a565b6109e681610983565b0190565b6109ff9060208101905f8183039101526109d0565b90565b15610a0957565b610a11610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a41600482016109ea565b0390fd5b610a8e91610a55610a6492610374565b90610a5e61090b565b91610ab6565b610a6d81610916565b610a7f610a795f61091d565b91610098565b14908115610a90575b50610a02565b565b610aab91506020610aa082610916565b81830101910161095c565b5f610a88565b606090565b90610ad59291610ac4610ab1565b5090610acf5f61091d565b91610c09565b90565b610ae190610368565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b3e602660409261097a565b610b4781610ae4565b0190565b610b609060208101905f818303910152610b31565b90565b15610b6a57565b610b72610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610ba260048201610b4b565b0390fd5b67ffffffffffffffff8111610bc457610bc060209161038c565b0190565b610396565b90610bdb610bd683610ba6565b61087c565b918252565b3d5f14610bfb57610bf03d610bc9565b903d5f602084013e5b565b610c03610ab1565b90610bf9565b915f8091610c5f9593610c1a610ab1565b50610c41610c2730610ad8565b31610c3a610c3485610098565b91610098565b1015610b63565b8591602082019151925af191610c55610be0565b9092909192610cfe565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c96601d60209261097a565b610c9f81610c62565b0190565b610cb89060208101905f818303910152610c89565b90565b15610cc257565b610cca610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610cfa60048201610ca3565b0390fd5b919290610d09610ab1565b505f14610d4d5750610d1a82610916565b610d2c610d265f61091d565b91610098565b14610d36575b5090565b610d42610d4791610e1a565b610cbb565b5f610d32565b82610dab565b5190565b90825f9392825e0152565b610d81610d8a602093610d8f93610d7881610d53565b9384809361097a565b95869101610d57565b61038c565b0190565b610da89160208201915f818403910152610d62565b90565b90610db582610916565b610dc7610dc15f61091d565b91610098565b115f14610dd75750805190602001fd5b610e1290610de3610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d93565b0390fd5b5f90565b610e22610e16565b503b610e36610e305f61091d565b91610098565b119056"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610192565b61001d5f3561003c565b806392940bf9146100375763ae77a7080361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b916105c8565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b906107b8565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b5f1c90565b90565b6101b26101ad6101b792610098565b61019b565b610098565b90565b6101c66101cb91610196565b61019e565b90565b90565b6101e56101e06101ea926101ce565b61019b565b610098565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61022961022f91939293610098565b92610098565b820391821161023a57565b6101ed565b90565b5f1b90565b61025b61025661026092610098565b610242565b61023f565b90565b6102a76102a26102927f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d56101ba565b61029c60016101d1565b9061021a565b610247565b90565b5f90565b9190916102b9610263565b916102c26102aa565b50825c6102e86102e26102dd6102d860016101d1565b610247565b61023f565b9161023f565b146102ff575f936102fc926001855d61047f565b5d565b5f7f37ed32e800000000000000000000000000000000000000000000000000000000815280610330600482016100f8565b0390fd5b61034861034361034d92610050565b61019b565b610050565b90565b61035990610334565b90565b61036590610350565b90565b61037190610334565b90565b61037d90610368565b90565b61038990610368565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906103cd9061038c565b810190811067ffffffffffffffff8211176103e757604052565b610396565b60e01b90565b905051906103ff8261009b565b565b9060208282031261041a57610417915f016103f2565b90565b61004c565b61042890610069565b9052565b919061043f905f6020850194019061041f565b565b610449610042565b3d5f823e3d90fd5b61045a90610368565b90565b61046690610098565b9052565b919061047d905f6020850194019061045d565b565b919091816104b56104af7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b14610532575b6104cf6104c78261035c565b848491610831565b6104d830610380565b9290919261052d61051b61051561050f7f1288af6a21bcbf8578557e4ee7c0be88a2be953a252ed25850019ea232b1a6bb94610451565b94610451565b94610451565b94610524610042565b9182918261046a565b0390a4565b905061057c602061054a6105458461035c565b610374565b6370a082319061057161055c30610380565b92610565610042565b958694859384936103ec565b83526004830161042c565b03915afa9081156105c3575f91610595575b50906104bb565b6105b6915060203d81116105bc575b6105ae81836103c3565b810190610401565b5f61058e565b503d6105a4565b610441565b906105d392916102ae565b565b6105dd610263565b906105e66102aa565b50815c61060c6106066106016105fc60016101d1565b610247565b61023f565b9161023f565b14610623575f92610620916001845d610699565b5d565b5f7f37ed32e800000000000000000000000000000000000000000000000000000000815280610654600482016100f8565b0390fd5b61066190610334565b90565b61066d90610658565b90565b61067990610368565b90565b151590565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90565b90806106cd6106c77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b146107a8575b6106fc5f8080806106eb6106e688610664565b610670565b869082821561079f575bf11561067c565b61076a5761070930610380565b91610712610681565b919261076561075361074d6107477f1288af6a21bcbf8578557e4ee7c0be88a2be953a252ed25850019ea232b1a6bb94610451565b94610451565b94610451565b9461075c610042565b9182918261046a565b0390a4565b5f7f90b8ec180000000000000000000000000000000000000000000000000000000081528061079b600482016100f8565b0390fd5b506108fc6106f5565b506107b230610380565b316106d3565b906107c2916105d5565b565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61080661080161080b926107c4565b6103ec565b6107cd565b90565b91602061082f92949361082860408201965f83019061041f565b019061045d565b565b9161087560049261086661087a959361084d63a9059cbb6107f2565b92610856610042565b968794602086019081520161080e565b602082018103825203836103c3565b610a45565b565b9061088f610888610042565b92836103c3565b565b67ffffffffffffffff81116108af576108ab60209161038c565b0190565b610396565b906108c66108c183610891565b61087c565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b6108fc60206108b4565b90610909602083016108cb565b565b6109136108f2565b90565b5190565b90565b61093161092c6109369261091a565b61019b565b610098565b90565b6109428161067c565b0361094957565b5f80fd5b9050519061095a82610939565b565b9060208282031261097557610972915f0161094d565b90565b61004c565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b6109dd602a60409261097a565b6109e681610983565b0190565b6109ff9060208101905f8183039101526109d0565b90565b15610a0957565b610a11610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a41600482016109ea565b0390fd5b610a8e91610a55610a6492610374565b90610a5e61090b565b91610ab6565b610a6d81610916565b610a7f610a795f61091d565b91610098565b14908115610a90575b50610a02565b565b610aab91506020610aa082610916565b81830101910161095c565b5f610a88565b606090565b90610ad59291610ac4610ab1565b5090610acf5f61091d565b91610c09565b90565b610ae190610368565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b3e602660409261097a565b610b4781610ae4565b0190565b610b609060208101905f818303910152610b31565b90565b15610b6a57565b610b72610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610ba260048201610b4b565b0390fd5b67ffffffffffffffff8111610bc457610bc060209161038c565b0190565b610396565b90610bdb610bd683610ba6565b61087c565b918252565b3d5f14610bfb57610bf03d610bc9565b903d5f602084013e5b565b610c03610ab1565b90610bf9565b915f8091610c5f9593610c1a610ab1565b50610c41610c2730610ad8565b31610c3a610c3485610098565b91610098565b1015610b63565b8591602082019151925af191610c55610be0565b9092909192610cfe565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c96601d60209261097a565b610c9f81610c62565b0190565b610cb89060208101905f818303910152610c89565b90565b15610cc257565b610cca610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610cfa60048201610ca3565b0390fd5b919290610d09610ab1565b505f14610d4d5750610d1a82610916565b610d2c610d265f61091d565b91610098565b14610d36575b5090565b610d42610d4791610e1a565b610cbb565b5f610d32565b82610dab565b5190565b90825f9392825e0152565b610d81610d8a602093610d8f93610d7881610d53565b9384809361097a565b95869101610d57565b61038c565b0190565b610da89160208201915f818403910152610d62565b90565b90610db582610916565b610dc7610dc15f61091d565b91610098565b115f14610dd75750805190602001fd5b610e1290610de3610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d93565b0390fd5b5f90565b610e22610e16565b503b610e36610e305f61091d565b91610098565b119056"

    public static let ReentrantCallError = ABI.Function(
        name: "ReentrantCall",
        inputs: []
    )

    public static let TransferFailedError = ABI.Function(
        name: "TransferFailed",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case reentrantCall
        case transferFailed
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (ReentrantCallError, _):
            return .reentrantCall
        case (TransferFailedError, _):
            return .transferFailed
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [ReentrantCallError, TransferFailedError]
    public static let functions: [ABI.Function] = [transferERC20TokenFn, transferNativeTokenFn]
    public static let transferERC20TokenFn = ABI.Function(
        name: "transferERC20Token",
        inputs: [.address, .address, .uint256],
        outputs: []
    )

    public static func transferERC20Token(token: EthAddress, recipient: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try transferERC20TokenFn.encoded(with: [.address(token), .address(recipient), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferERC20TokenFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferERC20TokenFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferERC20TokenDecode(input: Hex) throws -> (EthAddress, EthAddress, BigUInt) {
        let decodedInput = try transferERC20TokenFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.address(token), .address(recipient), .uint256(amount)):
            return (token, recipient, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferERC20TokenFn.inputTuple)
        }
    }

    public static let transferNativeTokenFn = ABI.Function(
        name: "transferNativeToken",
        inputs: [.address, .uint256],
        outputs: []
    )

    public static func transferNativeToken(recipient: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try transferNativeTokenFn.encoded(with: [.address(recipient), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferNativeTokenFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferNativeTokenFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferNativeTokenDecode(input: Hex) throws -> (EthAddress, BigUInt) {
        let decodedInput = try transferNativeTokenFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple2(.address(recipient), .uint256(amount)):
            return (recipient, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferNativeTokenFn.inputTuple)
        }
    }
}
