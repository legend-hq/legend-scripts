@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum TransferActions {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b610bbe61002b8239610bbe90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610192565b61001d5f3561003c565b806392940bf9146100375763ae77a7080361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b9161037f565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b906104b0565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b5f1c90565b90565b6101b26101ad6101b792610098565b61019b565b610098565b90565b6101c66101cb91610196565b61019e565b90565b90565b6101e56101e06101ea926101ce565b61019b565b610098565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61022961022f91939293610098565b92610098565b820391821161023a57565b6101ed565b90565b5f1b90565b61025b61025661026092610098565b610242565b61023f565b90565b6102a76102a26102927f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d56101ba565b61029c60016101d1565b9061021a565b610247565b90565b5f90565b9190916102b9610263565b916102c26102aa565b50825c6102e86102e26102dd6102d860016101d1565b610247565b61023f565b9161023f565b146102ff575f936102fc926001855d610368565b5d565b5f7f37ed32e800000000000000000000000000000000000000000000000000000000815280610330600482016100f8565b0390fd5b61034861034361034d92610050565b61019b565b610050565b90565b61035990610334565b90565b61036590610350565b90565b9161037561037d9361035c565b9190916105b5565b565b9061038a92916102ae565b565b610394610263565b9061039d6102aa565b50815c6103c36103bd6103b86103b360016101d1565b610247565b61023f565b9161023f565b146103da575f926103d7916001845d610444565b5d565b5f7f37ed32e80000000000000000000000000000000000000000000000000000000081528061040b600482016100f8565b0390fd5b61041890610334565b90565b6104249061040f565b90565b61043090610334565b90565b61043c90610427565b90565b151590565b5f808061046c9461045d610458839661041b565b610433565b8282156104a7575bf11561043f565b61047257565b5f7f90b8ec18000000000000000000000000000000000000000000000000000000008152806104a3600482016100f8565b0390fd5b506108fc610465565b906104ba9161038c565b565b6104c590610427565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b60e01b90565b61051061050b610515926104c8565b6104f6565b6104d1565b90565b61052190610069565b9052565b61052e90610098565b9052565b91602061055392949361054c60408201965f830190610518565b0190610525565b565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061059690610555565b810190811067ffffffffffffffff8211176105b057604052565b61055f565b916105f96004926105ea6105fe95936105d163a9059cbb6104fc565b926105da610042565b9687946020860190815201610532565b6020820181038252038361058c565b6107c9565b565b9061061361060c610042565b928361058c565b565b67ffffffffffffffff81116106335761062f602091610555565b0190565b61055f565b9061064a61064583610615565b610600565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b6106806020610638565b9061068d6020830161064f565b565b610697610676565b90565b5190565b90565b6106b56106b06106ba9261069e565b61019b565b610098565b90565b6106c68161043f565b036106cd57565b5f80fd5b905051906106de826106bd565b565b906020828203126106f9576106f6915f016106d1565b90565b61004c565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610761602a6040926106fe565b61076a81610707565b0190565b6107839060208101905f818303910152610754565b90565b1561078d57565b610795610042565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806107c56004820161076e565b0390fd5b610812916107d96107e8926104bc565b906107e261068f565b9161083a565b6107f18161069a565b6108036107fd5f6106a1565b91610098565b14908115610814575b50610786565b565b61082f915060206108248261069a565b8183010191016106e0565b5f61080c565b606090565b906108599291610848610835565b50906108535f6106a1565b9161098d565b90565b61086590610427565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b6108c260266040926106fe565b6108cb81610868565b0190565b6108e49060208101905f8183039101526108b5565b90565b156108ee57565b6108f6610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610926600482016108cf565b0390fd5b67ffffffffffffffff811161094857610944602091610555565b0190565b61055f565b9061095f61095a8361092a565b610600565b918252565b3d5f1461097f576109743d61094d565b903d5f602084013e5b565b610987610835565b9061097d565b915f80916109e3959361099e610835565b506109c56109ab3061085c565b316109be6109b885610098565b91610098565b10156108e7565b8591602082019151925af1916109d9610964565b9092909192610a82565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610a1a601d6020926106fe565b610a23816109e6565b0190565b610a3c9060208101905f818303910152610a0d565b90565b15610a4657565b610a4e610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a7e60048201610a27565b0390fd5b919290610a8d610835565b505f14610ad15750610a9e8261069a565b610ab0610aaa5f6106a1565b91610098565b14610aba575b5090565b610ac6610acb91610b9e565b610a3f565b5f610ab6565b82610b2f565b5190565b90825f9392825e0152565b610b05610b0e602093610b1393610afc81610ad7565b938480936106fe565b95869101610adb565b610555565b0190565b610b2c9160208201915f818403910152610ae6565b90565b90610b398261069a565b610b4b610b455f6106a1565b91610098565b115f14610b5b5750805190602001fd5b610b9690610b67610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610b17565b0390fd5b5f90565b610ba6610b9a565b503b610bba610bb45f6106a1565b91610098565b119056"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610192565b61001d5f3561003c565b806392940bf9146100375763ae77a7080361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b9161037f565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b906104b0565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b5f1c90565b90565b6101b26101ad6101b792610098565b61019b565b610098565b90565b6101c66101cb91610196565b61019e565b90565b90565b6101e56101e06101ea926101ce565b61019b565b610098565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61022961022f91939293610098565b92610098565b820391821161023a57565b6101ed565b90565b5f1b90565b61025b61025661026092610098565b610242565b61023f565b90565b6102a76102a26102927f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d56101ba565b61029c60016101d1565b9061021a565b610247565b90565b5f90565b9190916102b9610263565b916102c26102aa565b50825c6102e86102e26102dd6102d860016101d1565b610247565b61023f565b9161023f565b146102ff575f936102fc926001855d610368565b5d565b5f7f37ed32e800000000000000000000000000000000000000000000000000000000815280610330600482016100f8565b0390fd5b61034861034361034d92610050565b61019b565b610050565b90565b61035990610334565b90565b61036590610350565b90565b9161037561037d9361035c565b9190916105b5565b565b9061038a92916102ae565b565b610394610263565b9061039d6102aa565b50815c6103c36103bd6103b86103b360016101d1565b610247565b61023f565b9161023f565b146103da575f926103d7916001845d610444565b5d565b5f7f37ed32e80000000000000000000000000000000000000000000000000000000081528061040b600482016100f8565b0390fd5b61041890610334565b90565b6104249061040f565b90565b61043090610334565b90565b61043c90610427565b90565b151590565b5f808061046c9461045d610458839661041b565b610433565b8282156104a7575bf11561043f565b61047257565b5f7f90b8ec18000000000000000000000000000000000000000000000000000000008152806104a3600482016100f8565b0390fd5b506108fc610465565b906104ba9161038c565b565b6104c590610427565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b60e01b90565b61051061050b610515926104c8565b6104f6565b6104d1565b90565b61052190610069565b9052565b61052e90610098565b9052565b91602061055392949361054c60408201965f830190610518565b0190610525565b565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061059690610555565b810190811067ffffffffffffffff8211176105b057604052565b61055f565b916105f96004926105ea6105fe95936105d163a9059cbb6104fc565b926105da610042565b9687946020860190815201610532565b6020820181038252038361058c565b6107c9565b565b9061061361060c610042565b928361058c565b565b67ffffffffffffffff81116106335761062f602091610555565b0190565b61055f565b9061064a61064583610615565b610600565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b6106806020610638565b9061068d6020830161064f565b565b610697610676565b90565b5190565b90565b6106b56106b06106ba9261069e565b61019b565b610098565b90565b6106c68161043f565b036106cd57565b5f80fd5b905051906106de826106bd565b565b906020828203126106f9576106f6915f016106d1565b90565b61004c565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610761602a6040926106fe565b61076a81610707565b0190565b6107839060208101905f818303910152610754565b90565b1561078d57565b610795610042565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806107c56004820161076e565b0390fd5b610812916107d96107e8926104bc565b906107e261068f565b9161083a565b6107f18161069a565b6108036107fd5f6106a1565b91610098565b14908115610814575b50610786565b565b61082f915060206108248261069a565b8183010191016106e0565b5f61080c565b606090565b906108599291610848610835565b50906108535f6106a1565b9161098d565b90565b61086590610427565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b6108c260266040926106fe565b6108cb81610868565b0190565b6108e49060208101905f8183039101526108b5565b90565b156108ee57565b6108f6610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610926600482016108cf565b0390fd5b67ffffffffffffffff811161094857610944602091610555565b0190565b61055f565b9061095f61095a8361092a565b610600565b918252565b3d5f1461097f576109743d61094d565b903d5f602084013e5b565b610987610835565b9061097d565b915f80916109e3959361099e610835565b506109c56109ab3061085c565b316109be6109b885610098565b91610098565b10156108e7565b8591602082019151925af1916109d9610964565b9092909192610a82565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610a1a601d6020926106fe565b610a23816109e6565b0190565b610a3c9060208101905f818303910152610a0d565b90565b15610a4657565b610a4e610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a7e60048201610a27565b0390fd5b919290610a8d610835565b505f14610ad15750610a9e8261069a565b610ab0610aaa5f6106a1565b91610098565b14610aba575b5090565b610ac6610acb91610b9e565b610a3f565b5f610ab6565b82610b2f565b5190565b90825f9392825e0152565b610b05610b0e602093610b1393610afc81610ad7565b938480936106fe565b95869101610adb565b610555565b0190565b610b2c9160208201915f818403910152610ae6565b90565b90610b398261069a565b610b4b610b455f6106a1565b91610098565b115f14610b5b5750805190602001fd5b610b9690610b67610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610b17565b0390fd5b5f90565b610ba6610b9a565b503b610bba610bb45f6106a1565b91610098565b119056"

    public static let ReentrantCallError = ABI.Function(
        name: "ReentrantCall",
        inputs: []
    )

    public static let TransferFailedError = ABI.Function(
        name: "TransferFailed",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case reentrantCall
        case transferFailed
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (ReentrantCallError, _):
            return .reentrantCall
        case (TransferFailedError, _):
            return .transferFailed
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [ReentrantCallError, TransferFailedError]
    public static let functions: [ABI.Function] = [transferERC20TokenFn, transferNativeTokenFn]
    public static let transferERC20TokenFn = ABI.Function(
        name: "transferERC20Token",
        inputs: [.address, .address, .uint256],
        outputs: []
    )

    public static func transferERC20Token(token: EthAddress, recipient: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try transferERC20TokenFn.encoded(with: [.address(token), .address(recipient), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferERC20TokenFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferERC20TokenFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferERC20TokenDecode(input: Hex) throws -> (EthAddress, EthAddress, BigUInt) {
        let decodedInput = try transferERC20TokenFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.address(token), .address(recipient), .uint256(amount)):
            return (token, recipient, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferERC20TokenFn.inputTuple)
        }
    }

    public static let transferNativeTokenFn = ABI.Function(
        name: "transferNativeToken",
        inputs: [.address, .uint256],
        outputs: []
    )

    public static func transferNativeToken(recipient: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try transferNativeTokenFn.encoded(with: [.address(recipient), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferNativeTokenFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferNativeTokenFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferNativeTokenDecode(input: Hex) throws -> (EthAddress, BigUInt) {
        let decodedInput = try transferNativeTokenFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple2(.address(recipient), .uint256(amount)):
            return (recipient, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferNativeTokenFn.inputTuple)
        }
    }
}
