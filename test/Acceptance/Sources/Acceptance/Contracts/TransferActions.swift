@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum TransferActions {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b610c4861002b8239610c4890f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610192565b61001d5f3561003c565b806392940bf9146100375763ae77a7080361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b9161037f565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b90610626565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b5f1c90565b90565b6101b26101ad6101b792610098565b61019b565b610098565b90565b6101c66101cb91610196565b61019e565b90565b90565b6101e56101e06101ea926101ce565b61019b565b610098565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61022961022f91939293610098565b92610098565b820391821161023a57565b6101ed565b90565b5f1b90565b61025b61025661026092610098565b610242565b61023f565b90565b6102a76102a26102927f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d56101ba565b61029c60016101d1565b9061021a565b610247565b90565b5f90565b9190916102b9610263565b916102c26102aa565b50825c6102e86102e26102dd6102d860016101d1565b610247565b61023f565b9161023f565b146102ff575f936102fc926001855d610368565b5d565b5f7f37ed32e800000000000000000000000000000000000000000000000000000000815280610330600482016100f8565b0390fd5b61034861034361034d92610050565b61019b565b610050565b90565b61035990610334565b90565b61036590610350565b90565b9161037561037d9361035c565b9190916106cb565b565b9061038a92916102ae565b565b610394610263565b9061039d6102aa565b50815c6103c36103bd6103b86103b360016101d1565b610247565b61023f565b9161023f565b146103da575f926103d7916001845d6105a2565b5d565b5f7f37ed32e80000000000000000000000000000000000000000000000000000000081528061040b600482016100f8565b0390fd5b61041890610334565b90565b6104249061040f565b90565b61043090610334565b90565b61043c90610427565b90565b905090565b61044f5f809261043f565b0190565b61045c90610444565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906104a09061045f565b810190811067ffffffffffffffff8211176104ba57604052565b610469565b906104d26104cb610042565b9283610496565b565b67ffffffffffffffff81116104f2576104ee60209161045f565b0190565b610469565b90610509610504836104d4565b6104bf565b918252565b606090565b3d5f1461052e576105233d6104f7565b903d5f602084013e5b565b61053661050e565b9061052c565b151590565b5190565b60209181520190565b90825f9392825e0152565b6105786105816020936105869361056f81610541565b93848093610545565b9586910161054e565b61045f565b0190565b61059f9160208201915f818403910152610559565b90565b5f916105b66105b1849361041b565b610433565b906105bf610042565b90816105ca81610453565b03925af16105e06105d9610513565b911561053c565b6105e75750565b610622906105f3610042565b9182917f9a367e170000000000000000000000000000000000000000000000000000000083526004830161058a565b0390fd5b906106309161038c565b565b61063b90610427565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b60e01b90565b61068661068161068b9261063e565b61066c565b610647565b90565b61069790610069565b9052565b6106a490610098565b9052565b9160206106c99294936106c260408201965f83019061068e565b019061069b565b565b9161070f60049261070061071495936106e763a9059cbb610672565b926106f0610042565b96879460208601908152016106a8565b60208201810382520383610496565b6108c6565b565b67ffffffffffffffff81116107345761073060209161045f565b0190565b610469565b9061074b61074683610716565b6104bf565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b6107816020610739565b9061078e60208301610750565b565b610798610777565b90565b90565b6107b26107ad6107b79261079b565b61019b565b610098565b90565b6107c38161053c565b036107ca57565b5f80fd5b905051906107db826107ba565b565b906020828203126107f6576107f3915f016107ce565b90565b61004c565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b61085e602a6040926107fb565b61086781610804565b0190565b6108809060208101905f818303910152610851565b90565b1561088a57565b610892610042565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806108c26004820161086b565b0390fd5b61090f916108d66108e592610632565b906108df610790565b91610932565b6108ee81610541565b6109006108fa5f61079e565b91610098565b14908115610911575b50610883565b565b61092c9150602061092182610541565b8183010191016107dd565b5f610909565b90610951929161094061050e565b509061094b5f61079e565b91610a22565b90565b61095d90610427565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b6109ba60266040926107fb565b6109c381610960565b0190565b6109dc9060208101905f8183039101526109ad565b90565b156109e657565b6109ee610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a1e600482016109c7565b0390fd5b915f8091610a789593610a3361050e565b50610a5a610a4030610954565b31610a53610a4d85610098565b91610098565b10156109df565b8591602082019151925af191610a6e610513565b9092909192610b17565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610aaf601d6020926107fb565b610ab881610a7b565b0190565b610ad19060208101905f818303910152610aa2565b90565b15610adb57565b610ae3610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610b1360048201610abc565b0390fd5b919290610b2261050e565b505f14610b665750610b3382610541565b610b45610b3f5f61079e565b91610098565b14610b4f575b5090565b610b5b610b6091610c28565b610ad4565b5f610b4b565b82610bb9565b5190565b610b8f610b98602093610b9d93610b8681610b6c565b938480936107fb565b9586910161054e565b61045f565b0190565b610bb69160208201915f818403910152610b70565b90565b90610bc382610541565b610bd5610bcf5f61079e565b91610098565b115f14610be55750805190602001fd5b610c2090610bf1610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610ba1565b0390fd5b5f90565b610c30610c24565b503b610c44610c3e5f61079e565b91610098565b119056"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610192565b61001d5f3561003c565b806392940bf9146100375763ae77a7080361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b9161037f565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b90610626565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b5f1c90565b90565b6101b26101ad6101b792610098565b61019b565b610098565b90565b6101c66101cb91610196565b61019e565b90565b90565b6101e56101e06101ea926101ce565b61019b565b610098565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61022961022f91939293610098565b92610098565b820391821161023a57565b6101ed565b90565b5f1b90565b61025b61025661026092610098565b610242565b61023f565b90565b6102a76102a26102927f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d56101ba565b61029c60016101d1565b9061021a565b610247565b90565b5f90565b9190916102b9610263565b916102c26102aa565b50825c6102e86102e26102dd6102d860016101d1565b610247565b61023f565b9161023f565b146102ff575f936102fc926001855d610368565b5d565b5f7f37ed32e800000000000000000000000000000000000000000000000000000000815280610330600482016100f8565b0390fd5b61034861034361034d92610050565b61019b565b610050565b90565b61035990610334565b90565b61036590610350565b90565b9161037561037d9361035c565b9190916106cb565b565b9061038a92916102ae565b565b610394610263565b9061039d6102aa565b50815c6103c36103bd6103b86103b360016101d1565b610247565b61023f565b9161023f565b146103da575f926103d7916001845d6105a2565b5d565b5f7f37ed32e80000000000000000000000000000000000000000000000000000000081528061040b600482016100f8565b0390fd5b61041890610334565b90565b6104249061040f565b90565b61043090610334565b90565b61043c90610427565b90565b905090565b61044f5f809261043f565b0190565b61045c90610444565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906104a09061045f565b810190811067ffffffffffffffff8211176104ba57604052565b610469565b906104d26104cb610042565b9283610496565b565b67ffffffffffffffff81116104f2576104ee60209161045f565b0190565b610469565b90610509610504836104d4565b6104bf565b918252565b606090565b3d5f1461052e576105233d6104f7565b903d5f602084013e5b565b61053661050e565b9061052c565b151590565b5190565b60209181520190565b90825f9392825e0152565b6105786105816020936105869361056f81610541565b93848093610545565b9586910161054e565b61045f565b0190565b61059f9160208201915f818403910152610559565b90565b5f916105b66105b1849361041b565b610433565b906105bf610042565b90816105ca81610453565b03925af16105e06105d9610513565b911561053c565b6105e75750565b610622906105f3610042565b9182917f9a367e170000000000000000000000000000000000000000000000000000000083526004830161058a565b0390fd5b906106309161038c565b565b61063b90610427565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b60e01b90565b61068661068161068b9261063e565b61066c565b610647565b90565b61069790610069565b9052565b6106a490610098565b9052565b9160206106c99294936106c260408201965f83019061068e565b019061069b565b565b9161070f60049261070061071495936106e763a9059cbb610672565b926106f0610042565b96879460208601908152016106a8565b60208201810382520383610496565b6108c6565b565b67ffffffffffffffff81116107345761073060209161045f565b0190565b610469565b9061074b61074683610716565b6104bf565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b6107816020610739565b9061078e60208301610750565b565b610798610777565b90565b90565b6107b26107ad6107b79261079b565b61019b565b610098565b90565b6107c38161053c565b036107ca57565b5f80fd5b905051906107db826107ba565b565b906020828203126107f6576107f3915f016107ce565b90565b61004c565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b61085e602a6040926107fb565b61086781610804565b0190565b6108809060208101905f818303910152610851565b90565b1561088a57565b610892610042565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806108c26004820161086b565b0390fd5b61090f916108d66108e592610632565b906108df610790565b91610932565b6108ee81610541565b6109006108fa5f61079e565b91610098565b14908115610911575b50610883565b565b61092c9150602061092182610541565b8183010191016107dd565b5f610909565b90610951929161094061050e565b509061094b5f61079e565b91610a22565b90565b61095d90610427565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b6109ba60266040926107fb565b6109c381610960565b0190565b6109dc9060208101905f8183039101526109ad565b90565b156109e657565b6109ee610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a1e600482016109c7565b0390fd5b915f8091610a789593610a3361050e565b50610a5a610a4030610954565b31610a53610a4d85610098565b91610098565b10156109df565b8591602082019151925af191610a6e610513565b9092909192610b17565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610aaf601d6020926107fb565b610ab881610a7b565b0190565b610ad19060208101905f818303910152610aa2565b90565b15610adb57565b610ae3610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610b1360048201610abc565b0390fd5b919290610b2261050e565b505f14610b665750610b3382610541565b610b45610b3f5f61079e565b91610098565b14610b4f575b5090565b610b5b610b6091610c28565b610ad4565b5f610b4b565b82610bb9565b5190565b610b8f610b98602093610b9d93610b8681610b6c565b938480936107fb565b9586910161054e565b61045f565b0190565b610bb69160208201915f818403910152610b70565b90565b90610bc382610541565b610bd5610bcf5f61079e565b91610098565b115f14610be55750805190602001fd5b610c2090610bf1610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610ba1565b0390fd5b5f90565b610c30610c24565b503b610c44610c3e5f61079e565b91610098565b119056"

    public static let ReentrantCallError = ABI.Function(
        name: "ReentrantCall",
        inputs: []
    )

    public static let TransferFailedError = ABI.Function(
        name: "TransferFailed",
        inputs: [.bytes]
    )

    public enum RevertReason: Equatable, Error {
        case reentrantCall
        case transferFailed(Hex)
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (ReentrantCallError, _):
            return .reentrantCall
        case (TransferFailedError, let .tuple1(.bytes(data))):
            return .transferFailed(data)
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [ReentrantCallError, TransferFailedError]
    public static let functions: [ABI.Function] = [transferERC20TokenFn, transferNativeTokenFn]
    public static let transferERC20TokenFn = ABI.Function(
        name: "transferERC20Token",
        inputs: [.address, .address, .uint256],
        outputs: []
    )

    public static func transferERC20Token(token: EthAddress, recipient: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try transferERC20TokenFn.encoded(with: [.address(token), .address(recipient), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferERC20TokenFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferERC20TokenFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferERC20TokenDecode(input: Hex) throws -> (EthAddress, EthAddress, BigUInt) {
        let decodedInput = try transferERC20TokenFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.address(token), .address(recipient), .uint256(amount)):
            return (token, recipient, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferERC20TokenFn.inputTuple)
        }
    }

    public static let transferNativeTokenFn = ABI.Function(
        name: "transferNativeToken",
        inputs: [.address, .uint256],
        outputs: []
    )

    public static func transferNativeToken(recipient: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try transferNativeTokenFn.encoded(with: [.address(recipient), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferNativeTokenFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferNativeTokenFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferNativeTokenDecode(input: Hex) throws -> (EthAddress, BigUInt) {
        let decodedInput = try transferNativeTokenFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple2(.address(recipient), .uint256(amount)):
            return (recipient, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferNativeTokenFn.inputTuple)
        }
    }
}
