@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum TransferActions {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b610d4b61002b8239610d4b90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610192565b61001d5f3561003c565b806392940bf9146100375763ae77a7080361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b91610542565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b906106bc565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b5f1c90565b90565b6101b26101ad6101b792610098565b61019b565b610098565b90565b6101c66101cb91610196565b61019e565b90565b90565b6101e56101e06101ea926101ce565b61019b565b610098565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61022961022f91939293610098565b92610098565b820391821161023a57565b6101ed565b90565b5f1b90565b61025b61025661026092610098565b610242565b61023f565b90565b6102a76102a26102927f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d56101ba565b61029c60016101d1565b9061021a565b610247565b90565b5f90565b9190916102b9610263565b916102c26102aa565b50825c6102e86102e26102dd6102d860016101d1565b610247565b61023f565b9161023f565b146102ff575f936102fc926001855d610451565b5d565b5f7f37ed32e800000000000000000000000000000000000000000000000000000000815280610330600482016100f8565b0390fd5b61034861034361034d92610050565b61019b565b610050565b90565b61035990610334565b90565b61036590610350565b90565b61037190610334565b90565b61037d90610368565b90565b61038990610368565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906103cd9061038c565b810190811067ffffffffffffffff8211176103e757604052565b610396565b60e01b90565b905051906103ff8261009b565b565b9060208282031261041a57610417915f016103f2565b90565b61004c565b61042890610069565b9052565b919061043f905f6020850194019061041f565b565b610449610042565b3d5f823e3d90fd5b918061048561047f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b146104a1575b61049761049f9361035c565b919091610742565b565b508160206104b96104b46104eb9561035c565b610374565b6370a08231906104e06104cb30610380565b926104d4610042565b978894859384936103ec565b83526004830161042c565b03915afa92831561053d5761049f93610497915f9161050f575b509193505061048b565b610530915060203d8111610536575b61052881836103c3565b810190610401565b5f610505565b503d61051e565b610441565b9061054d92916102ae565b565b610557610263565b906105606102aa565b50815c61058661058061057b61057660016101d1565b610247565b61023f565b9161023f565b1461059d575f9261059a916001845d6105fb565b5d565b5f7f37ed32e8000000000000000000000000000000000000000000000000000000008152806105ce600482016100f8565b0390fd5b6105db90610334565b90565b6105e7906105d2565b90565b6105f390610368565b90565b151590565b5f808061065d948194816106376106317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b146106a1575b61064961064e916105de565b6105ea565b828215610698575bf1156105f6565b61066357565b5f7f90b8ec1800000000000000000000000000000000000000000000000000000000815280610694600482016100f8565b0390fd5b506108fc610656565b905061064e6106496106b230610380565b319291505061063d565b906106c69161054f565b565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61070a61070561070f926106c8565b6103ec565b6106d1565b90565b61071b90610098565b9052565b91602061074092949361073960408201965f83019061041f565b0190610712565b565b9161078660049261077761078b959361075e63a9059cbb6106f6565b92610767610042565b968794602086019081520161071f565b602082018103825203836103c3565b610956565b565b906107a0610799610042565b92836103c3565b565b67ffffffffffffffff81116107c0576107bc60209161038c565b0190565b610396565b906107d76107d2836107a2565b61078d565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61080d60206107c5565b9061081a602083016107dc565b565b610824610803565b90565b5190565b90565b61084261083d6108479261082b565b61019b565b610098565b90565b610853816105f6565b0361085a57565b5f80fd5b9050519061086b8261084a565b565b9060208282031261088657610883915f0161085e565b90565b61004c565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b6108ee602a60409261088b565b6108f781610894565b0190565b6109109060208101905f8183039101526108e1565b90565b1561091a57565b610922610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610952600482016108fb565b0390fd5b61099f9161096661097592610374565b9061096f61081c565b916109c7565b61097e81610827565b61099061098a5f61082e565b91610098565b149081156109a1575b50610913565b565b6109bc915060206109b182610827565b81830101910161086d565b5f610999565b606090565b906109e692916109d56109c2565b50906109e05f61082e565b91610b1a565b90565b6109f290610368565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610a4f602660409261088b565b610a58816109f5565b0190565b610a719060208101905f818303910152610a42565b90565b15610a7b57565b610a83610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610ab360048201610a5c565b0390fd5b67ffffffffffffffff8111610ad557610ad160209161038c565b0190565b610396565b90610aec610ae783610ab7565b61078d565b918252565b3d5f14610b0c57610b013d610ada565b903d5f602084013e5b565b610b146109c2565b90610b0a565b915f8091610b709593610b2b6109c2565b50610b52610b38306109e9565b31610b4b610b4585610098565b91610098565b1015610a74565b8591602082019151925af191610b66610af1565b9092909192610c0f565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610ba7601d60209261088b565b610bb081610b73565b0190565b610bc99060208101905f818303910152610b9a565b90565b15610bd357565b610bdb610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610c0b60048201610bb4565b0390fd5b919290610c1a6109c2565b505f14610c5e5750610c2b82610827565b610c3d610c375f61082e565b91610098565b14610c47575b5090565b610c53610c5891610d2b565b610bcc565b5f610c43565b82610cbc565b5190565b90825f9392825e0152565b610c92610c9b602093610ca093610c8981610c64565b9384809361088b565b95869101610c68565b61038c565b0190565b610cb99160208201915f818403910152610c73565b90565b90610cc682610827565b610cd8610cd25f61082e565b91610098565b115f14610ce85750805190602001fd5b610d2390610cf4610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610ca4565b0390fd5b5f90565b610d33610d27565b503b610d47610d415f61082e565b91610098565b119056"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610192565b61001d5f3561003c565b806392940bf9146100375763ae77a7080361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b91610542565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b906106bc565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b5f1c90565b90565b6101b26101ad6101b792610098565b61019b565b610098565b90565b6101c66101cb91610196565b61019e565b90565b90565b6101e56101e06101ea926101ce565b61019b565b610098565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61022961022f91939293610098565b92610098565b820391821161023a57565b6101ed565b90565b5f1b90565b61025b61025661026092610098565b610242565b61023f565b90565b6102a76102a26102927f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d56101ba565b61029c60016101d1565b9061021a565b610247565b90565b5f90565b9190916102b9610263565b916102c26102aa565b50825c6102e86102e26102dd6102d860016101d1565b610247565b61023f565b9161023f565b146102ff575f936102fc926001855d610451565b5d565b5f7f37ed32e800000000000000000000000000000000000000000000000000000000815280610330600482016100f8565b0390fd5b61034861034361034d92610050565b61019b565b610050565b90565b61035990610334565b90565b61036590610350565b90565b61037190610334565b90565b61037d90610368565b90565b61038990610368565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906103cd9061038c565b810190811067ffffffffffffffff8211176103e757604052565b610396565b60e01b90565b905051906103ff8261009b565b565b9060208282031261041a57610417915f016103f2565b90565b61004c565b61042890610069565b9052565b919061043f905f6020850194019061041f565b565b610449610042565b3d5f823e3d90fd5b918061048561047f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b146104a1575b61049761049f9361035c565b919091610742565b565b508160206104b96104b46104eb9561035c565b610374565b6370a08231906104e06104cb30610380565b926104d4610042565b978894859384936103ec565b83526004830161042c565b03915afa92831561053d5761049f93610497915f9161050f575b509193505061048b565b610530915060203d8111610536575b61052881836103c3565b810190610401565b5f610505565b503d61051e565b610441565b9061054d92916102ae565b565b610557610263565b906105606102aa565b50815c61058661058061057b61057660016101d1565b610247565b61023f565b9161023f565b1461059d575f9261059a916001845d6105fb565b5d565b5f7f37ed32e8000000000000000000000000000000000000000000000000000000008152806105ce600482016100f8565b0390fd5b6105db90610334565b90565b6105e7906105d2565b90565b6105f390610368565b90565b151590565b5f808061065d948194816106376106317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b146106a1575b61064961064e916105de565b6105ea565b828215610698575bf1156105f6565b61066357565b5f7f90b8ec1800000000000000000000000000000000000000000000000000000000815280610694600482016100f8565b0390fd5b506108fc610656565b905061064e6106496106b230610380565b319291505061063d565b906106c69161054f565b565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61070a61070561070f926106c8565b6103ec565b6106d1565b90565b61071b90610098565b9052565b91602061074092949361073960408201965f83019061041f565b0190610712565b565b9161078660049261077761078b959361075e63a9059cbb6106f6565b92610767610042565b968794602086019081520161071f565b602082018103825203836103c3565b610956565b565b906107a0610799610042565b92836103c3565b565b67ffffffffffffffff81116107c0576107bc60209161038c565b0190565b610396565b906107d76107d2836107a2565b61078d565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61080d60206107c5565b9061081a602083016107dc565b565b610824610803565b90565b5190565b90565b61084261083d6108479261082b565b61019b565b610098565b90565b610853816105f6565b0361085a57565b5f80fd5b9050519061086b8261084a565b565b9060208282031261088657610883915f0161085e565b90565b61004c565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b6108ee602a60409261088b565b6108f781610894565b0190565b6109109060208101905f8183039101526108e1565b90565b1561091a57565b610922610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610952600482016108fb565b0390fd5b61099f9161096661097592610374565b9061096f61081c565b916109c7565b61097e81610827565b61099061098a5f61082e565b91610098565b149081156109a1575b50610913565b565b6109bc915060206109b182610827565b81830101910161086d565b5f610999565b606090565b906109e692916109d56109c2565b50906109e05f61082e565b91610b1a565b90565b6109f290610368565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610a4f602660409261088b565b610a58816109f5565b0190565b610a719060208101905f818303910152610a42565b90565b15610a7b57565b610a83610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610ab360048201610a5c565b0390fd5b67ffffffffffffffff8111610ad557610ad160209161038c565b0190565b610396565b90610aec610ae783610ab7565b61078d565b918252565b3d5f14610b0c57610b013d610ada565b903d5f602084013e5b565b610b146109c2565b90610b0a565b915f8091610b709593610b2b6109c2565b50610b52610b38306109e9565b31610b4b610b4585610098565b91610098565b1015610a74565b8591602082019151925af191610b66610af1565b9092909192610c0f565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610ba7601d60209261088b565b610bb081610b73565b0190565b610bc99060208101905f818303910152610b9a565b90565b15610bd357565b610bdb610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610c0b60048201610bb4565b0390fd5b919290610c1a6109c2565b505f14610c5e5750610c2b82610827565b610c3d610c375f61082e565b91610098565b14610c47575b5090565b610c53610c5891610d2b565b610bcc565b5f610c43565b82610cbc565b5190565b90825f9392825e0152565b610c92610c9b602093610ca093610c8981610c64565b9384809361088b565b95869101610c68565b61038c565b0190565b610cb99160208201915f818403910152610c73565b90565b90610cc682610827565b610cd8610cd25f61082e565b91610098565b115f14610ce85750805190602001fd5b610d2390610cf4610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610ca4565b0390fd5b5f90565b610d33610d27565b503b610d47610d415f61082e565b91610098565b119056"

    public static let ReentrantCallError = ABI.Function(
        name: "ReentrantCall",
        inputs: []
    )

    public static let TransferFailedError = ABI.Function(
        name: "TransferFailed",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case reentrantCall
        case transferFailed
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (ReentrantCallError, _):
            return .reentrantCall
        case (TransferFailedError, _):
            return .transferFailed
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [ReentrantCallError, TransferFailedError]
    public static let functions: [ABI.Function] = [transferERC20TokenFn, transferNativeTokenFn]
    public static let transferERC20TokenFn = ABI.Function(
        name: "transferERC20Token",
        inputs: [.address, .address, .uint256],
        outputs: []
    )

    public static func transferERC20Token(token: EthAddress, recipient: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try transferERC20TokenFn.encoded(with: [.address(token), .address(recipient), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferERC20TokenFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferERC20TokenFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferERC20TokenDecode(input: Hex) throws -> (EthAddress, EthAddress, BigUInt) {
        let decodedInput = try transferERC20TokenFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.address(token), .address(recipient), .uint256(amount)):
            return (token, recipient, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferERC20TokenFn.inputTuple)
        }
    }

    public static let transferNativeTokenFn = ABI.Function(
        name: "transferNativeToken",
        inputs: [.address, .uint256],
        outputs: []
    )

    public static func transferNativeToken(recipient: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try transferNativeTokenFn.encoded(with: [.address(recipient), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferNativeTokenFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferNativeTokenFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferNativeTokenDecode(input: Hex) throws -> (EthAddress, BigUInt) {
        let decodedInput = try transferNativeTokenFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple2(.address(recipient), .uint256(amount)):
            return (recipient, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferNativeTokenFn.inputTuple)
        }
    }
}
