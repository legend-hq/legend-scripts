@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum TransferActions {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b610e4661002b8239610e4690f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b6101d6565b61001d5f3561003c565b8063d9931842146100375763e6b0cdbb0361000e576101a2565b610131565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b151590565b6100cc816100be565b036100d357565b5f80fd5b905035906100e4826100c3565b565b608081830312610127576100fc825f8301610089565b9261012461010d8460208501610089565b9361011b81604086016100af565b936060016100d7565b90565b61004c565b5f0190565b346101635761014d6101443660046100e6565b929190916105f9565b610155610042565b8061015f8161012c565b0390f35b610048565b909160608284031261019d5761019a610183845f8501610089565b9361019181602086016100af565b936040016100d7565b90565b61004c565b346101d1576101bb6101b5366004610168565b916107d7565b6101c3610042565b806101cd8161012c565b0390f35b610048565b5f80fd5b5f1c90565b90565b6101f66101f16101fb92610098565b6101df565b610098565b90565b61020a61020f916101da565b6101e2565b90565b90565b61022961022461022e92610212565b6101df565b610098565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61026d61027391939293610098565b92610098565b820391821161027e57565b610231565b90565b5f1b90565b61029f61029a6102a492610098565b610286565b610283565b90565b6102eb6102e66102d67f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d56101fe565b6102e06001610215565b9061025e565b61028b565b90565b5f90565b90926102fc6102a7565b926103056102ee565b50835c61032b61032561032061031b6001610215565b61028b565b610283565b91610283565b14610342575f9461033f936001865d6104c2565b5d565b5f7f37ed32e8000000000000000000000000000000000000000000000000000000008152806103736004820161012c565b0390fd5b61038b61038661039092610050565b6101df565b610050565b90565b61039c90610377565b90565b6103a890610393565b90565b6103b490610377565b90565b6103c0906103ab565b90565b6103cc906103ab565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90610410906103cf565b810190811067ffffffffffffffff82111761042a57604052565b6103d9565b60e01b90565b905051906104428261009b565b565b9060208282031261045d5761045a915f01610435565b90565b61004c565b61046b90610069565b9052565b9190610482905f60208501940190610462565b565b61048c610042565b3d5f823e3d90fd5b61049d906103ab565b90565b6104a990610098565b9052565b91906104c0905f602085019401906104a0565b565b9092610540575b6104dd6104d58261039f565b848491610851565b6104e6306103c3565b9290919261053b61052961052361051d7f1288af6a21bcbf8578557e4ee7c0be88a2be953a252ed25850019ea232b1a6bb94610494565b94610494565b94610494565b94610532610042565b918291826104ad565b0390a4565b9061058960206105576105528561039f565b6103b7565b6370a082319061057e610569306103c3565b92610572610042565b9586948593849361042f565b83526004830161046f565b03915afa9081156105f4575f916105c6575b50816105af6105a983610098565b91610098565b11155f146105bf57505b906104c9565b90506105b9565b6105e7915060203d81116105ed575b6105df8183610406565b810190610444565b5f61059b565b503d6105d5565b610484565b906106059392916102f2565b565b9190916106126102a7565b9161061b6102ee565b50825c61064161063b6106366106316001610215565b61028b565b610283565b91610283565b14610658575f93610655926001855d6106c9565b5d565b5f7f37ed32e8000000000000000000000000000000000000000000000000000000008152806106896004820161012c565b0390fd5b61069690610377565b90565b6106a29061068d565b90565b6106ae906103ab565b90565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90565b916107a4575b6106f85f8080806106e76106e288610699565b6106a5565b869082821561079b575bf1156100be565b61076657610705306103c3565b9161070e6106b1565b919261076161074f6107496107437f1288af6a21bcbf8578557e4ee7c0be88a2be953a252ed25850019ea232b1a6bb94610494565b94610494565b94610494565b94610758610042565b918291826104ad565b0390a4565b5f7f90b8ec18000000000000000000000000000000000000000000000000000000008152806107976004820161012c565b0390fd5b506108fc6106f1565b6107ad306103c3565b31816107c16107bb83610098565b91610098565b11155f146107d057505b6106cf565b90506107cb565b906107e29291610607565b565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61082661082161082b926107e4565b61042f565b6107ed565b90565b91602061084f92949361084860408201965f830190610462565b01906104a0565b565b9161089560049261088661089a959361086d63a9059cbb610812565b92610876610042565b968794602086019081520161082e565b60208201810382520383610406565b610a51565b565b906108af6108a8610042565b9283610406565b565b67ffffffffffffffff81116108cf576108cb6020916103cf565b0190565b6103d9565b906108e66108e1836108b1565b61089c565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61091c60206108d4565b90610929602083016108eb565b565b610933610912565b90565b5190565b90565b61095161094c6109569261093a565b6101df565b610098565b90565b90505190610966826100c3565b565b906020828203126109815761097e915f01610959565b90565b61004c565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b6109e9602a604092610986565b6109f28161098f565b0190565b610a0b9060208101905f8183039101526109dc565b90565b15610a1557565b610a1d610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a4d600482016109f6565b0390fd5b610a9a91610a61610a70926103b7565b90610a6a61092b565b91610ac2565b610a7981610936565b610a8b610a855f61093d565b91610098565b14908115610a9c575b50610a0e565b565b610ab791506020610aac82610936565b818301019101610968565b5f610a94565b606090565b90610ae19291610ad0610abd565b5090610adb5f61093d565b91610c15565b90565b610aed906103ab565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b4a6026604092610986565b610b5381610af0565b0190565b610b6c9060208101905f818303910152610b3d565b90565b15610b7657565b610b7e610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610bae60048201610b57565b0390fd5b67ffffffffffffffff8111610bd057610bcc6020916103cf565b0190565b6103d9565b90610be7610be283610bb2565b61089c565b918252565b3d5f14610c0757610bfc3d610bd5565b903d5f602084013e5b565b610c0f610abd565b90610c05565b915f8091610c6b9593610c26610abd565b50610c4d610c3330610ae4565b31610c46610c4085610098565b91610098565b1015610b6f565b8591602082019151925af191610c61610bec565b9092909192610d0a565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610ca2601d602092610986565b610cab81610c6e565b0190565b610cc49060208101905f818303910152610c95565b90565b15610cce57565b610cd6610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610d0660048201610caf565b0390fd5b919290610d15610abd565b505f14610d595750610d2682610936565b610d38610d325f61093d565b91610098565b14610d42575b5090565b610d4e610d5391610e26565b610cc7565b5f610d3e565b82610db7565b5190565b90825f9392825e0152565b610d8d610d96602093610d9b93610d8481610d5f565b93848093610986565b95869101610d63565b6103cf565b0190565b610db49160208201915f818403910152610d6e565b90565b90610dc182610936565b610dd3610dcd5f61093d565b91610098565b115f14610de35750805190602001fd5b610e1e90610def610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d9f565b0390fd5b5f90565b610e2e610e22565b503b610e42610e3c5f61093d565b91610098565b119056"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b6101d6565b61001d5f3561003c565b8063d9931842146100375763e6b0cdbb0361000e576101a2565b610131565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b151590565b6100cc816100be565b036100d357565b5f80fd5b905035906100e4826100c3565b565b608081830312610127576100fc825f8301610089565b9261012461010d8460208501610089565b9361011b81604086016100af565b936060016100d7565b90565b61004c565b5f0190565b346101635761014d6101443660046100e6565b929190916105f9565b610155610042565b8061015f8161012c565b0390f35b610048565b909160608284031261019d5761019a610183845f8501610089565b9361019181602086016100af565b936040016100d7565b90565b61004c565b346101d1576101bb6101b5366004610168565b916107d7565b6101c3610042565b806101cd8161012c565b0390f35b610048565b5f80fd5b5f1c90565b90565b6101f66101f16101fb92610098565b6101df565b610098565b90565b61020a61020f916101da565b6101e2565b90565b90565b61022961022461022e92610212565b6101df565b610098565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61026d61027391939293610098565b92610098565b820391821161027e57565b610231565b90565b5f1b90565b61029f61029a6102a492610098565b610286565b610283565b90565b6102eb6102e66102d67f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d56101fe565b6102e06001610215565b9061025e565b61028b565b90565b5f90565b90926102fc6102a7565b926103056102ee565b50835c61032b61032561032061031b6001610215565b61028b565b610283565b91610283565b14610342575f9461033f936001865d6104c2565b5d565b5f7f37ed32e8000000000000000000000000000000000000000000000000000000008152806103736004820161012c565b0390fd5b61038b61038661039092610050565b6101df565b610050565b90565b61039c90610377565b90565b6103a890610393565b90565b6103b490610377565b90565b6103c0906103ab565b90565b6103cc906103ab565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90610410906103cf565b810190811067ffffffffffffffff82111761042a57604052565b6103d9565b60e01b90565b905051906104428261009b565b565b9060208282031261045d5761045a915f01610435565b90565b61004c565b61046b90610069565b9052565b9190610482905f60208501940190610462565b565b61048c610042565b3d5f823e3d90fd5b61049d906103ab565b90565b6104a990610098565b9052565b91906104c0905f602085019401906104a0565b565b9092610540575b6104dd6104d58261039f565b848491610851565b6104e6306103c3565b9290919261053b61052961052361051d7f1288af6a21bcbf8578557e4ee7c0be88a2be953a252ed25850019ea232b1a6bb94610494565b94610494565b94610494565b94610532610042565b918291826104ad565b0390a4565b9061058960206105576105528561039f565b6103b7565b6370a082319061057e610569306103c3565b92610572610042565b9586948593849361042f565b83526004830161046f565b03915afa9081156105f4575f916105c6575b50816105af6105a983610098565b91610098565b11155f146105bf57505b906104c9565b90506105b9565b6105e7915060203d81116105ed575b6105df8183610406565b810190610444565b5f61059b565b503d6105d5565b610484565b906106059392916102f2565b565b9190916106126102a7565b9161061b6102ee565b50825c61064161063b6106366106316001610215565b61028b565b610283565b91610283565b14610658575f93610655926001855d6106c9565b5d565b5f7f37ed32e8000000000000000000000000000000000000000000000000000000008152806106896004820161012c565b0390fd5b61069690610377565b90565b6106a29061068d565b90565b6106ae906103ab565b90565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90565b916107a4575b6106f85f8080806106e76106e288610699565b6106a5565b869082821561079b575bf1156100be565b61076657610705306103c3565b9161070e6106b1565b919261076161074f6107496107437f1288af6a21bcbf8578557e4ee7c0be88a2be953a252ed25850019ea232b1a6bb94610494565b94610494565b94610494565b94610758610042565b918291826104ad565b0390a4565b5f7f90b8ec18000000000000000000000000000000000000000000000000000000008152806107976004820161012c565b0390fd5b506108fc6106f1565b6107ad306103c3565b31816107c16107bb83610098565b91610098565b11155f146107d057505b6106cf565b90506107cb565b906107e29291610607565b565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61082661082161082b926107e4565b61042f565b6107ed565b90565b91602061084f92949361084860408201965f830190610462565b01906104a0565b565b9161089560049261088661089a959361086d63a9059cbb610812565b92610876610042565b968794602086019081520161082e565b60208201810382520383610406565b610a51565b565b906108af6108a8610042565b9283610406565b565b67ffffffffffffffff81116108cf576108cb6020916103cf565b0190565b6103d9565b906108e66108e1836108b1565b61089c565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61091c60206108d4565b90610929602083016108eb565b565b610933610912565b90565b5190565b90565b61095161094c6109569261093a565b6101df565b610098565b90565b90505190610966826100c3565b565b906020828203126109815761097e915f01610959565b90565b61004c565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b6109e9602a604092610986565b6109f28161098f565b0190565b610a0b9060208101905f8183039101526109dc565b90565b15610a1557565b610a1d610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a4d600482016109f6565b0390fd5b610a9a91610a61610a70926103b7565b90610a6a61092b565b91610ac2565b610a7981610936565b610a8b610a855f61093d565b91610098565b14908115610a9c575b50610a0e565b565b610ab791506020610aac82610936565b818301019101610968565b5f610a94565b606090565b90610ae19291610ad0610abd565b5090610adb5f61093d565b91610c15565b90565b610aed906103ab565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b4a6026604092610986565b610b5381610af0565b0190565b610b6c9060208101905f818303910152610b3d565b90565b15610b7657565b610b7e610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610bae60048201610b57565b0390fd5b67ffffffffffffffff8111610bd057610bcc6020916103cf565b0190565b6103d9565b90610be7610be283610bb2565b61089c565b918252565b3d5f14610c0757610bfc3d610bd5565b903d5f602084013e5b565b610c0f610abd565b90610c05565b915f8091610c6b9593610c26610abd565b50610c4d610c3330610ae4565b31610c46610c4085610098565b91610098565b1015610b6f565b8591602082019151925af191610c61610bec565b9092909192610d0a565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610ca2601d602092610986565b610cab81610c6e565b0190565b610cc49060208101905f818303910152610c95565b90565b15610cce57565b610cd6610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610d0660048201610caf565b0390fd5b919290610d15610abd565b505f14610d595750610d2682610936565b610d38610d325f61093d565b91610098565b14610d42575b5090565b610d4e610d5391610e26565b610cc7565b5f610d3e565b82610db7565b5190565b90825f9392825e0152565b610d8d610d96602093610d9b93610d8481610d5f565b93848093610986565b95869101610d63565b6103cf565b0190565b610db49160208201915f818403910152610d6e565b90565b90610dc182610936565b610dd3610dcd5f61093d565b91610098565b115f14610de35750805190602001fd5b610e1e90610def610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d9f565b0390fd5b5f90565b610e2e610e22565b503b610e42610e3c5f61093d565b91610098565b119056"

    public static let ReentrantCallError = ABI.Function(
        name: "ReentrantCall",
        inputs: []
    )

    public static let TransferFailedError = ABI.Function(
        name: "TransferFailed",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case reentrantCall
        case transferFailed
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (ReentrantCallError, _):
            return .reentrantCall
        case (TransferFailedError, _):
            return .transferFailed
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [ReentrantCallError, TransferFailedError]
    public static let functions: [ABI.Function] = [transferERC20TokenFn, transferNativeTokenFn]
    public static let transferERC20TokenFn = ABI.Function(
        name: "transferERC20Token",
        inputs: [.address, .address, .uint256, .bool],
        outputs: []
    )

    public static func transferERC20Token(token: EthAddress, recipient: EthAddress, amount: BigUInt, cappedMax: Bool, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try transferERC20TokenFn.encoded(with: [.address(token), .address(recipient), .uint256(amount), .bool(cappedMax)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferERC20TokenFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferERC20TokenFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferERC20TokenDecode(input: Hex) throws -> (EthAddress, EthAddress, BigUInt, Bool) {
        let decodedInput = try transferERC20TokenFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple4(.address(token), .address(recipient), .uint256(amount), .bool(cappedMax)):
            return (token, recipient, amount, cappedMax)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferERC20TokenFn.inputTuple)
        }
    }

    public static let transferNativeTokenFn = ABI.Function(
        name: "transferNativeToken",
        inputs: [.address, .uint256, .bool],
        outputs: []
    )

    public static func transferNativeToken(recipient: EthAddress, amount: BigUInt, cappedMax: Bool, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try transferNativeTokenFn.encoded(with: [.address(recipient), .uint256(amount), .bool(cappedMax)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferNativeTokenFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferNativeTokenFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferNativeTokenDecode(input: Hex) throws -> (EthAddress, BigUInt, Bool) {
        let decodedInput = try transferNativeTokenFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.address(recipient), .uint256(amount), .bool(cappedMax)):
            return (recipient, amount, cappedMax)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferNativeTokenFn.inputTuple)
        }
    }
}
