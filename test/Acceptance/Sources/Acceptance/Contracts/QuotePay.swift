@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum QuotePay {
    public static let creationCode: Hex = "0x608080604052346015576102cf908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c633e8bca6814610025575f80fd5b346101d55760803660031901126101d5576004356001600160a01b038116908190036101d5576024356001600160a01b03811692908390036101d55760443590602081019063a9059cbb60e01b82528360248201528260448201526044815261008f6064826101f9565b5f806040938451936100a186866101f9565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020860152519082895af1903d156101ed573d67ffffffffffffffff81116101d9578351610114939091610104601f8201601f1916602001846101f9565b82523d5f602084013e5b8761021b565b80519081159182156101b2575b50501561015c57807f707da3174303ef012eae997e76518ad0cc80830ffe62ad66a5db5df757187dbc915192835260643560208401523092a4005b5162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b81925090602091810103126101d5576020015180151581036101d5575f80610121565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6101149160609061010e565b90601f8019910116810190811067ffffffffffffffff8211176101d957604052565b9192901561027d575081511561022f575090565b3b156102385790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156102905750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fd"
    public static let runtimeCode: Hex = "0x6080806040526004361015610012575f80fd5b5f3560e01c633e8bca6814610025575f80fd5b346101d55760803660031901126101d5576004356001600160a01b038116908190036101d5576024356001600160a01b03811692908390036101d55760443590602081019063a9059cbb60e01b82528360248201528260448201526044815261008f6064826101f9565b5f806040938451936100a186866101f9565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020860152519082895af1903d156101ed573d67ffffffffffffffff81116101d9578351610114939091610104601f8201601f1916602001846101f9565b82523d5f602084013e5b8761021b565b80519081159182156101b2575b50501561015c57807f707da3174303ef012eae997e76518ad0cc80830ffe62ad66a5db5df757187dbc915192835260643560208401523092a4005b5162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b81925090602091810103126101d5576020015180151581036101d5575f80610121565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6101149160609061010e565b90601f8019910116810190811067ffffffffffffffff8211176101d957604052565b9192901561027d575081511561022f575090565b3b156102385790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156102905750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fd"


    public enum RevertReason : Equatable, Error {
        case unknownRevert(String, String)
    }
    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
            }
    }
    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [payFn]
    public static let payFn = ABI.Function(
            name: "pay",
            inputs: [.address, .address, .uint256, .bytes32],
            outputs: []
    )

    public static func pay(payee: EthAddress, paymentToken: EthAddress, quotedAmount: BigUInt, quoteId: Hex, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<(), RevertReason> {
            do {
                let query = try payFn.encoded(with: [.address(payee), .address(paymentToken), .uint256(quotedAmount), .bytes32(quoteId)])
                let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
                let decoded = try payFn.decode(output: result)

                switch decoded {
                case  .tuple0:
                    return .success(())
                default:
                    throw ABI.DecodeError.mismatchedType(decoded.schema, payFn.outputTuple)
                }
            } catch let EVM.QueryError.error(e, v) {
                return .failure(rewrapError(e, value: v))
            }
    }


    public static func payDecode(input: Hex) throws -> (EthAddress, EthAddress, BigUInt, Hex) {
        let decodedInput = try payFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple4(.address(payee), .address(paymentToken), .uint256(quotedAmount), .bytes32(quoteId)):
            return  (payee, paymentToken, quotedAmount, quoteId)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, payFn.inputTuple)
        }
    }

    }