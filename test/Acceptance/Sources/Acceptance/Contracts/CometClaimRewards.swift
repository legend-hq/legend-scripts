@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum CometClaimRewards {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b6104ee61002b82396104ee90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610154565b61001d5f3561002c565b6375c79c440361000e5761011a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561008a5781359167ffffffffffffffff831161008557602001926020830284011161008057565b61004c565b610048565b610044565b90606082820312610110575f82013567ffffffffffffffff811161010b57816100b9918401610050565b929093602082013567ffffffffffffffff811161010657836100dc918401610050565b929093604082013567ffffffffffffffff8111610101576100fd9201610050565b9091565b610040565b610040565b610040565b61003c565b5f0190565b3461014f5761013961012d36600461008f565b9493909392919261033e565b610141610032565b8061014b81610115565b0390f35b610038565b5f80fd5b5090565b90565b90565b90565b61017961017461017e9261015f565b610162565b61015c565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b91908110156101be576020020190565b610181565b73ffffffffffffffffffffffffffffffffffffffff1690565b6101e5906101c3565b90565b6101f1816101dc565b036101f857565b5f80fd5b35610206816101e8565b90565b61021d610218610222926101c3565b610162565b6101c3565b90565b61022e90610209565b90565b61023a90610225565b90565b61024690610209565b90565b6102529061023d565b90565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061029a90610259565b810190811067ffffffffffffffff8211176102b457604052565b610263565b60e01b90565b5f9103126102c957565b61003c565b6102d7906101dc565b9052565b151590565b6102e9906102db565b9052565b60409061031661031d949695939661030c60608401985f8501906102ce565b60208301906102ce565b01906102e0565b565b610327610032565b3d5f823e3d90fd5b600161033b910161015c565b90565b95949193929561034f818390610158565b61036b610365610360888b90610158565b61015c565b9161015c565b141580156104bf575b61048a576103815f610165565b5b8061039f610399610394858790610158565b61015c565b9161015c565b1015610480576103c96103c46103bf6103ba858786916101ae565b6101fc565b610231565b610249565b9063b7034f7e6103e36103de898c85916101ae565b6101fc565b6103f76103f2898986916101ae565b6101fc565b93600192813b1561047b575f6104209161042b8296610414610032565b998a97889687956102b9565b8552600485016102ed565b03925af1918215610476576104459261044a575b5061032f565b610382565b610469905f3d811161046f575b6104618183610290565b8101906102bf565b5f61043f565b503d610457565b61031f565b610255565b5050505050509050565b5f7fb4fa3fb3000000000000000000000000000000000000000000000000000000008152806104bb60048201610115565b0390fd5b506104cb818390610158565b6104e76104e16104dc878790610158565b61015c565b9161015c565b141561037456"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610154565b61001d5f3561002c565b6375c79c440361000e5761011a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561008a5781359167ffffffffffffffff831161008557602001926020830284011161008057565b61004c565b610048565b610044565b90606082820312610110575f82013567ffffffffffffffff811161010b57816100b9918401610050565b929093602082013567ffffffffffffffff811161010657836100dc918401610050565b929093604082013567ffffffffffffffff8111610101576100fd9201610050565b9091565b610040565b610040565b610040565b61003c565b5f0190565b3461014f5761013961012d36600461008f565b9493909392919261033e565b610141610032565b8061014b81610115565b0390f35b610038565b5f80fd5b5090565b90565b90565b90565b61017961017461017e9261015f565b610162565b61015c565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b91908110156101be576020020190565b610181565b73ffffffffffffffffffffffffffffffffffffffff1690565b6101e5906101c3565b90565b6101f1816101dc565b036101f857565b5f80fd5b35610206816101e8565b90565b61021d610218610222926101c3565b610162565b6101c3565b90565b61022e90610209565b90565b61023a90610225565b90565b61024690610209565b90565b6102529061023d565b90565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061029a90610259565b810190811067ffffffffffffffff8211176102b457604052565b610263565b60e01b90565b5f9103126102c957565b61003c565b6102d7906101dc565b9052565b151590565b6102e9906102db565b9052565b60409061031661031d949695939661030c60608401985f8501906102ce565b60208301906102ce565b01906102e0565b565b610327610032565b3d5f823e3d90fd5b600161033b910161015c565b90565b95949193929561034f818390610158565b61036b610365610360888b90610158565b61015c565b9161015c565b141580156104bf575b61048a576103815f610165565b5b8061039f610399610394858790610158565b61015c565b9161015c565b1015610480576103c96103c46103bf6103ba858786916101ae565b6101fc565b610231565b610249565b9063b7034f7e6103e36103de898c85916101ae565b6101fc565b6103f76103f2898986916101ae565b6101fc565b93600192813b1561047b575f6104209161042b8296610414610032565b998a97889687956102b9565b8552600485016102ed565b03925af1918215610476576104459261044a575b5061032f565b610382565b610469905f3d811161046f575b6104618183610290565b8101906102bf565b5f61043f565b503d610457565b61031f565b610255565b5050505050509050565b5f7fb4fa3fb3000000000000000000000000000000000000000000000000000000008152806104bb60048201610115565b0390fd5b506104cb818390610158565b6104e76104e16104dc878790610158565b61015c565b9161015c565b141561037456"

    public static let InvalidInputError = ABI.Function(
        name: "InvalidInput",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case invalidInput
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (InvalidInputError, _):
            return .invalidInput
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [InvalidInputError]
    public static let functions: [ABI.Function] = [claimFn]
    public static let claimFn = ABI.Function(
        name: "claim",
        inputs: [.array(.address), .array(.address), .array(.address)],
        outputs: []
    )

    public static func claim(cometRewards: [EthAddress], comets: [EthAddress], accounts: [EthAddress], withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try claimFn.encoded(with: [.array(.address, cometRewards.map {
                .address($0)
            }), .array(.address, comets.map {
                .address($0)
            }), .array(.address, accounts.map {
                .address($0)
            })])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try claimFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, claimFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func claimDecode(input: Hex) throws -> ([EthAddress], [EthAddress], [EthAddress]) {
        let decodedInput = try claimFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.array(.address, cometRewards), .array(.address, comets), .array(.address, accounts)):
            return (cometRewards.map { $0.asEthAddress! }, comets.map { $0.asEthAddress! }, accounts.map { $0.asEthAddress! })
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, claimFn.inputTuple)
        }
    }
}
