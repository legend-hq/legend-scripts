@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum CometClaimRewards {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b61049461002b823961049490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017f565b61001d5f3561002c565b637a53b6370361000e57610148565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561008a5781359167ffffffffffffffff831161008557602001926020830284011161008057565b61004c565b610048565b610044565b73ffffffffffffffffffffffffffffffffffffffff1690565b6100b19061008f565b90565b6100bd816100a8565b036100c457565b5f80fd5b905035906100d5826100b4565b565b60608183031261013e575f81013567ffffffffffffffff81116101395782610100918301610050565b929093602083013567ffffffffffffffff81116101345761012683610131928601610050565b9390946040016100c8565b90565b610040565b610040565b61003c565b5f0190565b3461017a5761016461015b3660046100d7565b93929092610330565b61016c610032565b8061017681610143565b0390f35b610038565b5f80fd5b5090565b90565b90565b90565b6101a461019f6101a99261018a565b61018d565b610187565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b91908110156101e9576020020190565b6101ac565b356101f8816100b4565b90565b61020f61020a6102149261008f565b61018d565b61008f565b90565b610220906101fb565b90565b61022c90610217565b90565b610238906101fb565b90565b6102449061022f565b90565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061028c9061024b565b810190811067ffffffffffffffff8211176102a657604052565b610255565b60e01b90565b5f9103126102bb57565b61003c565b6102c9906100a8565b9052565b151590565b6102db906102cd565b9052565b60409061030861030f94969593966102fe60608401985f8501906102c0565b60208301906102c0565b01906102d2565b565b610319610032565b3d5f823e3d90fd5b600161032d9101610187565b90565b9493919294610340818390610183565b61035c610356610351878a90610183565b610187565b91610187565b0361045f5761036a5f610190565b5b8061038861038261037d858790610183565b610187565b91610187565b1015610456576103b26103ad6103a86103a3858786916101d9565b6101ee565b610223565b61023b565b9063b7034f7e6103cc6103c7888b85916101d9565b6101ee565b8693600192813b15610451575f6103f69161040182966103ea610032565b998a97889687956102ab565b8552600485016102df565b03925af191821561044c5761041b92610420575b50610321565b61036b565b61043f905f3d8111610445575b6104378183610282565b8101906102b1565b5f610415565b503d61042d565b610311565b610247565b50505050509050565b5f7fb4fa3fb30000000000000000000000000000000000000000000000000000000081528061049060048201610143565b0390fd"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b61017f565b61001d5f3561002c565b637a53b6370361000e57610148565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561008a5781359167ffffffffffffffff831161008557602001926020830284011161008057565b61004c565b610048565b610044565b73ffffffffffffffffffffffffffffffffffffffff1690565b6100b19061008f565b90565b6100bd816100a8565b036100c457565b5f80fd5b905035906100d5826100b4565b565b60608183031261013e575f81013567ffffffffffffffff81116101395782610100918301610050565b929093602083013567ffffffffffffffff81116101345761012683610131928601610050565b9390946040016100c8565b90565b610040565b610040565b61003c565b5f0190565b3461017a5761016461015b3660046100d7565b93929092610330565b61016c610032565b8061017681610143565b0390f35b610038565b5f80fd5b5090565b90565b90565b90565b6101a461019f6101a99261018a565b61018d565b610187565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b91908110156101e9576020020190565b6101ac565b356101f8816100b4565b90565b61020f61020a6102149261008f565b61018d565b61008f565b90565b610220906101fb565b90565b61022c90610217565b90565b610238906101fb565b90565b6102449061022f565b90565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061028c9061024b565b810190811067ffffffffffffffff8211176102a657604052565b610255565b60e01b90565b5f9103126102bb57565b61003c565b6102c9906100a8565b9052565b151590565b6102db906102cd565b9052565b60409061030861030f94969593966102fe60608401985f8501906102c0565b60208301906102c0565b01906102d2565b565b610319610032565b3d5f823e3d90fd5b600161032d9101610187565b90565b9493919294610340818390610183565b61035c610356610351878a90610183565b610187565b91610187565b0361045f5761036a5f610190565b5b8061038861038261037d858790610183565b610187565b91610187565b1015610456576103b26103ad6103a86103a3858786916101d9565b6101ee565b610223565b61023b565b9063b7034f7e6103cc6103c7888b85916101d9565b6101ee565b8693600192813b15610451575f6103f69161040182966103ea610032565b998a97889687956102ab565b8552600485016102df565b03925af191821561044c5761041b92610420575b50610321565b61036b565b61043f905f3d8111610445575b6104378183610282565b8101906102b1565b5f610415565b503d61042d565b610311565b610247565b50505050509050565b5f7fb4fa3fb30000000000000000000000000000000000000000000000000000000081528061049060048201610143565b0390fd"

    public static let InvalidInputError = ABI.Function(
        name: "InvalidInput",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case invalidInput
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (InvalidInputError, _):
            return .invalidInput
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [InvalidInputError]
    public static let functions: [ABI.Function] = [claimFn]
    public static let claimFn = ABI.Function(
        name: "claim",
        inputs: [.array(.address), .array(.address), .address],
        outputs: []
    )

    public static func claim(cometRewards: [EthAddress], comets: [EthAddress], recipient: EthAddress, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try claimFn.encoded(with: [.array(.address, cometRewards.map {
                .address($0)
            }), .array(.address, comets.map {
                .address($0)
            }), .address(recipient)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try claimFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, claimFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func claimDecode(input: Hex) throws -> ([EthAddress], [EthAddress], EthAddress) {
        let decodedInput = try claimFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.array(.address, cometRewards), .array(.address, comets), .address(recipient)):
            return (cometRewards.map { $0.asEthAddress! }, comets.map { $0.asEthAddress! }, recipient)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, claimFn.inputTuple)
        }
    }
}
