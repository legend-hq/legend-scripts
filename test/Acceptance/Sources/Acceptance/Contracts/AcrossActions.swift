@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum AcrossActions {
    public struct DepositV3Params: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .address, .address, .uint256, .uint256, .uint256, .address, .uint32, .uint32, .uint32, .bytes])

        public let depositor: EthAddress
        public let recipient: EthAddress
        public let inputToken: EthAddress
        public let outputToken: EthAddress
        public let inputAmount: BigUInt
        public let outputAmount: BigUInt
        public let destinationChainId: BigUInt
        public let exclusiveRelayer: EthAddress
        public let quoteTimestamp: UInt
        public let fillDeadline: UInt
        public let exclusivityDeadline: UInt
        public let message: Hex

        public init(depositor: EthAddress, recipient: EthAddress, inputToken: EthAddress, outputToken: EthAddress, inputAmount: BigUInt, outputAmount: BigUInt, destinationChainId: BigUInt, exclusiveRelayer: EthAddress, quoteTimestamp: UInt, fillDeadline: UInt, exclusivityDeadline: UInt, message: Hex) {
            self.depositor = depositor
            self.recipient = recipient
            self.inputToken = inputToken
            self.outputToken = outputToken
            self.inputAmount = inputAmount
            self.outputAmount = outputAmount
            self.destinationChainId = destinationChainId
            self.exclusiveRelayer = exclusiveRelayer
            self.quoteTimestamp = quoteTimestamp
            self.fillDeadline = fillDeadline
            self.exclusivityDeadline = exclusivityDeadline
            self.message = message
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple12(.address(depositor),
                     .address(recipient),
                     .address(inputToken),
                     .address(outputToken),
                     .uint256(inputAmount),
                     .uint256(outputAmount),
                     .uint256(destinationChainId),
                     .address(exclusiveRelayer),
                     .uint32(quoteTimestamp),
                     .uint32(fillDeadline),
                     .uint32(exclusivityDeadline),
                     .bytes(message))
        }

        public static func decode(hex: Hex) throws -> DepositV3Params {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> DepositV3Params {
            switch value {
            case let .tuple12(.address(depositor),
                              .address(recipient),
                              .address(inputToken),
                              .address(outputToken),
                              .uint256(inputAmount),
                              .uint256(outputAmount),
                              .uint256(destinationChainId),
                              .address(exclusiveRelayer),
                              .uint32(quoteTimestamp),
                              .uint32(fillDeadline),
                              .uint32(exclusivityDeadline),
                              .bytes(message)):
                return DepositV3Params(depositor: depositor, recipient: recipient, inputToken: inputToken, outputToken: outputToken, inputAmount: inputAmount, outputAmount: outputAmount, destinationChainId: destinationChainId, exclusiveRelayer: exclusiveRelayer, quoteTimestamp: quoteTimestamp, fillDeadline: fillDeadline, exclusivityDeadline: exclusivityDeadline, message: message)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public static let creationCode: Hex = ""
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610427565b61001d5f3561002c565b63b969f7fa0361000e576103f7565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61006290610040565b90565b61006e81610059565b0361007557565b5f80fd5b9050359061008682610065565b565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906100cd9061008c565b810190811067ffffffffffffffff8211176100e757604052565b610096565b906100ff6100f8610032565b92836100c3565b565b5f80fd5b90565b61011181610105565b0361011857565b5f80fd5b9050359061012982610108565b565b63ffffffff1690565b61013d8161012b565b0361014457565b5f80fd5b9050359061015582610134565b565b5f80fd5b5f80fd5b67ffffffffffffffff811161017d5761017960209161008c565b0190565b610096565b90825f939282370152565b909291926101a261019d8261015f565b6100ec565b938185526020850190828401116101be576101bc92610182565b565b61015b565b9080601f830112156101e1578160206101de9335910161018d565b90565b610157565b919091610180818403126102f6576101ff6101806100ec565b9261020c815f8401610079565b5f85015261021d8160208401610079565b602085015261022f8160408401610079565b60408501526102418160608401610079565b6060850152610253816080840161011c565b60808501526102658160a0840161011c565b60a08501526102778160c0840161011c565b60c08501526102898160e08401610079565b60e085015261029c816101008401610148565b6101008501526102b0816101208401610148565b6101208501526102c4816101408401610148565b61014085015261016082013567ffffffffffffffff81116102f1576102e992016101c3565b610160830152565b610101565b610088565b5f80fd5b5f80fd5b909182601f8301121561033d5781359167ffffffffffffffff831161033857602001926001830284011161033357565b6102ff565b6102fb565b610157565b151590565b61035081610342565b0361035757565b5f80fd5b9050359061036882610347565b565b9060a0828203126103ed57610381815f8401610079565b92602083013567ffffffffffffffff81116103e857826103a29185016101e6565b9260408101359167ffffffffffffffff83116103e3576103c7846103e0948401610303565b9390946103d7816060860161035b565b9360800161035b565b90565b61003c565b61003c565b610038565b5f0190565b61041161040536600461036a565b949390939291926107c6565b610419610032565b80610423816103f2565b0390f35b5f80fd5b6104359051610059565b90565b90565b61044f61044a61045492610040565b610438565b610040565b90565b6104609061043b565b90565b61046c90610457565b90565b6104789061043b565b90565b6104849061046f565b90565b6104909061046f565b90565b60e01b90565b905051906104a682610108565b565b906020828203126104c1576104be915f01610499565b90565b610038565b6104cf90610059565b9052565b91906104e6905f602085019401906104c6565b565b6104f0610032565b3d5f823e3d90fd5b6105029051610105565b90565b9061050f90610105565b9052565b61051d905161012b565b90565b61052990610105565b9052565b6105369061012b565b9052565b5190565b60209181520190565b90825f9392825e0152565b61057161057a60209361057f936105688161053a565b9384809361053e565b95869101610547565b61008c565b0190565b99979593919a98969492909a6101808b019b5f8c016105a1916104c6565b60208b016105ae916104c6565b60408a016105bb916104c6565b606089016105c8916104c6565b608088016105d591610520565b60a087016105e291610520565b60c086016105ef91610520565b60e085016105fc916104c6565b610100840161060a9161052d565b61012083016106189161052d565b61014082016106269161052d565b80820390610160015261063891610552565b90565b67ffffffffffffffff81116106595761065560209161008c565b0190565b610096565b9061067061066b8361063b565b6100ec565b918252565b5f7f1dc0de0000000000000000000000000000000000000000000000000000000000910152565b6106a6600361065e565b906106b360208301610675565b565b6106bd61069c565b90565b6106c86106b5565b90565b905090565b6106f56106ec926020926106e38161053a565b948580936106cb565b93849101610547565b0190565b90918261070981610710936106cb565b8093610182565b0190565b91610726610732959361072c936106d0565b906106d0565b916106f9565b90565b610754610760939594610746610032565b968794602086019485610714565b908103825203836100c3565b565b90565b61077961077461077e92610762565b610438565b610105565b90565b9061079361078e8361015f565b6100ec565b918252565b606090565b3d5f146107b8576107ad3d610781565b903d5f602084013e5b565b6107c0610798565b906107b6565b94939291909361095c575b836040016107de9061042b565b6107e790610463565b85856080016107f5906104f8565b906107ff92610af9565b7f7b93923200000000000000000000000000000000000000000000000000000000845f0161082c9061042b565b908560200161083a9061042b565b91866040016108489061042b565b87806060016108569061042b565b81608001610863906104f8565b8260a001610870906104f8565b8360c00161087d906104f8565b8460e00161088a9061042b565b91856101000161089990610513565b9386610120016108a890610513565b9587610140016108b790610513565b976101600151986108c6610032565b9c8d9c60208e019081526004019b6108dd9c610583565b6020820181038252036108f090826100c3565b916108f96106c0565b91909161090593610735565b92905f14925f9392849361094c57608061091f91016104f8565b915b91602082019151925af161093d61093661079d565b9115610342565b6109445750565b602081519101fd5b5061095683610765565b91610921565b6109af602061097d6109786109736040890161042b565b610463565b61047b565b6370a08231906109a461098f30610487565b92610998610032565b95869485938493610493565b8352600483016104d3565b03915afa908115610a3e575f91610a10575b506109ce608086016104f8565b6109e06109da83610105565b91610105565b11155f14610a075750610a026109f8608086016104f8565b5b60808601610505565b6107d1565b610a02906109f9565b610a31915060203d8111610a37575b610a2981836100c3565b8101906104a8565b5f6109c1565b503d610a1f565b6104e8565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b610a7c610a77610a819261012b565b610493565b610a43565b90565b916020610aa5929493610a9e60408201965f8301906104c6565b0190610520565b565b60ff1690565b610ac1610abc610ac692610762565b610438565b610aa7565b90565b610ad290610aad565b9052565b916020610af7929493610af060408201965f8301906104c6565b0190610ac9565b565b9091610b3a600491610b2b610b1163095ea7b3610a68565b9186610b1b610032565b9586946020860190815201610a84565b602082018103825203826100c3565b90610b4f610b49828490610be4565b15610342565b610b59575b505050565b610ba66004610bab94610ba18491610b92610b7763095ea7b3610a68565b915f90610b82610032565b9687946020860190815201610ad6565b602082018103825203836100c3565b610d9c565b610d9c565b5f8080610b54565b5f90565b90505190610bc482610347565b565b90602082820312610bdf57610bdc915f01610bb7565b90565b610038565b905f8091610bf0610bb3565b50610bfa8461047b565b9082602082019151925af1610c0d61079d565b81610c38575b509081610c1f575b5090565b610c329150610c2d9061047b565b610e08565b5f610c1b565b9050610c438161053a565b610c55610c4f5f610765565b91610105565b14908115610c65575b505f610c13565b610c8091506020610c758261053a565b818301019101610bc6565b5f610c5e565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b610cb7602061065e565b90610cc460208301610c86565b565b610cce610cad565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610d34602a604092610cd1565b610d3d81610cda565b0190565b610d569060208101905f818303910152610d27565b90565b15610d6057565b610d68610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610d9860048201610d41565b0390fd5b610de591610dac610dbb9261047b565b90610db5610cc6565b91610e28565b610dc48161053a565b610dd6610dd05f610765565b91610105565b14908115610de7575b50610d59565b565b610e0291506020610df78261053a565b818301019101610bc6565b5f610ddf565b610e10610bb3565b503b610e24610e1e5f610765565b91610105565b1190565b90610e479291610e36610798565b5090610e415f610765565b91610f18565b90565b610e539061046f565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610eb06026604092610cd1565b610eb981610e56565b0190565b610ed29060208101905f818303910152610ea3565b90565b15610edc57565b610ee4610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610f1460048201610ebd565b0390fd5b915f8091610f6e9593610f29610798565b50610f50610f3630610e4a565b31610f49610f4385610105565b91610105565b1015610ed5565b8591602082019151925af191610f6461079d565b909290919261100d565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610fa5601d602092610cd1565b610fae81610f71565b0190565b610fc79060208101905f818303910152610f98565b90565b15610fd157565b610fd9610032565b7f08c379a00000000000000000000000000000000000000000000000000000000081528061100960048201610fb2565b0390fd5b919290611018610798565b505f1461105c57506110298261053a565b61103b6110355f610765565b91610105565b14611045575b5090565b61105161105691610e08565b610fca565b5f611041565b826110af565b5190565b61108561108e6020936110939361107c81611062565b93848093610cd1565b95869101610547565b61008c565b0190565b6110ac9160208201915f818403910152611066565b90565b906110b98261053a565b6110cb6110c55f610765565b91610105565b115f146110db5750805190602001fd5b611116906110e7610032565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301611097565b0390fd"

    public enum RevertReason: Equatable, Error {
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [depositV3Fn]
    public static let depositV3Fn = ABI.Function(
        name: "depositV3",
        inputs: [.address, .tuple([.address, .address, .address, .address, .uint256, .uint256, .uint256, .address, .uint32, .uint32, .uint32, .bytes]), .bytes, .bool, .bool],
        outputs: []
    )

    public static func depositV3(spokePool: EthAddress, params: DepositV3Params, uniqueIdentifier: Hex, useNativeToken: Bool, cappedMax: Bool, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try depositV3Fn.encoded(with: [.address(spokePool), params.asValue, .bytes(uniqueIdentifier), .bool(useNativeToken), .bool(cappedMax)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try depositV3Fn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, depositV3Fn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func depositV3Decode(input: Hex) throws -> (EthAddress, DepositV3Params, Hex, Bool, Bool) {
        let decodedInput = try depositV3Fn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple5(.address(spokePool), .tuple12(.address(depositor),
                                                       .address(recipient),
                                                       .address(inputToken),
                                                       .address(outputToken),
                                                       .uint256(inputAmount),
                                                       .uint256(outputAmount),
                                                       .uint256(destinationChainId),
                                                       .address(exclusiveRelayer),
                                                       .uint32(quoteTimestamp),
                                                       .uint32(fillDeadline),
                                                       .uint32(exclusivityDeadline),
                                                       .bytes(message)), .bytes(uniqueIdentifier), .bool(useNativeToken), .bool(cappedMax)):
            return try (spokePool, DepositV3Params(depositor: depositor, recipient: recipient, inputToken: inputToken, outputToken: outputToken, inputAmount: inputAmount, outputAmount: outputAmount, destinationChainId: destinationChainId, exclusiveRelayer: exclusiveRelayer, quoteTimestamp: quoteTimestamp, fillDeadline: fillDeadline, exclusivityDeadline: exclusivityDeadline, message: message), uniqueIdentifier, useNativeToken, cappedMax)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, depositV3Fn.inputTuple)
        }
    }
}
