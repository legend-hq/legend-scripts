@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum AcrossActions {
    public struct DepositV3Params: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .address, .address, .uint256, .uint256, .uint256, .uint256, .address, .uint32, .uint32, .uint32, .bytes])

        public let depositor: EthAddress
        public let recipient: EthAddress
        public let inputToken: EthAddress
        public let outputToken: EthAddress
        public let inputAmount: BigUInt
        public let outputAmount: BigUInt
        public let maxFee: BigUInt
        public let destinationChainId: BigUInt
        public let exclusiveRelayer: EthAddress
        public let quoteTimestamp: UInt
        public let fillDeadline: UInt
        public let exclusivityDeadline: UInt
        public let message: Hex

        public init(depositor: EthAddress, recipient: EthAddress, inputToken: EthAddress, outputToken: EthAddress, inputAmount: BigUInt, outputAmount: BigUInt, maxFee: BigUInt, destinationChainId: BigUInt, exclusiveRelayer: EthAddress, quoteTimestamp: UInt, fillDeadline: UInt, exclusivityDeadline: UInt, message: Hex) {
            self.depositor = depositor
            self.recipient = recipient
            self.inputToken = inputToken
            self.outputToken = outputToken
            self.inputAmount = inputAmount
            self.outputAmount = outputAmount
            self.maxFee = maxFee
            self.destinationChainId = destinationChainId
            self.exclusiveRelayer = exclusiveRelayer
            self.quoteTimestamp = quoteTimestamp
            self.fillDeadline = fillDeadline
            self.exclusivityDeadline = exclusivityDeadline
            self.message = message
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple13(.address(depositor),
                     .address(recipient),
                     .address(inputToken),
                     .address(outputToken),
                     .uint256(inputAmount),
                     .uint256(outputAmount),
                     .uint256(maxFee),
                     .uint256(destinationChainId),
                     .address(exclusiveRelayer),
                     .uint32(quoteTimestamp),
                     .uint32(fillDeadline),
                     .uint32(exclusivityDeadline),
                     .bytes(message))
        }

        public static func decode(hex: Hex) throws -> DepositV3Params {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> DepositV3Params {
            switch value {
            case let .tuple13(.address(depositor),
                              .address(recipient),
                              .address(inputToken),
                              .address(outputToken),
                              .uint256(inputAmount),
                              .uint256(outputAmount),
                              .uint256(maxFee),
                              .uint256(destinationChainId),
                              .address(exclusiveRelayer),
                              .uint32(quoteTimestamp),
                              .uint32(fillDeadline),
                              .uint32(exclusivityDeadline),
                              .bytes(message)):
                return DepositV3Params(depositor: depositor, recipient: recipient, inputToken: inputToken, outputToken: outputToken, inputAmount: inputAmount, outputAmount: outputAmount, maxFee: maxFee, destinationChainId: destinationChainId, exclusiveRelayer: exclusiveRelayer, quoteTimestamp: quoteTimestamp, fillDeadline: fillDeadline, exclusivityDeadline: exclusivityDeadline, message: message)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public static let creationCode: Hex = ""
    public static let runtimeCode: Hex = ""

    public static let BridgeFeeTooHighError = ABI.Function(
        name: "BridgeFeeTooHigh",
        inputs: [.uint256, .uint256]
    )

    public enum RevertReason: Equatable, Error {
        case bridgeFeeTooHigh(BigUInt, BigUInt)
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (BridgeFeeTooHighError, let .tuple2(.uint256(bridgeFee), .uint256(maxBridgeFee))):
            return .bridgeFeeTooHigh(bridgeFee, maxBridgeFee)
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [BridgeFeeTooHighError]
    public static let functions: [ABI.Function] = [depositV3Fn]
    public static let depositV3Fn = ABI.Function(
        name: "depositV3",
        inputs: [.address, .tuple([.address, .address, .address, .address, .uint256, .uint256, .uint256, .uint256, .address, .uint32, .uint32, .uint32, .bytes]), .bytes, .bool],
        outputs: []
    )

    public static func depositV3(spokePool: EthAddress, params: DepositV3Params, uniqueIdentifier: Hex, useNativeToken: Bool, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try depositV3Fn.encoded(with: [.address(spokePool), params.asValue, .bytes(uniqueIdentifier), .bool(useNativeToken)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try depositV3Fn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, depositV3Fn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func depositV3Decode(input: Hex) throws -> (EthAddress, DepositV3Params, Hex, Bool) {
        let decodedInput = try depositV3Fn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple4(.address(spokePool), .tuple13(.address(depositor),
                                                       .address(recipient),
                                                       .address(inputToken),
                                                       .address(outputToken),
                                                       .uint256(inputAmount),
                                                       .uint256(outputAmount),
                                                       .uint256(maxFee),
                                                       .uint256(destinationChainId),
                                                       .address(exclusiveRelayer),
                                                       .uint32(quoteTimestamp),
                                                       .uint32(fillDeadline),
                                                       .uint32(exclusivityDeadline),
                                                       .bytes(message)), .bytes(uniqueIdentifier), .bool(useNativeToken)):
            return try (spokePool, DepositV3Params(depositor: depositor, recipient: recipient, inputToken: inputToken, outputToken: outputToken, inputAmount: inputAmount, outputAmount: outputAmount, maxFee: maxFee, destinationChainId: destinationChainId, exclusiveRelayer: exclusiveRelayer, quoteTimestamp: quoteTimestamp, fillDeadline: fillDeadline, exclusivityDeadline: exclusivityDeadline, message: message), uniqueIdentifier, useNativeToken)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, depositV3Fn.inputTuple)
        }
    }
}
