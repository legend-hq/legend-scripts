@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum AcrossActions {
    public static let creationCode: Hex = "0x6080806040523460155761050e908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c63bf9ca86b14610027575f80fd5b6101c036600319011261025b576004356001600160a01b0381169081900361025b576024356001600160a01b038116929083900361025b576044356001600160a01b038116919082900361025b576064356001600160a01b038116929083900361025b576084356001600160a01b038116959086900361025b57610104356001600160a01b038116939060a4359085900361025b576101243563ffffffff811680910361025b576101443563ffffffff811680910361025b57610164359063ffffffff821680920361025b57610184359267ffffffffffffffff841161025b573660238501121561025b5783600401359567ffffffffffffffff871161025b57366024888701011161025b576101a43590811515820361025b57808c5f8f93602082910163095ea7b360e01b81528560248601528b6044860152604485526101706064866102e5565b84519082855af161017f61031b565b816102b6575b50806102ac575b15610266575b5050505f1461025f5784985b8b3b1561025b5786956040519d8e9c8d9b8c9b633dc9c91960e11b8d5260048d015260248c015260448b015260648a0152608489015260c43560a489015260e43560c489015260e488015261010487015261012486015261014485015261016484016101809052816101848501526024016101a48401378082016101a4015f9052601f1990601f01168101036101a401915a945f95f1801561025057610242575080f35b61024e91505f906102e5565b005b6040513d5f823e3d90fd5b5f80fd5b5f9861019e565b6102a49261029e916040519163095ea7b360e01b602084015260248301525f6044830152604482526102996064836102e5565b610372565b8c610372565b8b5f8c610192565b50803b151561018c565b80518015925082156102cb575b50505f610185565b6102de925060208091830101910161035a565b5f806102c3565b90601f8019910116810190811067ffffffffffffffff82111761030757604052565b634e487b7160e01b5f52604160045260245ffd5b3d15610355573d9067ffffffffffffffff8211610307576040519161034a601f8201601f1916602001846102e5565b82523d5f602084013e565b606090565b9081602091031261025b5751801515810361025b5790565b906103d29160018060a01b03165f80604051936103906040866102e5565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af16103cc61031b565b9161045a565b8051908115918215610440575b5050156103e857565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b610453925060208091830101910161035a565b5f806103df565b919290156104bc575081511561046e575090565b3b156104775790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156104cf5750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fd"
    public static let runtimeCode: Hex = "0x6080806040526004361015610012575f80fd5b5f905f3560e01c63bf9ca86b14610027575f80fd5b6101c036600319011261025b576004356001600160a01b0381169081900361025b576024356001600160a01b038116929083900361025b576044356001600160a01b038116919082900361025b576064356001600160a01b038116929083900361025b576084356001600160a01b038116959086900361025b57610104356001600160a01b038116939060a4359085900361025b576101243563ffffffff811680910361025b576101443563ffffffff811680910361025b57610164359063ffffffff821680920361025b57610184359267ffffffffffffffff841161025b573660238501121561025b5783600401359567ffffffffffffffff871161025b57366024888701011161025b576101a43590811515820361025b57808c5f8f93602082910163095ea7b360e01b81528560248601528b6044860152604485526101706064866102e5565b84519082855af161017f61031b565b816102b6575b50806102ac575b15610266575b5050505f1461025f5784985b8b3b1561025b5786956040519d8e9c8d9b8c9b633dc9c91960e11b8d5260048d015260248c015260448b015260648a0152608489015260c43560a489015260e43560c489015260e488015261010487015261012486015261014485015261016484016101809052816101848501526024016101a48401378082016101a4015f9052601f1990601f01168101036101a401915a945f95f1801561025057610242575080f35b61024e91505f906102e5565b005b6040513d5f823e3d90fd5b5f80fd5b5f9861019e565b6102a49261029e916040519163095ea7b360e01b602084015260248301525f6044830152604482526102996064836102e5565b610372565b8c610372565b8b5f8c610192565b50803b151561018c565b80518015925082156102cb575b50505f610185565b6102de925060208091830101910161035a565b5f806102c3565b90601f8019910116810190811067ffffffffffffffff82111761030757604052565b634e487b7160e01b5f52604160045260245ffd5b3d15610355573d9067ffffffffffffffff8211610307576040519161034a601f8201601f1916602001846102e5565b82523d5f602084013e565b606090565b9081602091031261025b5751801515810361025b5790565b906103d29160018060a01b03165f80604051936103906040866102e5565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af16103cc61031b565b9161045a565b8051908115918215610440575b5050156103e857565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b610453925060208091830101910161035a565b5f806103df565b919290156104bc575081511561046e575090565b3b156104775790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156104cf5750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fd"


    public enum RevertReason : Equatable, Error {
        case unknownRevert(String, String)
    }
    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
            }
    }
    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [depositV3Fn]
    public static let depositV3Fn = ABI.Function(
            name: "depositV3",
            inputs: [.address, .address, .address, .address, .address, .uint256, .uint256, .uint256, .address, .uint32, .uint32, .uint32, .bytes, .bool],
            outputs: []
    )

    public static func depositV3(spokePool: EthAddress, depositor: EthAddress, recipient: EthAddress, inputToken: EthAddress, outputToken: EthAddress, inputAmount: BigUInt, outputAmount: BigUInt, destinationChainId: BigUInt, exclusiveRelayer: EthAddress, quoteTimestamp: UInt, fillDeadline: UInt, exclusivityDeadline: UInt, message: Hex, useNativeToken: Bool, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<(), RevertReason> {
            do {
                let query = try depositV3Fn.encoded(with: [.address(spokePool), .address(depositor), .address(recipient), .address(inputToken), .address(outputToken), .uint256(inputAmount), .uint256(outputAmount), .uint256(destinationChainId), .address(exclusiveRelayer), .uint32(quoteTimestamp), .uint32(fillDeadline), .uint32(exclusivityDeadline), .bytes(message), .bool(useNativeToken)])
                let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
                let decoded = try depositV3Fn.decode(output: result)

                switch decoded {
                case  .tuple0:
                    return .success(())
                default:
                    throw ABI.DecodeError.mismatchedType(decoded.schema, depositV3Fn.outputTuple)
                }
            } catch let EVM.QueryError.error(e, v) {
                return .failure(rewrapError(e, value: v))
            }
    }


    public static func depositV3Decode(input: Hex) throws -> (EthAddress, EthAddress, EthAddress, EthAddress, EthAddress, BigUInt, BigUInt, BigUInt, EthAddress, UInt, UInt, UInt, Hex, Bool) {
        let decodedInput = try depositV3Fn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple14(.address(spokePool), .address(depositor), .address(recipient), .address(inputToken), .address(outputToken), .uint256(inputAmount), .uint256(outputAmount), .uint256(destinationChainId), .address(exclusiveRelayer), .uint32(quoteTimestamp), .uint32(fillDeadline), .uint32(exclusivityDeadline), .bytes(message), .bool(useNativeToken)):
            return  (spokePool, depositor, recipient, inputToken, outputToken, inputAmount, outputAmount, destinationChainId, exclusiveRelayer, quoteTimestamp, fillDeadline, exclusivityDeadline, message, useNativeToken)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, depositV3Fn.inputTuple)
        }
    }

    }