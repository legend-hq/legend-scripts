@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum AcrossActions {
    public static let creationCode: Hex = "0x608080604052346015576106bd908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c63bf9ca86b14610027575f80fd5b6101c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103105760043573ffffffffffffffffffffffffffffffffffffffff8116809103610310576024359173ffffffffffffffffffffffffffffffffffffffff8316809303610310576044359073ffffffffffffffffffffffffffffffffffffffff8216809203610310576064359173ffffffffffffffffffffffffffffffffffffffff8316809303610310576084359473ffffffffffffffffffffffffffffffffffffffff86168096036103105760a43592610104359373ffffffffffffffffffffffffffffffffffffffff8516809503610310576101243563ffffffff8116809103610310576101443563ffffffff811680910361031057610164359063ffffffff821680920361031057610184359267ffffffffffffffff841161031057366023850112156103105783600401359567ffffffffffffffff8711610310573660248887010111610310576101a43590811515820361031057808c5f8f9360208291017f095ea7b30000000000000000000000000000000000000000000000000000000081528560248601528b6044860152604485526101ef6064866103b3565b84519082855af16101fe610421565b81610384575b508061037a575b1561031b575b5050505f146103145784985b8b3b156103105786956040519d8e9c8d9b8c9b7f7b939232000000000000000000000000000000000000000000000000000000008d5260048d015260248c015260448b015260648a0152608489015260c43560a489015260e43560c489015260e488015261010487015261012486015261014485015261016484016101809052816101848501526024016101a48401378082016101a4015f9052601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101036101a401915a945f95f18015610305576102f7575080f35b61030391505f906103b3565b005b6040513d5f823e3d90fd5b5f80fd5b5f9861021d565b6103729261036c91604051917f095ea7b300000000000000000000000000000000000000000000000000000000602084015260248301525f6044830152604482526103676064836103b3565b610496565b8c610496565b8b5f8c610211565b50803b151561020b565b8051801592508215610399575b50505f610204565b6103ac925060208091830101910161047e565b5f80610391565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176103f457604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3d15610479573d9067ffffffffffffffff82116103f4576040519161046e601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016602001846103b3565b82523d5f602084013e565b606090565b90816020910312610310575180151581036103105790565b9073ffffffffffffffffffffffffffffffffffffffff61050492165f80604051936104c26040866103b3565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af16104fe610421565b916105b8565b805190811591821561059e575b50501561051a57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6105b1925060208091830101910161047e565b5f80610511565b9192901561063357508151156105cc575090565b3b156105d55790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156106465750805190602001fd5b60446020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040519485937f08c379a00000000000000000000000000000000000000000000000000000000085528160048601528051918291826024880152018686015e5f85828601015201168101030190fd"
    public static let runtimeCode: Hex = "0x6080806040526004361015610012575f80fd5b5f905f3560e01c63bf9ca86b14610027575f80fd5b6101c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103105760043573ffffffffffffffffffffffffffffffffffffffff8116809103610310576024359173ffffffffffffffffffffffffffffffffffffffff8316809303610310576044359073ffffffffffffffffffffffffffffffffffffffff8216809203610310576064359173ffffffffffffffffffffffffffffffffffffffff8316809303610310576084359473ffffffffffffffffffffffffffffffffffffffff86168096036103105760a43592610104359373ffffffffffffffffffffffffffffffffffffffff8516809503610310576101243563ffffffff8116809103610310576101443563ffffffff811680910361031057610164359063ffffffff821680920361031057610184359267ffffffffffffffff841161031057366023850112156103105783600401359567ffffffffffffffff8711610310573660248887010111610310576101a43590811515820361031057808c5f8f9360208291017f095ea7b30000000000000000000000000000000000000000000000000000000081528560248601528b6044860152604485526101ef6064866103b3565b84519082855af16101fe610421565b81610384575b508061037a575b1561031b575b5050505f146103145784985b8b3b156103105786956040519d8e9c8d9b8c9b7f7b939232000000000000000000000000000000000000000000000000000000008d5260048d015260248c015260448b015260648a0152608489015260c43560a489015260e43560c489015260e488015261010487015261012486015261014485015261016484016101809052816101848501526024016101a48401378082016101a4015f9052601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101036101a401915a945f95f18015610305576102f7575080f35b61030391505f906103b3565b005b6040513d5f823e3d90fd5b5f80fd5b5f9861021d565b6103729261036c91604051917f095ea7b300000000000000000000000000000000000000000000000000000000602084015260248301525f6044830152604482526103676064836103b3565b610496565b8c610496565b8b5f8c610211565b50803b151561020b565b8051801592508215610399575b50505f610204565b6103ac925060208091830101910161047e565b5f80610391565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176103f457604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3d15610479573d9067ffffffffffffffff82116103f4576040519161046e601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016602001846103b3565b82523d5f602084013e565b606090565b90816020910312610310575180151581036103105790565b9073ffffffffffffffffffffffffffffffffffffffff61050492165f80604051936104c26040866103b3565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af16104fe610421565b916105b8565b805190811591821561059e575b50501561051a57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6105b1925060208091830101910161047e565b5f80610511565b9192901561063357508151156105cc575090565b3b156105d55790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156106465750805190602001fd5b60446020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040519485937f08c379a00000000000000000000000000000000000000000000000000000000085528160048601528051918291826024880152018686015e5f85828601015201168101030190fd"

    public enum RevertReason: Equatable, Error {
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [depositV3Fn]
    public static let depositV3Fn = ABI.Function(
        name: "depositV3",
        inputs: [.address, .address, .address, .address, .address, .uint256, .uint256, .uint256, .address, .uint32, .uint32, .uint32, .bytes, .bool],
        outputs: []
    )

    public static func depositV3(spokePool: EthAddress, depositor: EthAddress, recipient: EthAddress, inputToken: EthAddress, outputToken: EthAddress, inputAmount: BigUInt, outputAmount: BigUInt, destinationChainId: BigUInt, exclusiveRelayer: EthAddress, quoteTimestamp: UInt, fillDeadline: UInt, exclusivityDeadline: UInt, message: Hex, useNativeToken: Bool, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try depositV3Fn.encoded(with: [.address(spokePool), .address(depositor), .address(recipient), .address(inputToken), .address(outputToken), .uint256(inputAmount), .uint256(outputAmount), .uint256(destinationChainId), .address(exclusiveRelayer), .uint32(quoteTimestamp), .uint32(fillDeadline), .uint32(exclusivityDeadline), .bytes(message), .bool(useNativeToken)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try depositV3Fn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, depositV3Fn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func depositV3Decode(input: Hex) throws -> (EthAddress, EthAddress, EthAddress, EthAddress, EthAddress, BigUInt, BigUInt, BigUInt, EthAddress, UInt, UInt, UInt, Hex, Bool) {
        let decodedInput = try depositV3Fn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple14(.address(spokePool), .address(depositor), .address(recipient), .address(inputToken), .address(outputToken), .uint256(inputAmount), .uint256(outputAmount), .uint256(destinationChainId), .address(exclusiveRelayer), .uint32(quoteTimestamp), .uint32(fillDeadline), .uint32(exclusivityDeadline), .bytes(message), .bool(useNativeToken)):
            return (spokePool, depositor, recipient, inputToken, outputToken, inputAmount, outputAmount, destinationChainId, exclusiveRelayer, quoteTimestamp, fillDeadline, exclusivityDeadline, message, useNativeToken)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, depositV3Fn.inputTuple)
        }
    }
}
