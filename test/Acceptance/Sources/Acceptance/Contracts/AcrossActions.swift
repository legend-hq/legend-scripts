@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum AcrossActions {
    public struct DepositV3Params: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .address, .address, .uint256, .uint256, .uint256, .address, .uint32, .uint32, .uint32, .bytes])

        public let depositor: EthAddress
        public let recipient: EthAddress
        public let inputToken: EthAddress
        public let outputToken: EthAddress
        public let inputAmount: BigUInt
        public let outputAmount: BigUInt
        public let destinationChainId: BigUInt
        public let exclusiveRelayer: EthAddress
        public let quoteTimestamp: UInt
        public let fillDeadline: UInt
        public let exclusivityDeadline: UInt
        public let message: Hex

        public init(depositor: EthAddress, recipient: EthAddress, inputToken: EthAddress, outputToken: EthAddress, inputAmount: BigUInt, outputAmount: BigUInt, destinationChainId: BigUInt, exclusiveRelayer: EthAddress, quoteTimestamp: UInt, fillDeadline: UInt, exclusivityDeadline: UInt, message: Hex) {
            self.depositor = depositor
            self.recipient = recipient
            self.inputToken = inputToken
            self.outputToken = outputToken
            self.inputAmount = inputAmount
            self.outputAmount = outputAmount
            self.destinationChainId = destinationChainId
            self.exclusiveRelayer = exclusiveRelayer
            self.quoteTimestamp = quoteTimestamp
            self.fillDeadline = fillDeadline
            self.exclusivityDeadline = exclusivityDeadline
            self.message = message
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple12(.address(depositor),
                     .address(recipient),
                     .address(inputToken),
                     .address(outputToken),
                     .uint256(inputAmount),
                     .uint256(outputAmount),
                     .uint256(destinationChainId),
                     .address(exclusiveRelayer),
                     .uint32(quoteTimestamp),
                     .uint32(fillDeadline),
                     .uint32(exclusivityDeadline),
                     .bytes(message))
        }

        public static func decode(hex: Hex) throws -> DepositV3Params {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> DepositV3Params {
            switch value {
            case let .tuple12(.address(depositor),
                              .address(recipient),
                              .address(inputToken),
                              .address(outputToken),
                              .uint256(inputAmount),
                              .uint256(outputAmount),
                              .uint256(destinationChainId),
                              .address(exclusiveRelayer),
                              .uint32(quoteTimestamp),
                              .uint32(fillDeadline),
                              .uint32(exclusivityDeadline),
                              .bytes(message)):
                return DepositV3Params(depositor: depositor, recipient: recipient, inputToken: inputToken, outputToken: outputToken, inputAmount: inputAmount, outputAmount: outputAmount, destinationChainId: destinationChainId, exclusiveRelayer: exclusiveRelayer, quoteTimestamp: quoteTimestamp, fillDeadline: fillDeadline, exclusivityDeadline: exclusivityDeadline, message: message)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public static let creationCode: Hex = ""
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610417565b61001d5f3561002c565b638c6799930361000e576103ea565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61006290610040565b90565b61006e81610059565b0361007557565b5f80fd5b9050359061008682610065565b565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906100cd9061008c565b810190811067ffffffffffffffff8211176100e757604052565b610096565b906100ff6100f8610032565b92836100c3565b565b5f80fd5b90565b61011181610105565b0361011857565b5f80fd5b9050359061012982610108565b565b63ffffffff1690565b61013d8161012b565b0361014457565b5f80fd5b9050359061015582610134565b565b5f80fd5b5f80fd5b67ffffffffffffffff811161017d5761017960209161008c565b0190565b610096565b90825f939282370152565b909291926101a261019d8261015f565b6100ec565b938185526020850190828401116101be576101bc92610182565b565b61015b565b9080601f830112156101e1578160206101de9335910161018d565b90565b610157565b919091610180818403126102f6576101ff6101806100ec565b9261020c815f8401610079565b5f85015261021d8160208401610079565b602085015261022f8160408401610079565b60408501526102418160608401610079565b6060850152610253816080840161011c565b60808501526102658160a0840161011c565b60a08501526102778160c0840161011c565b60c08501526102898160e08401610079565b60e085015261029c816101008401610148565b6101008501526102b0816101208401610148565b6101208501526102c4816101408401610148565b61014085015261016082013567ffffffffffffffff81116102f1576102e992016101c3565b610160830152565b610101565b610088565b5f80fd5b5f80fd5b909182601f8301121561033d5781359167ffffffffffffffff831161033857602001926001830284011161033357565b6102ff565b6102fb565b610157565b151590565b61035081610342565b0361035757565b5f80fd5b9050359061036882610347565b565b9190916080818403126103e057610383835f8301610079565b92602082013567ffffffffffffffff81116103db57816103a49184016101e6565b92604083013567ffffffffffffffff81116103d6576103c8836103d3928601610303565b93909460600161035b565b90565b61003c565b61003c565b610038565b5f0190565b6104016103f836600461036a565b9392909261072c565b610409610032565b80610413816103e5565b0390f35b5f80fd5b6104259051610059565b90565b90565b61043f61043a61044492610040565b610428565b610040565b90565b6104509061042b565b90565b61045c90610447565b90565b6104699051610105565b90565b610476905161012b565b90565b61048290610059565b9052565b61048f90610105565b9052565b61049c9061012b565b9052565b5190565b60209181520190565b90825f9392825e0152565b6104d76104e06020936104e5936104ce816104a0565b938480936104a4565b958691016104ad565b61008c565b0190565b99979593919a98969492909a6101808b019b5f8c0161050791610479565b60208b0161051491610479565b60408a0161052191610479565b6060890161052e91610479565b6080880161053b91610486565b60a0870161054891610486565b60c0860161055591610486565b60e0850161056291610479565b610100840161057091610493565b610120830161057e91610493565b610140820161058c91610493565b80820390610160015261059e916104b8565b90565b67ffffffffffffffff81116105bf576105bb60209161008c565b0190565b610096565b906105d66105d1836105a1565b6100ec565b918252565b5f7f1dc0de0000000000000000000000000000000000000000000000000000000000910152565b61060c60036105c4565b90610619602083016105db565b565b610623610602565b90565b61062e61061b565b90565b905090565b61065b61065292602092610649816104a0565b94858093610631565b938491016104ad565b0190565b90918261066f8161067693610631565b8093610182565b0190565b9161068c610698959361069293610636565b90610636565b9161065f565b90565b6106ba6106c69395946106ac610032565b96879460208601948561067a565b908103825203836100c3565b565b90565b6106df6106da6106e4926106c8565b610428565b610105565b90565b906106f96106f48361015f565b6100ec565b918252565b606090565b3d5f1461071e576107133d6106e7565b903d5f602084013e5b565b6107266106fe565b9061071c565b93919290928360400161073e9061041b565b61074790610453565b85856080016107559061045f565b9061075f92610990565b7f7b93923200000000000000000000000000000000000000000000000000000000845f0161078c9061041b565b908560200161079a9061041b565b91866040016107a89061041b565b87806060016107b69061041b565b816080016107c39061045f565b8260a0016107d09061045f565b8360c0016107dd9061045f565b8460e0016107ea9061041b565b9185610100016107f99061046c565b9386610120016108089061046c565b9587610140016108179061046c565b97610160015198610826610032565b9c8d9c60208e019081526004019b61083d9c6104e9565b60208201810382520361085090826100c3565b91610859610626565b9190916108659361069b565b92905f14925f939284936108ac57608061087f910161045f565b915b91602082019151925af161089d610896610703565b9115610342565b6108a45750565b602081519101fd5b506108b6836106cb565b91610881565b6108c59061042b565b90565b6108d1906108bc565b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b60e01b90565b61091361090e6109189261012b565b6108f9565b6108d4565b90565b91602061093c92949361093560408201965f830190610479565b0190610486565b565b60ff1690565b61095861095361095d926106c8565b610428565b61093e565b90565b61096990610944565b9052565b91602061098e92949361098760408201965f830190610479565b0190610960565b565b90916109d16004916109c26109a863095ea7b36108ff565b91866109b2610032565b958694602086019081520161091b565b602082018103825203826100c3565b906109e66109e0828490610a7b565b15610342565b6109f0575b505050565b610a3d6004610a4294610a388491610a29610a0e63095ea7b36108ff565b915f90610a19610032565b968794602086019081520161096d565b602082018103825203836100c3565b610c33565b610c33565b5f80806109eb565b5f90565b90505190610a5b82610347565b565b90602082820312610a7657610a73915f01610a4e565b90565b610038565b905f8091610a87610a4a565b50610a91846108c8565b9082602082019151925af1610aa4610703565b81610acf575b509081610ab6575b5090565b610ac99150610ac4906108c8565b610c9f565b5f610ab2565b9050610ada816104a0565b610aec610ae65f6106cb565b91610105565b14908115610afc575b505f610aaa565b610b1791506020610b0c826104a0565b818301019101610a5d565b5f610af5565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b610b4e60206105c4565b90610b5b60208301610b1d565b565b610b65610b44565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610bcb602a604092610b68565b610bd481610b71565b0190565b610bed9060208101905f818303910152610bbe565b90565b15610bf757565b610bff610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610c2f60048201610bd8565b0390fd5b610c7c91610c43610c52926108c8565b90610c4c610b5d565b91610cbf565b610c5b816104a0565b610c6d610c675f6106cb565b91610105565b14908115610c7e575b50610bf0565b565b610c9991506020610c8e826104a0565b818301019101610a5d565b5f610c76565b610ca7610a4a565b503b610cbb610cb55f6106cb565b91610105565b1190565b90610cde9291610ccd6106fe565b5090610cd85f6106cb565b91610daf565b90565b610cea906108bc565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610d476026604092610b68565b610d5081610ced565b0190565b610d699060208101905f818303910152610d3a565b90565b15610d7357565b610d7b610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610dab60048201610d54565b0390fd5b915f8091610e059593610dc06106fe565b50610de7610dcd30610ce1565b31610de0610dda85610105565b91610105565b1015610d6c565b8591602082019151925af191610dfb610703565b9092909192610ea4565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610e3c601d602092610b68565b610e4581610e08565b0190565b610e5e9060208101905f818303910152610e2f565b90565b15610e6857565b610e70610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610ea060048201610e49565b0390fd5b919290610eaf6106fe565b505f14610ef35750610ec0826104a0565b610ed2610ecc5f6106cb565b91610105565b14610edc575b5090565b610ee8610eed91610c9f565b610e61565b5f610ed8565b82610f46565b5190565b610f1c610f25602093610f2a93610f1381610ef9565b93848093610b68565b958691016104ad565b61008c565b0190565b610f439160208201915f818403910152610efd565b90565b90610f50826104a0565b610f62610f5c5f6106cb565b91610105565b115f14610f725750805190602001fd5b610fad90610f7e610032565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610f2e565b0390fd"

    public enum RevertReason: Equatable, Error {
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [depositV3Fn]
    public static let depositV3Fn = ABI.Function(
        name: "depositV3",
        inputs: [.address, .tuple([.address, .address, .address, .address, .uint256, .uint256, .uint256, .address, .uint32, .uint32, .uint32, .bytes]), .bytes, .bool],
        outputs: []
    )

    public static func depositV3(spokePool: EthAddress, params: DepositV3Params, uniqueIdentifier: Hex, useNativeToken: Bool, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try depositV3Fn.encoded(with: [.address(spokePool), params.asValue, .bytes(uniqueIdentifier), .bool(useNativeToken)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try depositV3Fn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, depositV3Fn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func depositV3Decode(input: Hex) throws -> (EthAddress, DepositV3Params, Hex, Bool) {
        let decodedInput = try depositV3Fn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple4(.address(spokePool), .tuple12(.address(depositor),
                                                       .address(recipient),
                                                       .address(inputToken),
                                                       .address(outputToken),
                                                       .uint256(inputAmount),
                                                       .uint256(outputAmount),
                                                       .uint256(destinationChainId),
                                                       .address(exclusiveRelayer),
                                                       .uint32(quoteTimestamp),
                                                       .uint32(fillDeadline),
                                                       .uint32(exclusivityDeadline),
                                                       .bytes(message)), .bytes(uniqueIdentifier), .bool(useNativeToken)):
            return try (spokePool, DepositV3Params(depositor: depositor, recipient: recipient, inputToken: inputToken, outputToken: outputToken, inputAmount: inputAmount, outputAmount: outputAmount, destinationChainId: destinationChainId, exclusiveRelayer: exclusiveRelayer, quoteTimestamp: quoteTimestamp, fillDeadline: fillDeadline, exclusivityDeadline: exclusivityDeadline, message: message), uniqueIdentifier, useNativeToken)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, depositV3Fn.inputTuple)
        }
    }
}
