@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum CometSupplyMultipleAssetsAndBorrow {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b610e0d61002b8239610e0d90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610206565b61001d5f3561002c565b63ff2038850361000e576101cc565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61006690610044565b90565b6100728161005d565b0361007957565b5f80fd5b9050359061008a82610069565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100d25781359167ffffffffffffffff83116100cd5760200192602083028401116100c857565b610094565b610090565b61008c565b909182601f830112156101115781359167ffffffffffffffff831161010c57602001926020830284011161010757565b610094565b610090565b61008c565b90565b61012281610116565b0361012957565b5f80fd5b9050359061013a82610119565b565b909160a0828403126101c257610154835f840161007d565b92602083013567ffffffffffffffff81116101bd5781610175918501610098565b92909360408101359167ffffffffffffffff83116101b85761019c846101b59484016100d7565b9390946101ac816060860161007d565b9360800161012d565b90565b610040565b610040565b61003c565b5f0190565b34610201576101eb6101df36600461013c565b959490949391936103de565b6101f3610032565b806101fd816101c7565b0390f35b610038565b5f80fd5b5090565b5090565b90565b90565b61022c61022761023192610212565b610215565b610116565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b9190811015610271576020020190565b610234565b3561028081610119565b90565b9190811015610293576020020190565b610234565b356102a281610069565b90565b6102b96102b46102be92610044565b610215565b610044565b90565b6102ca906102a5565b90565b6102d6906102c1565b90565b6102e2906102a5565b90565b6102ee906102d9565b90565b6102fa906102a5565b90565b610306906102f1565b90565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061034e9061030d565b810190811067ffffffffffffffff82111761036857604052565b610317565b60e01b90565b5f91031261037d57565b61003c565b61038b9061005d565b9052565b61039890610116565b9052565b9160206103bd9294936103b660408201965f830190610382565b019061038f565b565b6103c7610032565b3d5f823e3d90fd5b60016103db9101610116565b90565b91969094959392936103f186899061020a565b61040d61040761040288889061020e565b610116565b91610116565b036106305761041b5f610218565b5b8061043961043361042e8a8d9061020a565b610116565b91610116565b10156105745761045361044e87878491610261565b610276565b61046561045f5f610218565b91610116565b11610479575b610474906103cf565b61041c565b6104b361049861049361048e8a8d8691610283565b610298565b6102cd565b856104ad6104a88a8a8791610261565b610276565b91610712565b6104c46104bf856102e5565b6102fd565b9063f2b9fdb86104de6104d98a8d8591610283565b610298565b6104f26104ed8a8a8691610261565b610276565b93803b1561056f576105175f809461052261050b610032565b9889968795869461036d565b84526004840161039c565b03925af191821561056a576104749261053e575b50905061046b565b61055d905f3d8111610563575b6105558183610344565b810190610373565b5f610536565b503d61054b565b6103bf565b610309565b5095945095509150508261059061058a5f610218565b91610116565b1161059b575b505050565b6105a76105ac916102e5565b6102fd565b9163f3fef3a3919092803b1561062b576105d95f80946105e46105cd610032565b9788968795869461036d565b84526004840161039c565b03925af18015610626576105fa575b8080610596565b610619905f3d811161061f575b6106118183610344565b810190610373565b5f6105f3565b503d610607565b6103bf565b610309565b5f7fb4fa3fb300000000000000000000000000000000000000000000000000000000815280610661600482016101c7565b0390fd5b61066e906102f1565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6106b36106ae6106b892610671565b61036d565b61067a565b90565b151590565b60ff1690565b6106da6106d56106df92610212565b610215565b6106c0565b90565b6106eb906106c6565b9052565b91602061071092949361070960408201965f830190610382565b01906106e2565b565b909161075360049161074461072a63095ea7b361069f565b9186610734610032565b958694602086019081520161039c565b60208201810382520382610344565b90610768610762828490610892565b156106bb565b610772575b505050565b6107bf60046107c4946107ba84916107ab61079063095ea7b361069f565b915f9061079b610032565b96879460208601908152016106ef565b60208201810382520383610344565b610a84565b610a84565b5f808061076d565b5f90565b906107e36107dc610032565b9283610344565b565b67ffffffffffffffff8111610803576107ff60209161030d565b0190565b610317565b9061081a610815836107e5565b6107d0565b918252565b606090565b3d5f1461083f576108343d610808565b903d5f602084013e5b565b61084761081f565b9061083d565b5190565b61085a816106bb565b0361086157565b5f80fd5b9050519061087282610851565b565b9060208282031261088d5761088a915f01610865565b90565b61003c565b905f809161089e6107cc565b506108a884610665565b9082602082019151925af16108bb610824565b816108e6575b5090816108cd575b5090565b6108e091506108db90610665565b610af0565b5f6108c9565b90506108f18161084d565b6109036108fd5f610218565b91610116565b14908115610913575b505f6108c1565b61092e915060206109238261084d565b818301019101610874565b5f61090c565b67ffffffffffffffff81116109525761094e60209161030d565b0190565b610317565b9061096961096483610934565b6107d0565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61099f6020610957565b906109ac6020830161096e565b565b6109b6610995565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610a1c602a6040926109b9565b610a25816109c2565b0190565b610a3e9060208101905f818303910152610a0f565b90565b15610a4857565b610a50610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a8060048201610a29565b0390fd5b610acd91610a94610aa392610665565b90610a9d6109ae565b91610b10565b610aac8161084d565b610abe610ab85f610218565b91610116565b14908115610acf575b50610a41565b565b610aea91506020610adf8261084d565b818301019101610874565b5f610ac7565b610af86107cc565b503b610b0c610b065f610218565b91610116565b1190565b90610b2f9291610b1e61081f565b5090610b295f610218565b91610c00565b90565b610b3b906102f1565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b9860266040926109b9565b610ba181610b3e565b0190565b610bba9060208101905f818303910152610b8b565b90565b15610bc457565b610bcc610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610bfc60048201610ba5565b0390fd5b915f8091610c569593610c1161081f565b50610c38610c1e30610b32565b31610c31610c2b85610116565b91610116565b1015610bbd565b8591602082019151925af191610c4c610824565b9092909192610cf5565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c8d601d6020926109b9565b610c9681610c59565b0190565b610caf9060208101905f818303910152610c80565b90565b15610cb957565b610cc1610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610cf160048201610c9a565b0390fd5b919290610d0061081f565b505f14610d445750610d118261084d565b610d23610d1d5f610218565b91610116565b14610d2d575b5090565b610d39610d3e91610af0565b610cb2565b5f610d29565b82610da2565b5190565b90825f9392825e0152565b610d78610d81602093610d8693610d6f81610d4a565b938480936109b9565b95869101610d4e565b61030d565b0190565b610d9f9160208201915f818403910152610d59565b90565b90610dac8261084d565b610dbe610db85f610218565b91610116565b115f14610dce5750805190602001fd5b610e0990610dda610032565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d8a565b0390fd"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610206565b61001d5f3561002c565b63ff2038850361000e576101cc565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61006690610044565b90565b6100728161005d565b0361007957565b5f80fd5b9050359061008a82610069565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100d25781359167ffffffffffffffff83116100cd5760200192602083028401116100c857565b610094565b610090565b61008c565b909182601f830112156101115781359167ffffffffffffffff831161010c57602001926020830284011161010757565b610094565b610090565b61008c565b90565b61012281610116565b0361012957565b5f80fd5b9050359061013a82610119565b565b909160a0828403126101c257610154835f840161007d565b92602083013567ffffffffffffffff81116101bd5781610175918501610098565b92909360408101359167ffffffffffffffff83116101b85761019c846101b59484016100d7565b9390946101ac816060860161007d565b9360800161012d565b90565b610040565b610040565b61003c565b5f0190565b34610201576101eb6101df36600461013c565b959490949391936103de565b6101f3610032565b806101fd816101c7565b0390f35b610038565b5f80fd5b5090565b5090565b90565b90565b61022c61022761023192610212565b610215565b610116565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b9190811015610271576020020190565b610234565b3561028081610119565b90565b9190811015610293576020020190565b610234565b356102a281610069565b90565b6102b96102b46102be92610044565b610215565b610044565b90565b6102ca906102a5565b90565b6102d6906102c1565b90565b6102e2906102a5565b90565b6102ee906102d9565b90565b6102fa906102a5565b90565b610306906102f1565b90565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061034e9061030d565b810190811067ffffffffffffffff82111761036857604052565b610317565b60e01b90565b5f91031261037d57565b61003c565b61038b9061005d565b9052565b61039890610116565b9052565b9160206103bd9294936103b660408201965f830190610382565b019061038f565b565b6103c7610032565b3d5f823e3d90fd5b60016103db9101610116565b90565b91969094959392936103f186899061020a565b61040d61040761040288889061020e565b610116565b91610116565b036106305761041b5f610218565b5b8061043961043361042e8a8d9061020a565b610116565b91610116565b10156105745761045361044e87878491610261565b610276565b61046561045f5f610218565b91610116565b11610479575b610474906103cf565b61041c565b6104b361049861049361048e8a8d8691610283565b610298565b6102cd565b856104ad6104a88a8a8791610261565b610276565b91610712565b6104c46104bf856102e5565b6102fd565b9063f2b9fdb86104de6104d98a8d8591610283565b610298565b6104f26104ed8a8a8691610261565b610276565b93803b1561056f576105175f809461052261050b610032565b9889968795869461036d565b84526004840161039c565b03925af191821561056a576104749261053e575b50905061046b565b61055d905f3d8111610563575b6105558183610344565b810190610373565b5f610536565b503d61054b565b6103bf565b610309565b5095945095509150508261059061058a5f610218565b91610116565b1161059b575b505050565b6105a76105ac916102e5565b6102fd565b9163f3fef3a3919092803b1561062b576105d95f80946105e46105cd610032565b9788968795869461036d565b84526004840161039c565b03925af18015610626576105fa575b8080610596565b610619905f3d811161061f575b6106118183610344565b810190610373565b5f6105f3565b503d610607565b6103bf565b610309565b5f7fb4fa3fb300000000000000000000000000000000000000000000000000000000815280610661600482016101c7565b0390fd5b61066e906102f1565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6106b36106ae6106b892610671565b61036d565b61067a565b90565b151590565b60ff1690565b6106da6106d56106df92610212565b610215565b6106c0565b90565b6106eb906106c6565b9052565b91602061071092949361070960408201965f830190610382565b01906106e2565b565b909161075360049161074461072a63095ea7b361069f565b9186610734610032565b958694602086019081520161039c565b60208201810382520382610344565b90610768610762828490610892565b156106bb565b610772575b505050565b6107bf60046107c4946107ba84916107ab61079063095ea7b361069f565b915f9061079b610032565b96879460208601908152016106ef565b60208201810382520383610344565b610a84565b610a84565b5f808061076d565b5f90565b906107e36107dc610032565b9283610344565b565b67ffffffffffffffff8111610803576107ff60209161030d565b0190565b610317565b9061081a610815836107e5565b6107d0565b918252565b606090565b3d5f1461083f576108343d610808565b903d5f602084013e5b565b61084761081f565b9061083d565b5190565b61085a816106bb565b0361086157565b5f80fd5b9050519061087282610851565b565b9060208282031261088d5761088a915f01610865565b90565b61003c565b905f809161089e6107cc565b506108a884610665565b9082602082019151925af16108bb610824565b816108e6575b5090816108cd575b5090565b6108e091506108db90610665565b610af0565b5f6108c9565b90506108f18161084d565b6109036108fd5f610218565b91610116565b14908115610913575b505f6108c1565b61092e915060206109238261084d565b818301019101610874565b5f61090c565b67ffffffffffffffff81116109525761094e60209161030d565b0190565b610317565b9061096961096483610934565b6107d0565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61099f6020610957565b906109ac6020830161096e565b565b6109b6610995565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610a1c602a6040926109b9565b610a25816109c2565b0190565b610a3e9060208101905f818303910152610a0f565b90565b15610a4857565b610a50610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a8060048201610a29565b0390fd5b610acd91610a94610aa392610665565b90610a9d6109ae565b91610b10565b610aac8161084d565b610abe610ab85f610218565b91610116565b14908115610acf575b50610a41565b565b610aea91506020610adf8261084d565b818301019101610874565b5f610ac7565b610af86107cc565b503b610b0c610b065f610218565b91610116565b1190565b90610b2f9291610b1e61081f565b5090610b295f610218565b91610c00565b90565b610b3b906102f1565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b9860266040926109b9565b610ba181610b3e565b0190565b610bba9060208101905f818303910152610b8b565b90565b15610bc457565b610bcc610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610bfc60048201610ba5565b0390fd5b915f8091610c569593610c1161081f565b50610c38610c1e30610b32565b31610c31610c2b85610116565b91610116565b1015610bbd565b8591602082019151925af191610c4c610824565b9092909192610cf5565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c8d601d6020926109b9565b610c9681610c59565b0190565b610caf9060208101905f818303910152610c80565b90565b15610cb957565b610cc1610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610cf160048201610c9a565b0390fd5b919290610d0061081f565b505f14610d445750610d118261084d565b610d23610d1d5f610218565b91610116565b14610d2d575b5090565b610d39610d3e91610af0565b610cb2565b5f610d29565b82610da2565b5190565b90825f9392825e0152565b610d78610d81602093610d8693610d6f81610d4a565b938480936109b9565b95869101610d4e565b61030d565b0190565b610d9f9160208201915f818403910152610d59565b90565b90610dac8261084d565b610dbe610db85f610218565b91610116565b115f14610dce5750805190602001fd5b610e0990610dda610032565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d8a565b0390fd"

    public static let InvalidInputError = ABI.Function(
        name: "InvalidInput",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case invalidInput
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (InvalidInputError, _):
            return .invalidInput
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [InvalidInputError]
    public static let functions: [ABI.Function] = [runFn]
    public static let runFn = ABI.Function(
        name: "run",
        inputs: [.address, .array(.address), .array(.uint256), .address, .uint256],
        outputs: []
    )

    public static func run(comet: EthAddress, assets: [EthAddress], amounts: [BigUInt], baseAsset: EthAddress, borrow: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try runFn.encoded(with: [.address(comet), .array(.address, assets.map {
                .address($0)
            }), .array(.uint256, amounts.map {
                .uint256($0)
            }), .address(baseAsset), .uint256(borrow)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try runFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, runFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func runDecode(input: Hex) throws -> (EthAddress, [EthAddress], [BigUInt], EthAddress, BigUInt) {
        let decodedInput = try runFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple5(.address(comet), .array(.address, assets), .array(.uint256, amounts), .address(baseAsset), .uint256(borrow)):
            return (comet, assets.map { $0.asEthAddress! }, amounts.map { $0.asBigUInt! }, baseAsset, borrow)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, runFn.inputTuple)
        }
    }
}
