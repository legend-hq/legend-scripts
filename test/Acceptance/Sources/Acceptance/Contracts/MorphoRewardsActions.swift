@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum MorphoRewardsActions {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b61093361002b823961093390f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61038f565b61001d5f3561003c565b806373bf9a7f146100375763a21d1ade0361000e57610355565b6101f8565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561009a5781359167ffffffffffffffff831161009557602001926020830284011161009057565b61005c565b610058565b610054565b909182601f830112156100d95781359167ffffffffffffffff83116100d45760200192602083028401116100cf57565b61005c565b610058565b610054565b909182601f830112156101185781359167ffffffffffffffff831161011357602001926020830284011161010e57565b61005c565b610058565b610054565b9060a0828203126101ee575f82013567ffffffffffffffff81116101e95781610147918401610060565b929093602082013567ffffffffffffffff81116101e4578361016a918401610060565b929093604082013567ffffffffffffffff81116101df578161018d918401610060565b929093606082013567ffffffffffffffff81116101da57836101b091840161009f565b929093608082013567ffffffffffffffff81116101d5576101d192016100de565b9091565b610050565b610050565b610050565b610050565b610050565b61004c565b5f0190565b346102335761021d61020b36600461011d565b98979097969196959295949394610660565b610225610042565b8061022f816101f3565b0390f35b610048565b73ffffffffffffffffffffffffffffffffffffffff1690565b61025a90610238565b90565b61026681610251565b0361026d57565b5f80fd5b9050359061027e8261025d565b565b90565b61028c81610280565b0361029357565b5f80fd5b905035906102a482610283565b565b909182601f830112156102e05781359167ffffffffffffffff83116102db5760200192602083028401116102d657565b61005c565b610058565b610054565b91909160a081840312610350576102fe835f8301610271565b9261030c8160208401610271565b9261031a8260408501610271565b926103288360608301610297565b92608082013567ffffffffffffffff811161034b5761034792016102a6565b9091565b610050565b61004c565b3461038a576103746103683660046102e5565b949390939291926108a5565b61037c610042565b80610386816101f3565b0390f35b610048565b5f80fd5b5090565b5090565b5090565b90565b90565b6103b96103b46103be9261039f565b6103a2565b610280565b90565b60016103cd9101610280565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b919081101561040d576020020190565b6103d0565b3561041c8161025d565b90565b61043361042e61043892610238565b6103a2565b610238565b90565b6104449061041f565b90565b6104509061043b565b90565b61045c9061041f565b90565b61046890610453565b90565b919081101561047b576020020190565b6103d0565b3561048a81610283565b90565b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156104db570180359067ffffffffffffffff82116104d6576020019160208202360383136104d157565b610495565b610491565b61048d565b908210156104fb5760206104f79202810190610499565b9091565b6103d0565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061054190610500565b810190811067ffffffffffffffff82111761055b57604052565b61050a565b60e01b90565b9050519061057382610283565b565b9060208282031261058e5761058b915f01610566565b90565b61004c565b61059c90610251565b9052565b6105a990610280565b9052565b60209181520190565b5f80fd5b9037565b9091826105ca916105ad565b917f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610607578291602061060392029384916105ba565b0190565b6105b6565b90939161064d95936106366106409261062c60808601985f870190610593565b6020850190610593565b60408301906105a0565b60608185039101526105be565b90565b610658610042565b3d5f823e3d90fd5b99989394919596929799610675818390610393565b61069161068b6106868a8d90610393565b610280565b91610280565b14158015610876575b8015610847575b8015610817575b6107e2576106b55f6103a5565b5b806106d36106cd6106c8858790610393565b610280565b91610280565b10156107d4578b90828482906106e8926103fd565b6106f190610412565b6106fa90610447565b6107039061045f565b63fabed4128a8d8490610715926103fd565b61071e90610412565b908a88859061072c926103fd565b61073590610412565b918d8a86906107439261046b565b61074c90610480565b958b8690610759926104e0565b90610762610042565b97889561076f8796610560565b8652600486019461077f9561060c565b03815a6020945f91f19182156107cf5761079e926107a3575b506103c1565b6106b6565b6107c39060203d81116107c8575b6107bb8183610537565b810190610575565b610798565b503d6107b1565b610650565b505050505050505050509050565b5f7fb4fa3fb300000000000000000000000000000000000000000000000000000000815280610813600482016101f3565b0390fd5b508a61084061083a61083561082d858790610393565b93899061039b565b610280565b91610280565b14156106a8565b50610853818390610393565b61086f6108696108648b8890610397565b610280565b91610280565b14156106a1565b50610882818390610393565b61089e610898610893898790610393565b610280565b91610280565b141561069a565b6108e5916108f06020966108c56108c05f959a97989a610447565b61045f565b9563fabed4129397999190916108d9610042565b9a8b998a988997610560565b87526004870161060c565b03925af1801561092e57610902575b50565b6109229060203d8111610927575b61091a8183610537565b810190610575565b6108ff565b503d610910565b61065056"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b61038f565b61001d5f3561003c565b806373bf9a7f146100375763a21d1ade0361000e57610355565b6101f8565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561009a5781359167ffffffffffffffff831161009557602001926020830284011161009057565b61005c565b610058565b610054565b909182601f830112156100d95781359167ffffffffffffffff83116100d45760200192602083028401116100cf57565b61005c565b610058565b610054565b909182601f830112156101185781359167ffffffffffffffff831161011357602001926020830284011161010e57565b61005c565b610058565b610054565b9060a0828203126101ee575f82013567ffffffffffffffff81116101e95781610147918401610060565b929093602082013567ffffffffffffffff81116101e4578361016a918401610060565b929093604082013567ffffffffffffffff81116101df578161018d918401610060565b929093606082013567ffffffffffffffff81116101da57836101b091840161009f565b929093608082013567ffffffffffffffff81116101d5576101d192016100de565b9091565b610050565b610050565b610050565b610050565b610050565b61004c565b5f0190565b346102335761021d61020b36600461011d565b98979097969196959295949394610660565b610225610042565b8061022f816101f3565b0390f35b610048565b73ffffffffffffffffffffffffffffffffffffffff1690565b61025a90610238565b90565b61026681610251565b0361026d57565b5f80fd5b9050359061027e8261025d565b565b90565b61028c81610280565b0361029357565b5f80fd5b905035906102a482610283565b565b909182601f830112156102e05781359167ffffffffffffffff83116102db5760200192602083028401116102d657565b61005c565b610058565b610054565b91909160a081840312610350576102fe835f8301610271565b9261030c8160208401610271565b9261031a8260408501610271565b926103288360608301610297565b92608082013567ffffffffffffffff811161034b5761034792016102a6565b9091565b610050565b61004c565b3461038a576103746103683660046102e5565b949390939291926108a5565b61037c610042565b80610386816101f3565b0390f35b610048565b5f80fd5b5090565b5090565b5090565b90565b90565b6103b96103b46103be9261039f565b6103a2565b610280565b90565b60016103cd9101610280565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b919081101561040d576020020190565b6103d0565b3561041c8161025d565b90565b61043361042e61043892610238565b6103a2565b610238565b90565b6104449061041f565b90565b6104509061043b565b90565b61045c9061041f565b90565b61046890610453565b90565b919081101561047b576020020190565b6103d0565b3561048a81610283565b90565b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156104db570180359067ffffffffffffffff82116104d6576020019160208202360383136104d157565b610495565b610491565b61048d565b908210156104fb5760206104f79202810190610499565b9091565b6103d0565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061054190610500565b810190811067ffffffffffffffff82111761055b57604052565b61050a565b60e01b90565b9050519061057382610283565b565b9060208282031261058e5761058b915f01610566565b90565b61004c565b61059c90610251565b9052565b6105a990610280565b9052565b60209181520190565b5f80fd5b9037565b9091826105ca916105ad565b917f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610607578291602061060392029384916105ba565b0190565b6105b6565b90939161064d95936106366106409261062c60808601985f870190610593565b6020850190610593565b60408301906105a0565b60608185039101526105be565b90565b610658610042565b3d5f823e3d90fd5b99989394919596929799610675818390610393565b61069161068b6106868a8d90610393565b610280565b91610280565b14158015610876575b8015610847575b8015610817575b6107e2576106b55f6103a5565b5b806106d36106cd6106c8858790610393565b610280565b91610280565b10156107d4578b90828482906106e8926103fd565b6106f190610412565b6106fa90610447565b6107039061045f565b63fabed4128a8d8490610715926103fd565b61071e90610412565b908a88859061072c926103fd565b61073590610412565b918d8a86906107439261046b565b61074c90610480565b958b8690610759926104e0565b90610762610042565b97889561076f8796610560565b8652600486019461077f9561060c565b03815a6020945f91f19182156107cf5761079e926107a3575b506103c1565b6106b6565b6107c39060203d81116107c8575b6107bb8183610537565b810190610575565b610798565b503d6107b1565b610650565b505050505050505050509050565b5f7fb4fa3fb300000000000000000000000000000000000000000000000000000000815280610813600482016101f3565b0390fd5b508a61084061083a61083561082d858790610393565b93899061039b565b610280565b91610280565b14156106a8565b50610853818390610393565b61086f6108696108648b8890610397565b610280565b91610280565b14156106a1565b50610882818390610393565b61089e610898610893898790610393565b610280565b91610280565b141561069a565b6108e5916108f06020966108c56108c05f959a97989a610447565b61045f565b9563fabed4129397999190916108d9610042565b9a8b998a988997610560565b87526004870161060c565b03925af1801561092e57610902575b50565b6109229060203d8111610927575b61091a8183610537565b810190610575565b6108ff565b503d610910565b61065056"

    public static let InvalidInputError = ABI.Function(
        name: "InvalidInput",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case invalidInput
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (InvalidInputError, _):
            return .invalidInput
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [InvalidInputError]
    public static let functions: [ABI.Function] = [claimFn, claimAllFn]
    public static let claimFn = ABI.Function(
        name: "claim",
        inputs: [.address, .address, .address, .uint256, .array(.bytes32)],
        outputs: []
    )

    public static func claim(distributor: EthAddress, account: EthAddress, reward: EthAddress, claimable: BigUInt, proofs: [Hex], withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try claimFn.encoded(with: [.address(distributor), .address(account), .address(reward), .uint256(claimable), .array(.bytes32, proofs.map {
                .bytes32($0)
            })])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try claimFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, claimFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func claimDecode(input: Hex) throws -> (EthAddress, EthAddress, EthAddress, BigUInt, [Hex]) {
        let decodedInput = try claimFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple5(.address(distributor), .address(account), .address(reward), .uint256(claimable), .array(.bytes32, proofs)):
            return (distributor, account, reward, claimable, proofs.map { $0.asHex! })
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, claimFn.inputTuple)
        }
    }

    public static let claimAllFn = ABI.Function(
        name: "claimAll",
        inputs: [.array(.address), .array(.address), .array(.address), .array(.uint256), .array(.bytes32)],
        outputs: []
    )

    public static func claimAll(distributors: [EthAddress], accounts: [EthAddress], rewards: [EthAddress], claimables: [BigUInt], proofs: [Hex], withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try claimAllFn.encoded(with: [.array(.address, distributors.map {
                .address($0)
            }), .array(.address, accounts.map {
                .address($0)
            }), .array(.address, rewards.map {
                .address($0)
            }), .array(.uint256, claimables.map {
                .uint256($0)
            }), .array(.bytes32, proofs.map {
                .bytes32($0)
            })])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try claimAllFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, claimAllFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func claimAllDecode(input: Hex) throws -> ([EthAddress], [EthAddress], [EthAddress], [BigUInt], [Hex]) {
        let decodedInput = try claimAllFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple5(.array(.address, distributors), .array(.address, accounts), .array(.address, rewards), .array(.uint256, claimables), .array(.bytes32, proofs)):
            return (distributors.map { $0.asEthAddress! }, accounts.map { $0.asEthAddress! }, rewards.map { $0.asEthAddress! }, claimables.map { $0.asBigUInt! }, proofs.map { $0.asHex! })
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, claimAllFn.inputTuple)
        }
    }
}
