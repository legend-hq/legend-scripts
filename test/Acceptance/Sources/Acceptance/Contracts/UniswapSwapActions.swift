@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum UniswapSwapActions {
    public struct SwapParamsExactIn: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .address, .uint256, .uint256, .bytes])

        public let uniswapRouter: EthAddress
        public let recipient: EthAddress
        public let tokenFrom: EthAddress
        public let amount: BigUInt
        public let amountOutMinimum: BigUInt
        public let path: Hex

        public init(uniswapRouter: EthAddress, recipient: EthAddress, tokenFrom: EthAddress, amount: BigUInt, amountOutMinimum: BigUInt, path: Hex) {
            self.uniswapRouter = uniswapRouter
            self.recipient = recipient
            self.tokenFrom = tokenFrom
            self.amount = amount
            self.amountOutMinimum = amountOutMinimum
            self.path = path
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple6(.address(uniswapRouter),
                    .address(recipient),
                    .address(tokenFrom),
                    .uint256(amount),
                    .uint256(amountOutMinimum),
                    .bytes(path))
        }

        public static func decode(hex: Hex) throws -> SwapParamsExactIn {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> SwapParamsExactIn {
            switch value {
            case let .tuple6(.address(uniswapRouter),
                             .address(recipient),
                             .address(tokenFrom),
                             .uint256(amount),
                             .uint256(amountOutMinimum),
                             .bytes(path)):
                return SwapParamsExactIn(uniswapRouter: uniswapRouter, recipient: recipient, tokenFrom: tokenFrom, amount: amount, amountOutMinimum: amountOutMinimum, path: path)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public struct SwapParamsExactOut: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .address, .uint256, .uint256, .bytes])

        public let uniswapRouter: EthAddress
        public let recipient: EthAddress
        public let tokenFrom: EthAddress
        public let amount: BigUInt
        public let amountInMaximum: BigUInt
        public let path: Hex

        public init(uniswapRouter: EthAddress, recipient: EthAddress, tokenFrom: EthAddress, amount: BigUInt, amountInMaximum: BigUInt, path: Hex) {
            self.uniswapRouter = uniswapRouter
            self.recipient = recipient
            self.tokenFrom = tokenFrom
            self.amount = amount
            self.amountInMaximum = amountInMaximum
            self.path = path
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple6(.address(uniswapRouter),
                    .address(recipient),
                    .address(tokenFrom),
                    .uint256(amount),
                    .uint256(amountInMaximum),
                    .bytes(path))
        }

        public static func decode(hex: Hex) throws -> SwapParamsExactOut {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> SwapParamsExactOut {
            switch value {
            case let .tuple6(.address(uniswapRouter),
                             .address(recipient),
                             .address(tokenFrom),
                             .uint256(amount),
                             .uint256(amountInMaximum),
                             .bytes(path)):
                return SwapParamsExactOut(uniswapRouter: uniswapRouter, recipient: recipient, tokenFrom: tokenFrom, amount: amount, amountInMaximum: amountInMaximum, path: path)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public static let creationCode: Hex = ""
    public static let runtimeCode: Hex = ""

    public enum RevertReason: Equatable, Error {
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [swapAssetExactInFn, swapAssetExactOutFn]
    public static let swapAssetExactInFn = ABI.Function(
        name: "swapAssetExactIn",
        inputs: [.tuple([.address, .address, .address, .uint256, .uint256, .bytes])],
        outputs: []
    )

    public static func swapAssetExactIn(params: SwapParamsExactIn, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try swapAssetExactInFn.encoded(with: [params.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try swapAssetExactInFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, swapAssetExactInFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func swapAssetExactInDecode(input: Hex) throws -> (SwapParamsExactIn) {
        let decodedInput = try swapAssetExactInFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.tuple6(.address(uniswapRouter),
                                 .address(recipient),
                                 .address(tokenFrom),
                                 .uint256(amount),
                                 .uint256(amountOutMinimum),
                                 .bytes(path))):
            return try (SwapParamsExactIn(uniswapRouter: uniswapRouter, recipient: recipient, tokenFrom: tokenFrom, amount: amount, amountOutMinimum: amountOutMinimum, path: path))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, swapAssetExactInFn.inputTuple)
        }
    }

    public static let swapAssetExactOutFn = ABI.Function(
        name: "swapAssetExactOut",
        inputs: [.tuple([.address, .address, .address, .uint256, .uint256, .bytes])],
        outputs: []
    )

    public static func swapAssetExactOut(params: SwapParamsExactOut, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try swapAssetExactOutFn.encoded(with: [params.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try swapAssetExactOutFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, swapAssetExactOutFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func swapAssetExactOutDecode(input: Hex) throws -> (SwapParamsExactOut) {
        let decodedInput = try swapAssetExactOutFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.tuple6(.address(uniswapRouter),
                                 .address(recipient),
                                 .address(tokenFrom),
                                 .uint256(amount),
                                 .uint256(amountInMaximum),
                                 .bytes(path))):
            return try (SwapParamsExactOut(uniswapRouter: uniswapRouter, recipient: recipient, tokenFrom: tokenFrom, amount: amount, amountInMaximum: amountInMaximum, path: path))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, swapAssetExactOutFn.inputTuple)
        }
    }
}
