@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum UniswapSwapActions {
    public struct SwapParamsExactIn: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .address, .uint256, .uint256, .bytes])

        public let uniswapRouter: EthAddress
        public let recipient: EthAddress
        public let tokenFrom: EthAddress
        public let amount: BigUInt
        public let amountOutMinimum: BigUInt
        public let path: Hex

        public init(uniswapRouter: EthAddress, recipient: EthAddress, tokenFrom: EthAddress, amount: BigUInt, amountOutMinimum: BigUInt, path: Hex) {
            self.uniswapRouter = uniswapRouter
            self.recipient = recipient
            self.tokenFrom = tokenFrom
            self.amount = amount
            self.amountOutMinimum = amountOutMinimum
            self.path = path
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple6(.address(uniswapRouter),
                    .address(recipient),
                    .address(tokenFrom),
                    .uint256(amount),
                    .uint256(amountOutMinimum),
                    .bytes(path))
        }

        public static func decode(hex: Hex) throws -> SwapParamsExactIn {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> SwapParamsExactIn {
            switch value {
            case let .tuple6(.address(uniswapRouter),
                             .address(recipient),
                             .address(tokenFrom),
                             .uint256(amount),
                             .uint256(amountOutMinimum),
                             .bytes(path)):
                return SwapParamsExactIn(uniswapRouter: uniswapRouter, recipient: recipient, tokenFrom: tokenFrom, amount: amount, amountOutMinimum: amountOutMinimum, path: path)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public struct SwapParamsExactOut: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .address, .uint256, .uint256, .bytes])

        public let uniswapRouter: EthAddress
        public let recipient: EthAddress
        public let tokenFrom: EthAddress
        public let amount: BigUInt
        public let amountInMaximum: BigUInt
        public let path: Hex

        public init(uniswapRouter: EthAddress, recipient: EthAddress, tokenFrom: EthAddress, amount: BigUInt, amountInMaximum: BigUInt, path: Hex) {
            self.uniswapRouter = uniswapRouter
            self.recipient = recipient
            self.tokenFrom = tokenFrom
            self.amount = amount
            self.amountInMaximum = amountInMaximum
            self.path = path
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple6(.address(uniswapRouter),
                    .address(recipient),
                    .address(tokenFrom),
                    .uint256(amount),
                    .uint256(amountInMaximum),
                    .bytes(path))
        }

        public static func decode(hex: Hex) throws -> SwapParamsExactOut {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> SwapParamsExactOut {
            switch value {
            case let .tuple6(.address(uniswapRouter),
                             .address(recipient),
                             .address(tokenFrom),
                             .uint256(amount),
                             .uint256(amountInMaximum),
                             .bytes(path)):
                return SwapParamsExactOut(uniswapRouter: uniswapRouter, recipient: recipient, tokenFrom: tokenFrom, amount: amount, amountInMaximum: amountInMaximum, path: path)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public static let creationCode: Hex = ""
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610153565b61001d5f3561003c565b8063bc4610bc146100375763dfd42a660361000e57610120565b6100a5565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b908160c09103126100665790565b610054565b9060208282031261009b575f82013567ffffffffffffffff8111610096576100939201610058565b90565b610050565b61004c565b5f0190565b346100d3576100bd6100b836600461006b565b6104a1565b6100c5610042565b806100cf816100a0565b0390f35b610048565b908160c09103126100e65790565b610054565b9060208282031261011b575f82013567ffffffffffffffff81116101165761011392016100d8565b90565b610050565b61004c565b3461014e576101386101333660046100eb565b61066a565b610140610042565b8061014a816100a0565b0390f35b610048565b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61017990610157565b90565b61018581610170565b0361018c57565b5f80fd5b3561019a8161017c565b90565b90565b6101b46101af6101b992610157565b61019d565b610157565b90565b6101c5906101a0565b90565b6101d1906101bc565b90565b90565b6101e0816101d4565b036101e757565b5f80fd5b356101f5816101d7565b90565b610201906101a0565b90565b61020d906101f8565b90565b610219906101a0565b90565b61022590610210565b90565b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610276570180359067ffffffffffffffff82116102715760200191600182023603831361026c57565b610230565b61022c565b610228565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906102bc9061027b565b810190811067ffffffffffffffff8211176102d657604052565b610285565b906102ee6102e7610042565b92836102b2565b565b6102fa60806102db565b90565b5f80fd5b67ffffffffffffffff811161031f5761031b60209161027b565b0190565b610285565b90825f939282370152565b9092919261034461033f82610301565b6102db565b938185526020850190828401116103605761035e92610324565b565b6102fd565b61037091369161032f565b90565b52565b9061038090610170565b9052565b9061038e906101d4565b9052565b60e01b90565b905051906103a5826101d7565b565b906020828203126103c0576103bd915f01610398565b90565b61004c565b5190565b60209181520190565b90825f9392825e0152565b6103fc61040560209361040a936103f3816103c5565b938480936103c9565b958691016103d2565b61027b565b0190565b61041790610170565b9052565b610424906101d4565b9052565b9061047690606080610447608084015f8701518582035f8701526103dd565b9461045a6020820151602086019061040e565b61046c6040820151604086019061041b565b015191019061041b565b90565b61048e9160208201915f818403910152610428565b90565b610499610042565b3d5f823e3d90fd5b6020610592916104db6104be6104b960408401610190565b6101c8565b6104c95f8401610190565b6104d5606085016101eb565b916108e9565b6104f66104f16104ec5f8401610190565b610204565b61021c565b6105875f63b858183f61057361056a6105138760a0810190610234565b9190976105616105248b8301610190565b610559610551610542608061053b606088016101eb565b96016101eb565b9661054b6102f0565b9d610365565b898d01610373565b8b8b01610376565b60408901610384565b60608701610384565b61057b610042565b96879586948593610392565b835260048301610479565b03925af180156105d0576105a4575b50565b6105c49060203d81116105c9575b6105bc81836102b2565b8101906103a7565b6105a1565b503d6105b2565b610491565b6105df60806102db565b90565b9061063090606080610601608084015f8701518582035f8701526103dd565b946106146020820151602086019061040e565b6106266040820151604086019061041b565b015191019061041b565b90565b6106489160208201915f8184039101526105e2565b90565b90565b61066261065d6106679261064b565b61019d565b6101d4565b90565b61069e61068161067c60408401610190565b6101c8565b61068c5f8401610190565b610698608085016101eb565b916108e9565b61075b602061073c6106c16106bc6106b75f8701610190565b610204565b61021c565b6107505f6309b813466106d88860a0810190610234565b6107338a61072a6106ed8b839b969b01610190565b61072261071a61070b6080610704606088016101eb565b96016101eb565b966107146105d5565b9d610365565b898d01610373565b8b8b01610376565b60408901610384565b60608701610384565b610744610042565b96879586948593610392565b835260048301610633565b03925af19081156107fa575f916107cc575b5061078b610785610780608085016101eb565b6101d4565b916101d4565b10610794575b50565b806107b75f6107b06107ab60406107c69601610190565b6101c8565b9201610190565b6107c05f61064e565b916108e9565b5f610791565b6107ed915060203d81116107f3575b6107e581836102b2565b8101906103a7565b5f61076d565b503d6107db565b610491565b61080890610210565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61084d6108486108529261080b565b610392565b610814565b90565b61085e90610170565b9052565b61086b906101d4565b9052565b91602061089092949361088960408201965f830190610855565b0190610862565b565b151590565b60ff1690565b6108b16108ac6108b69261064b565b61019d565b610897565b90565b6108c29061089d565b9052565b9160206108e79294936108e060408201965f830190610855565b01906108b9565b565b909161092a60049161091b61090163095ea7b3610839565b918661090b610042565b958694602086019081520161086f565b602082018103825203826102b2565b9061093f610939828490610a2d565b15610892565b610949575b505050565b610996600461099b94610991849161098261096763095ea7b3610839565b915f90610972610042565b96879460208601908152016108c6565b602082018103825203836102b2565b610c1f565b610c1f565b5f8080610944565b5f90565b906109b96109b483610301565b6102db565b918252565b606090565b3d5f146109de576109d33d6109a7565b903d5f602084013e5b565b6109e66109be565b906109dc565b6109f581610892565b036109fc57565b5f80fd5b90505190610a0d826109ec565b565b90602082820312610a2857610a25915f01610a00565b90565b61004c565b905f8091610a396109a3565b50610a43846107ff565b9082602082019151925af1610a566109c3565b81610a81575b509081610a68575b5090565b610a7b9150610a76906107ff565b610c8b565b5f610a64565b9050610a8c816103c5565b610a9e610a985f61064e565b916101d4565b14908115610aae575b505f610a5c565b610ac991506020610abe826103c5565b818301019101610a0f565b5f610aa7565b67ffffffffffffffff8111610aed57610ae960209161027b565b0190565b610285565b90610b04610aff83610acf565b6102db565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b610b3a6020610af2565b90610b4760208301610b09565b565b610b51610b30565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610bb7602a604092610b54565b610bc081610b5d565b0190565b610bd99060208101905f818303910152610baa565b90565b15610be357565b610beb610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610c1b60048201610bc4565b0390fd5b610c6891610c2f610c3e926107ff565b90610c38610b49565b91610cab565b610c47816103c5565b610c59610c535f61064e565b916101d4565b14908115610c6a575b50610bdc565b565b610c8591506020610c7a826103c5565b818301019101610a0f565b5f610c62565b610c936109a3565b503b610ca7610ca15f61064e565b916101d4565b1190565b90610cca9291610cb96109be565b5090610cc45f61064e565b91610d9b565b90565b610cd690610210565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610d336026604092610b54565b610d3c81610cd9565b0190565b610d559060208101905f818303910152610d26565b90565b15610d5f57565b610d67610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610d9760048201610d40565b0390fd5b915f8091610df19593610dac6109be565b50610dd3610db930610ccd565b31610dcc610dc6856101d4565b916101d4565b1015610d58565b8591602082019151925af191610de76109c3565b9092909192610e90565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610e28601d602092610b54565b610e3181610df4565b0190565b610e4a9060208101905f818303910152610e1b565b90565b15610e5457565b610e5c610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610e8c60048201610e35565b0390fd5b919290610e9b6109be565b505f14610edf5750610eac826103c5565b610ebe610eb85f61064e565b916101d4565b14610ec8575b5090565b610ed4610ed991610c8b565b610e4d565b5f610ec4565b82610f32565b5190565b610f08610f11602093610f1693610eff81610ee5565b93848093610b54565b958691016103d2565b61027b565b0190565b610f2f9160208201915f818403910152610ee9565b90565b90610f3c826103c5565b610f4e610f485f61064e565b916101d4565b115f14610f5e5750805190602001fd5b610f9990610f6a610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610f1a565b0390fd"

    public enum RevertReason: Equatable, Error {
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [swapAssetExactInFn, swapAssetExactOutFn]
    public static let swapAssetExactInFn = ABI.Function(
        name: "swapAssetExactIn",
        inputs: [.tuple([.address, .address, .address, .uint256, .uint256, .bytes])],
        outputs: []
    )

    public static func swapAssetExactIn(params: SwapParamsExactIn, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try swapAssetExactInFn.encoded(with: [params.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try swapAssetExactInFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, swapAssetExactInFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func swapAssetExactInDecode(input: Hex) throws -> (SwapParamsExactIn) {
        let decodedInput = try swapAssetExactInFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.tuple6(.address(uniswapRouter),
                                 .address(recipient),
                                 .address(tokenFrom),
                                 .uint256(amount),
                                 .uint256(amountOutMinimum),
                                 .bytes(path))):
            return try (SwapParamsExactIn(uniswapRouter: uniswapRouter, recipient: recipient, tokenFrom: tokenFrom, amount: amount, amountOutMinimum: amountOutMinimum, path: path))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, swapAssetExactInFn.inputTuple)
        }
    }

    public static let swapAssetExactOutFn = ABI.Function(
        name: "swapAssetExactOut",
        inputs: [.tuple([.address, .address, .address, .uint256, .uint256, .bytes])],
        outputs: []
    )

    public static func swapAssetExactOut(params: SwapParamsExactOut, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try swapAssetExactOutFn.encoded(with: [params.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try swapAssetExactOutFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, swapAssetExactOutFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func swapAssetExactOutDecode(input: Hex) throws -> (SwapParamsExactOut) {
        let decodedInput = try swapAssetExactOutFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.tuple6(.address(uniswapRouter),
                                 .address(recipient),
                                 .address(tokenFrom),
                                 .uint256(amount),
                                 .uint256(amountInMaximum),
                                 .bytes(path))):
            return try (SwapParamsExactOut(uniswapRouter: uniswapRouter, recipient: recipient, tokenFrom: tokenFrom, amount: amount, amountInMaximum: amountInMaximum, path: path))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, swapAssetExactOutFn.inputTuple)
        }
    }
}
