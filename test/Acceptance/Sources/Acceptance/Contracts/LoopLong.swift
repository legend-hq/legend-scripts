@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum LoopLong {
    public struct LoopInfo: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .uint24, .uint256, .uint256, .uint256])

        public let exposureToken: EthAddress
        public let backingToken: EthAddress
        public let poolFee: UInt
        public let exposureAmount: BigUInt
        public let maxSwapBackingAmount: BigUInt
        public let initialBackingAmount: BigUInt

        public init(exposureToken: EthAddress, backingToken: EthAddress, poolFee: UInt, exposureAmount: BigUInt, maxSwapBackingAmount: BigUInt, initialBackingAmount: BigUInt) {
            self.exposureToken = exposureToken
            self.backingToken = backingToken
            self.poolFee = poolFee
            self.exposureAmount = exposureAmount
            self.maxSwapBackingAmount = maxSwapBackingAmount
            self.initialBackingAmount = initialBackingAmount
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple6(.address(exposureToken),
                    .address(backingToken),
                    .uint24(poolFee),
                    .uint256(exposureAmount),
                    .uint256(maxSwapBackingAmount),
                    .uint256(initialBackingAmount))
        }

        public static func decode(hex: Hex) throws -> LoopInfo {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> LoopInfo {
            switch value {
            case let .tuple6(.address(exposureToken),
                             .address(backingToken),
                             .uint24(poolFee),
                             .uint256(exposureAmount),
                             .uint256(maxSwapBackingAmount),
                             .uint256(initialBackingAmount)):
                return LoopInfo(exposureToken: exposureToken, backingToken: backingToken, poolFee: poolFee, exposureAmount: exposureAmount, maxSwapBackingAmount: maxSwapBackingAmount, initialBackingAmount: initialBackingAmount)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public struct MarketParams: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .address, .address, .uint256])

        public let loanToken: EthAddress
        public let collateralToken: EthAddress
        public let oracle: EthAddress
        public let irm: EthAddress
        public let lltv: BigUInt

        public init(loanToken: EthAddress, collateralToken: EthAddress, oracle: EthAddress, irm: EthAddress, lltv: BigUInt) {
            self.loanToken = loanToken
            self.collateralToken = collateralToken
            self.oracle = oracle
            self.irm = irm
            self.lltv = lltv
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple5(.address(loanToken),
                    .address(collateralToken),
                    .address(oracle),
                    .address(irm),
                    .uint256(lltv))
        }

        public static func decode(hex: Hex) throws -> MarketParams {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> MarketParams {
            switch value {
            case let .tuple5(.address(loanToken),
                             .address(collateralToken),
                             .address(oracle),
                             .address(irm),
                             .uint256(lltv)):
                return MarketParams(loanToken: loanToken, collateralToken: collateralToken, oracle: oracle, irm: irm, lltv: lltv)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public static let creationCode: Hex = "0x608060405234601c57600e6020565b61247761002b823961247790f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b6103d0565b61001d5f3561003c565b8063661f54e0146100375763fa461e330361000e57610399565b6102a2565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007690610054565b90565b6100828161006d565b0361008957565b5f80fd5b9050359061009a82610079565b565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906100e1906100a0565b810190811067ffffffffffffffff8211176100fb57604052565b6100aa565b9061011361010c610042565b92836100d7565b565b90565b61012181610115565b0361012857565b5f80fd5b9050359061013982610118565b565b919060a0838203126101ab576101a49061015560a0610100565b93610162825f830161008d565b5f860152610173826020830161008d565b6020860152610185826040830161008d565b6040860152610197826060830161008d565b606086015260800161012c565b6080830152565b61009c565b62ffffff1690565b6101c1816101b0565b036101c857565b5f80fd5b905035906101d9826101b8565b565b919060c08382031261025d57610256906101f560c0610100565b93610202825f830161008d565b5f860152610213826020830161008d565b602086015261022582604083016101cc565b6040860152610237826060830161012c565b6060860152610249826080830161012c565b608086015260a00161012c565b60a0830152565b61009c565b9091610180828403126102985761029561027e845f850161008d565b9361028c816020860161013b565b9360c0016101db565b90565b61004c565b5f0190565b346102d1576102bb6102b5366004610262565b916108e2565b6102c3610042565b806102cd8161029d565b0390f35b610048565b90565b6102e2816102d6565b036102e957565b5f80fd5b905035906102fa826102d9565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103425781359167ffffffffffffffff831161033d57602001926001830284011161033857565b610304565b610300565b6102fc565b916060838303126103945761035e825f85016102ed565b9261036c83602083016102ed565b92604082013567ffffffffffffffff811161038f5761038b9201610308565b9091565b610050565b61004c565b346103cb576103b56103ac366004610347565b92919091610ea0565b6103bd610042565b806103c78161029d565b0390f35b610048565b5f80fd5b6103de905161006d565b90565b6103eb9051610115565b90565b6103f890516101b0565b90565b90565b90565b61041561041061041a926103fb565b6103fe565b610115565b90565b61043161042c61043692610054565b6103fe565b610054565b90565b6104429061041d565b90565b61044e90610439565b90565b61045a90610439565b90565b61046690610115565b9052565b91602061048b92949361048460408201965f83019061045d565b019061045d565b565b6104969061041d565b90565b6104a29061048d565b90565b6104ae90610439565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b6104e7906102d6565b7f80000000000000000000000000000000000000000000000000000000000000008114610513575f0390565b6104b1565b90565b61052f61052a61053492610518565b6103fe565b610054565b90565b61055473fffd8963efd1fc6a506488495d951d5263988d2661051b565b90565b90565b61056e61056961057392610557565b6103fe565b610054565b90565b61058261058891610054565b91610054565b90039073ffffffffffffffffffffffffffffffffffffffff82116105a857565b6104b1565b90565b6105c46105bf6105c9926105ad565b6103fe565b610054565b90565b6105da6401000276a36105b0565b90565b6105e96105ef91610054565b91610054565b019073ffffffffffffffffffffffffffffffffffffffff821161060e57565b6104b1565b61061d6080610100565b90565b52565b9061062d9061006d565b9052565b52565b52565b6106409061006d565b9052565b61064d906101b0565b9052565b90604080610685936106695f8201515f860190610637565b61067b60208201516020860190610637565b0151910190610644565b565b61069090610115565b9052565b906080806106ec936106ac5f8201515f860190610637565b6106be60208201516020860190610637565b6106d060408201516040860190610637565b6106e260608201516060860190610637565b0151910190610687565b565b9060a080610758936107065f8201515f860190610637565b61071860208201516020860190610637565b61072a60408201516040860190610644565b61073c60608201516060860190610687565b61074e60808201516080860190610687565b0151910190610687565b565b9061012060606107a1936107745f8201515f860190610651565b610785602082015183860190610637565b61079760408201516080860190610694565b01519101906106ee565b565b91906107b7905f6101e0850194019061075a565b565b5f80fd5b60e01b90565b905051906107d0826102d9565b565b91906040838203126107fa57806107ee6107f7925f86016107c3565b936020016107c3565b90565b61004c565b6108089061006d565b9052565b151590565b61081a9061080c565b9052565b610827906102d6565b9052565b61083490610054565b9052565b5190565b60209181520190565b90825f9392825e0152565b61086f61087860209361087d9361086681610838565b9384809361083c565b95869101610845565b6100a0565b0190565b91936108b86108cf96946108ae6108c294976108a460a08801995f8901906107ff565b6020870190610811565b604085019061081e565b606083019061082b565b6080818403910152610850565b90565b6108da610042565b3d5f823e3d90fd5b91906108ec6112e0565b6108f8602082016103d4565b61091461090e6109095f86016103d4565b61006d565b9161006d565b14158015610be2575b610bad5761092d602083016103d4565b926109395f84016103d4565b93610972610949606086016103e1565b958261095d6109578361006d565b9161006d565b10929061096c604088016103ee565b91611362565b93856109866109805f610401565b91610115565b115f14610af4576109956117b0565b8561099f91611b2a565b6109a890610499565b6109b1906104a5565b9263128acb0890306109c290610445565b9584986109ce90611c70565b6109d7906104de565b945f1497610a8095610a6c5f96610a49610a8b96610a40610a5d9760409f610ad057610a38610a17610a076105cc565b610a11600161055a565b906105dd565b985b9593610a2f610a26610613565b978f8901610620565b60208701610623565b8f8501610631565b60608301610634565b610a51610042565b948591602083016107a3565b602082018103825203846100d7565b610a74610042565b9a8b998a9889976107bd565b875260048701610881565b03925af18015610acb57610a9e575b505b565b610abe9060403d8111610ac4575b610ab681836100d7565b8101906107d2565b50610a9a565b503d610aac565b6108d2565b610a38610aee610ade610537565b610ae8600161055a565b90610576565b98610a19565b94505090610b1b9250610b0960a085016103e1565b610b155f939293610401565b906114b0565b610b2430610445565b610b2f5f83016103d4565b610b3b602084016103d4565b91610b5460a0610b4d606087016103e1565b95016103e1565b610b90610b8a610b847f60e4d8edd6a6b4e385a2b0929bf2c685a276900c1998874de266252713b2070794610451565b94610451565b94610451565b94610ba5610b9c610042565b9283928361046a565b0390a4610a9c565b5f7f494e780700000000000000000000000000000000000000000000000000000000815280610bde6004820161029d565b0390fd5b50610bee5f82016103d4565b610c0b610c05610c00602086016103d4565b61006d565b9161006d565b141561091d565b9190606083820312610c5e57610c5790610c2c6060610100565b93610c39825f830161008d565b5f860152610c4a826020830161008d565b60208601526040016101cc565b6040830152565b61009c565b91906101e083820312610cc357610cbc90610c7e6080610100565b93610c8b825f8301610c12565b5f860152610c9c826060830161008d565b6020860152610cae826080830161013b565b6040860152610120016101db565b6060830152565b61009c565b906101e082820312610ce257610cdf915f01610c63565b90565b61004c565b610cfb610cf6610d00926103fb565b6103fe565b6102d6565b90565b610d17610d12610d1c926102d6565b6103fe565b610115565b90565b604090610d48610d4f9496959396610d3e60608401985f8501906107ff565b602083019061045d565b019061045d565b565b610d5a9061041d565b90565b610d6690610d51565b90565b610d729061041d565b90565b610d7e90610d69565b90565b610d8a90610439565b90565b67ffffffffffffffff8111610dab57610da76020916100a0565b0190565b6100aa565b90610dc2610dbd83610d8d565b610100565b918252565b369037565b90610df1610dd983610db0565b92602080610de78693610d8d565b9201910390610dc7565b565b5f910312610dfd57565b61004c565b90608080610e5a93610e1a5f8201515f860190610637565b610e2c60208201516020860190610637565b610e3e60408201516040860190610637565b610e5060608201516060860190610637565b0151910190610687565b565b9092610e9090610e86610e9d9694610e7c6101008601975f870190610e02565b60a085019061045d565b60c08301906107ff565b60e0818403910152610850565b90565b92610eb79192610eae611cc1565b90810190610cc8565b90606082015192610edb610ed6610ecc6117b0565b5f86015190611b2a565b610499565b9133610ef7610ef1610eec866104a5565b61006d565b9161006d565b036111835781610f0f610f095f610ce7565b916102d6565b135f146111745750610f2090610d03565b5b80610f3f610f39610f34608088016103e1565b610115565b91610115565b1161112357610f7d610f5f610f5a60206040870151016103d4565b610d5d565b610f6b602086016103d4565b610f77606088016103e1565b91611d98565b610f99610f94610f8f602086016103d4565b610d75565b610d81565b9263238d65796040820151610fb0606088016103e1565b95610fba30610445565b610fcb610fc65f610401565b610dcc565b823b1561111e575f94610ffc8692610ff194610fe5610042565b9c8d98899788966107bd565b865260048601610e5c565b03925af19081156111195761105e9461103a926110ed575b5061102160a087016103e1565b90836040611031602084016103d4565b920151926114b0565b61105761105161104c602087016103d4565b610d5d565b926104a5565b9091611e52565b61106730610445565b6110725f83016103d4565b61107e602084016103d4565b9161109760a0611090606087016103e1565b95016103e1565b6110d36110cd6110c77f60e4d8edd6a6b4e385a2b0929bf2c685a276900c1998874de266252713b2070794610451565b94610451565b94610451565b946110e86110df610042565b9283928361046a565b0390a4565b61110c905f3d8111611112575b61110481836100d7565b810190610df3565b5f611014565b503d6110fa565b6108d2565b6107b9565b8361117061113f6080611138602085016103d4565b93016103e1565b925f9384937f3824a8c400000000000000000000000000000000000000000000000000000000855260048501610d1f565b0390fd5b61117e9150610d03565b610f21565b5f7f48f5c3ed000000000000000000000000000000000000000000000000000000008152806111b46004820161029d565b0390fd5b5f1c90565b6111d16111cc6111d692610115565b6103fe565b610115565b90565b6111e56111ea916111b8565b6111bd565b90565b6112016111fc61120692610557565b6103fe565b610115565b90565b61121861121e91939293610115565b92610115565b820391821161122957565b6104b1565b90565b5f1b90565b61124a61124561124f92610115565b611231565b61122e565b90565b6112966112916112817f08e807f0e311ef1048643adc5ad6a1816eb08663ef138ef8a0dbdde4c66f79456111d9565b61128b60016111ed565b90611209565b611236565b90565b6112dd6112d86112c87f439f1088d898f3d7db77e1b77d28920aa2581569b138503f27dfbbc6bae651da6111d9565b6112d260016111ed565b90611209565b611236565b90565b6112e8611252565b6112f0611299565b5c905d565b6112ff6060610100565b90565b5f90565b5f90565b6113126112f5565b906020808084611320611302565b81520161132b611302565b815201611336611306565b81525050565b61134461130a565b90565b6113516060610100565b90565b9061135e906101b0565b9052565b9161136b61133c565b508261137f6113798461006d565b9161006d565b116113b5575b6113a96113b2926113a0611397611347565b955f8701610623565b60208501610623565b60408301611354565b90565b6113a96113b29293925050611385565b905051906113d282610118565b565b91906040838203126113fc57806113f06113f9925f86016113c5565b936020016113c5565b90565b61004c565b61140a90610401565b9052565b9095949261145b9461144a611454926114406101009661143661012088019c5f890190610e02565b60a087019061045d565b60c0850190611401565b60e08301906107ff565b01906107ff565b565b91936114956114ad969461148b61149f94976114816101208801995f890190610e02565b60a087019061045d565b60c0850190611401565b60e08301906107ff565b610100818403910152610850565b90565b806114c36114bd84610115565b91610115565b115f14611595576115016114dd6040949361150693611209565b926114fc6114f46114ef5f89016103d4565b610d5d565b828691611d98565b610d75565b610d81565b6115455f6320b76e819593956115508261151f30610445565b61153061152b86610401565b610dcc565b91611539610042565b9a8b998a9889976107bd565b87526004870161145d565b03925af1801561159057611563575b505b565b6115839060403d8111611589575b61157b81836100d7565b8101906113d4565b5061155f565b503d611571565b6108d2565b806115a86115a284610115565b91610115565b106115b7575b50505050611561565b61160a5f6115de6115d16115cc604097610d75565b610d81565b936350d8cd4b9795611209565b95611615826115ec30610445565b6115f530610445565b916115fe610042565b9a8b998a9889976107bd565b87526004870161140e565b03925af180156116595761162c575b8080806115ae565b61164c9060403d8111611652575b61164481836100d7565b8101906113d4565b50611624565b503d61163a565b6108d2565b5f90565b731f98431c8ad98523631ae4a59f267346ea31f98490565b90565b61169161168c6116969261167a565b6103fe565b610115565b90565b90565b6116b06116ab6116b592611699565b6103fe565b610115565b90565b90565b6116cf6116ca6116d4926116b8565b6103fe565b610115565b90565b90565b6116ee6116e96116f3926116d7565b6103fe565b610115565b90565b90565b61170d611708611712926116f6565b6103fe565b610115565b90565b73db1d10011ad0ff90774d0c6bb92e5c5c8b4461f790565b90565b61174461173f6117499261172d565b6103fe565b610115565b90565b7333128a8fc17869897dce68ed026d694621f6fdfd90565b90565b61177b61177661178092611764565b6103fe565b610115565b90565b73afe208a311b21f13ef87e33a90049fc17a7acdec90565b91906117ae905f6020850194019061045d565b565b6117b861165e565b50466117cd6117c760016111ed565b91610115565b1461190957466117e66117e0600a61167d565b91610115565b146118fe57466118006117fa61a4b161169c565b91610115565b146118f3574661181961181360896116bb565b91610115565b146118e8574661183261182c60056116da565b91610115565b146118dd574661184b61184560386116f9565b91610115565b146118d2574661186561185f612105611730565b91610115565b146118c7574661187f61187961a4ec611767565b91610115565b146118bc576118b8465f9182917f6b8c19840000000000000000000000000000000000000000000000000000000083526004830161179b565b0390fd5b6118c4611783565b90565b6118cf61174c565b90565b6118da611715565b90565b6118e5611662565b90565b6118f0611662565b90565b6118fb611662565b90565b611906611662565b90565b611911611662565b90565b60209181520190565b5f7f506f6f6c416464726573733a2077726f6e6720746f6b656e206f726465720000910152565b611951601e602092611914565b61195a8161191d565b0190565b6119739060208101905f818303910152611944565b90565b1561197d57565b611985610042565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806119b56004820161195e565b0390fd5b6119c2906101b0565b9052565b6040906119ef6119f694969593966119e560608401985f8501906107ff565b60208301906107ff565b01906119b9565b565b60200190565b90565b611a15611a10611a1a926119fe565b611231565b61122e565b90565b611a467fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54611a01565b90565b905090565b5f7fff00000000000000000000000000000000000000000000000000000000000000910152565b611a8160018092611a49565b611a8a81611a4e565b0190565b60601b90565b611a9d90611a8e565b90565b611aa990611a94565b90565b611ab8611abd9161006d565b611aa0565b9052565b90565b611ad0611ad59161122e565b611ac1565b9052565b60209392611b026014611b0a94611afa611af38996611a75565b8092611aac565b018092611ac4565b018092611ac4565b0190565b611b22611b1d611b2792610115565b6103fe565b610054565b90565b611c19611c2392611c01611c1e93611b4061165e565b50611b72611b4f5f85016103d4565b611b6c611b66611b61602088016103d4565b61006d565b9161006d565b10611976565b91611bbf611b815f83016103d4565b611bb0611b9c6040611b95602087016103d4565b95016103ee565b611ba4610042565b948593602085016119c6565b602082018103825203826100d7565b611bd1611bcb82610838565b916119f8565b2091611bf2611bde611a1d565b611be6610042565b94859360208501611ad9565b602082018103825203826100d7565b611c13611c0d82610838565b916119f8565b206111d9565b611b0e565b610439565b90565b5f90565b90565b611c41611c3c611c4692611c2a565b6103fe565b610115565b90565b15611c5057565b5f80fd5b611c68611c63611c6d92610115565b6103fe565b6102d6565b90565b611cbe90611c7c611c26565b50611cb981611cb3611cad7f8000000000000000000000000000000000000000000000000000000000000000611c2d565b91610115565b10611c49565b611c54565b90565b5f611cca611252565b5d565b611cd690610439565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b611d1b611d16611d2092611cd9565b6107bd565b611ce2565b90565b916020611d44929493611d3d60408201965f8301906107ff565b019061045d565b565b60ff1690565b611d60611d5b611d65926103fb565b6103fe565b611d46565b90565b611d7190611d4c565b9052565b916020611d96929493611d8f60408201965f8301906107ff565b0190611d68565b565b9091611dd9600491611dca611db063095ea7b3611d07565b9186611dba610042565b9586946020860190815201611d23565b602082018103825203826100d7565b90611dee611de8828490611f10565b1561080c565b611df8575b505050565b611e456004611e4a94611e408491611e31611e1663095ea7b3611d07565b915f90611e21610042565b9687946020860190815201611d75565b602082018103825203836100d7565b6120f9565b6120f9565b5f8080611df3565b91611e96600492611e87611e9b9593611e6e63a9059cbb611d07565b92611e77610042565b9687946020860190815201611d23565b602082018103825203836100d7565b6120f9565b565b5f90565b606090565b3d5f14611ec157611eb63d610db0565b903d5f602084013e5b565b611ec9611ea1565b90611ebf565b611ed88161080c565b03611edf57565b5f80fd5b90505190611ef082611ecf565b565b90602082820312611f0b57611f08915f01611ee3565b90565b61004c565b905f8091611f1c611e9d565b50611f2684611ccd565b9082602082019151925af1611f39611ea6565b81611f64575b509081611f4b575b5090565b611f5e9150611f5990611ccd565b612165565b5f611f47565b9050611f6f81610838565b611f81611f7b5f610401565b91610115565b14908115611f91575b505f611f3f565b611fac91506020611fa182610838565b818301019101611ef2565b5f611f8a565b67ffffffffffffffff8111611fd057611fcc6020916100a0565b0190565b6100aa565b90611fe7611fe283611fb2565b610100565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61201d6020611fd5565b9061202a60208301611fec565b565b612034612013565b90565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b612091602a604092611914565b61209a81612037565b0190565b6120b39060208101905f818303910152612084565b90565b156120bd57565b6120c5610042565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806120f56004820161209e565b0390fd5b6121429161210961211892611ccd565b9061211261202c565b91612185565b61212181610838565b61213361212d5f610401565b91610115565b14908115612144575b506120b6565b565b61215f9150602061215482610838565b818301019101611ef2565b5f61213c565b61216d611e9d565b503b61218161217b5f610401565b91610115565b1190565b906121a49291612193611ea1565b509061219e5f610401565b91612275565b90565b6121b090610439565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b61220d6026604092611914565b612216816121b3565b0190565b61222f9060208101905f818303910152612200565b90565b1561223957565b612241610042565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806122716004820161221a565b0390fd5b915f80916122cb9593612286611ea1565b506122ad612293306121a7565b316122a66122a085610115565b91610115565b1015612232565b8591602082019151925af1916122c1611ea6565b909290919261236a565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b612302601d602092611914565b61230b816122ce565b0190565b6123249060208101905f8183039101526122f5565b90565b1561232e57565b612336610042565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806123666004820161230f565b0390fd5b919290612375611ea1565b505f146123b9575061238682610838565b6123986123925f610401565b91610115565b146123a2575b5090565b6123ae6123b391612165565b612327565b5f61239e565b8261240c565b5190565b6123e26123eb6020936123f0936123d9816123bf565b93848093611914565b95869101610845565b6100a0565b0190565b6124099160208201915f8184039101526123c3565b90565b9061241682610838565b6124286124225f610401565b91610115565b115f146124385750805190602001fd5b61247390612444610042565b9182917f08c379a0000000000000000000000000000000000000000000000000000000008352600483016123f4565b0390fd"
    public static let runtimeCode: Hex = ""

    public static let InvalidCallerError = ABI.Function(
        name: "InvalidCaller",
        inputs: []
    )

    public static let InvalidMarketParamsError = ABI.Function(
        name: "InvalidMarketParams",
        inputs: []
    )

    public static let ReentrantCallError = ABI.Function(
        name: "ReentrantCall",
        inputs: []
    )

    public static let SwapTooExpensiveError = ABI.Function(
        name: "SwapTooExpensive",
        inputs: [.address, .uint256, .uint256]
    )

    public static let UnrecognizedChainError = ABI.Function(
        name: "UnrecognizedChain",
        inputs: [.uint256]
    )

    public enum RevertReason: Equatable, Error {
        case invalidCaller
        case invalidMarketParams
        case reentrantCall
        case swapTooExpensive(EthAddress, BigUInt, BigUInt)
        case unrecognizedChain(BigUInt)
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (InvalidCallerError, _):
            return .invalidCaller
        case (InvalidMarketParamsError, _):
            return .invalidMarketParams
        case (ReentrantCallError, _):
            return .reentrantCall
        case (SwapTooExpensiveError, let .tuple3(.address(token), .uint256(maxAmountIn), .uint256(actualAmountIn))):
            return .swapTooExpensive(token, maxAmountIn, actualAmountIn)
        case (UnrecognizedChainError, let .tuple1(.uint256(var0))):
            return .unrecognizedChain(var0)
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [InvalidCallerError, InvalidMarketParamsError, ReentrantCallError, SwapTooExpensiveError, UnrecognizedChainError]
    public static let functions: [ABI.Function] = [loopFn, uniswapV3SwapCallbackFn]
    public static let loopFn = ABI.Function(
        name: "loop",
        inputs: [.address, .tuple([.address, .address, .address, .address, .uint256]), .tuple([.address, .address, .uint24, .uint256, .uint256, .uint256])],
        outputs: []
    )

    public static func loop(morpho: EthAddress, morphoMarketParams: MarketParams, loopInfo: LoopInfo, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try loopFn.encoded(with: [.address(morpho), morphoMarketParams.asValue, loopInfo.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try loopFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, loopFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func loopDecode(input: Hex) throws -> (EthAddress, MarketParams, LoopInfo) {
        let decodedInput = try loopFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.address(morpho), .tuple5(.address(loanToken),
                                                   .address(collateralToken),
                                                   .address(oracle),
                                                   .address(irm),
                                                   .uint256(lltv)), .tuple6(.address(exposureToken),
                                                                            .address(backingToken),
                                                                            .uint24(poolFee),
                                                                            .uint256(exposureAmount),
                                                                            .uint256(maxSwapBackingAmount),
                                                                            .uint256(initialBackingAmount))):
            return try (morpho, MarketParams(loanToken: loanToken, collateralToken: collateralToken, oracle: oracle, irm: irm, lltv: lltv), LoopInfo(exposureToken: exposureToken, backingToken: backingToken, poolFee: poolFee, exposureAmount: exposureAmount, maxSwapBackingAmount: maxSwapBackingAmount, initialBackingAmount: initialBackingAmount))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, loopFn.inputTuple)
        }
    }

    public static let uniswapV3SwapCallbackFn = ABI.Function(
        name: "uniswapV3SwapCallback",
        inputs: [.int256, .int256, .bytes],
        outputs: []
    )

    public static func uniswapV3SwapCallback(amount0Delta: BigInt, amount1Delta: BigInt, data: Hex, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try uniswapV3SwapCallbackFn.encoded(with: [.int256(amount0Delta), .int256(amount1Delta), .bytes(data)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try uniswapV3SwapCallbackFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, uniswapV3SwapCallbackFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func uniswapV3SwapCallbackDecode(input: Hex) throws -> (BigInt, BigInt, Hex) {
        let decodedInput = try uniswapV3SwapCallbackFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.int256(amount0Delta), .int256(amount1Delta), .bytes(data)):
            return (amount0Delta, amount1Delta, data)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, uniswapV3SwapCallbackFn.inputTuple)
        }
    }
}
