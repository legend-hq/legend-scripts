@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum MorphoVaultActions {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b610e9d61002b8239610e9d90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610192565b61001d5f3561003c565b80638340f549146100375763f3fef3a30361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b9161030a565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b906104c4565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b90565b6101ad6101a86101b292610050565b610196565b610050565b90565b6101be90610199565b90565b6101ca906101b5565b90565b6101d690610199565b90565b6101e2906101cd565b90565b6101ee906101cd565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90610232906101f1565b810190811067ffffffffffffffff82111761024c57604052565b6101fb565b60e01b90565b905051906102648261009b565b565b9060208282031261027f5761027c915f01610257565b90565b61004c565b61028d90610069565b9052565b91906102a4905f60208501940190610284565b565b6102ae610042565b3d5f823e3d90fd5b6102bf90610199565b90565b6102cb906102b6565b90565b6102d7906101cd565b90565b6102e390610098565b9052565b91602061030892949361030160408201965f8301906102da565b0190610284565b565b908261033e6103387fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b146103e5575b61036660209261036161035961036b946101c1565b828791610786565b6102c2565b6102ce565b636e553f6592906103975f61037f306101e5565b956103a261038b610042565b97889687958694610251565b8452600484016102e7565b03925af180156103e0576103b4575b50565b6103d49060203d81116103d9575b6103cc8183610228565b810190610266565b6103b1565b503d6103c2565b6102a6565b915061042f60206103fd6103f8856101c1565b6101d9565b6370a082319061042461040f306101e5565b92610418610042565b95869485938493610251565b835260048301610291565b03915afa90811561048d5760209261036161035961036b94610366945f91610460575b509694505050925050610344565b6104809150873d8111610486575b6104788183610228565b810190610266565b5f610452565b503d61046e565b6102a6565b6040906104bb6104c294969593966104b160608401985f8501906102da565b6020830190610284565b0190610284565b565b90806104f86104f27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b145f14610625575061055e61051461050f836102c2565b6102ce565b602061052c61052763ba087652956102c2565b6102ce565b6370a082319061055361053e306101e5565b92610547610042565b96879485938493610251565b835260048301610291565b03915afa908115610620576020925f926105f1575b506105a25f610581306101e5565b956105ad61058e306101e5565b610596610042565b98899788968795610251565b855260048501610492565b03925af180156105ec576105c0575b505b565b6105e09060203d81116105e5575b6105d88183610228565b810190610266565b6105bc565b503d6105ce565b6102a6565b610612919250833d8111610619575b61060a8183610228565b810190610266565b905f610573565b503d610600565b6102a6565b906106396106346020926102c2565b6102ce565b63b460af94929061066e5f61064d306101e5565b9561067961065a306101e5565b610662610042565b98899788968795610251565b855260048501610492565b03925af180156106ba5761068e575b506105be565b6106ae9060203d81116106b3575b6106a68183610228565b810190610266565b610688565b503d61069c565b6102a6565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6107016106fc610706926106bf565b610251565b6106c8565b90565b91602061072a92949361072360408201965f830190610284565b01906102da565b565b151590565b90565b60ff1690565b61074e61074961075392610731565b610196565b610734565b90565b61075f9061073a565b9052565b91602061078492949361077d60408201965f830190610284565b0190610756565b565b90916107c76004916107b861079e63095ea7b36106ed565b91866107a8610042565b9586946020860190815201610709565b60208201810382520382610228565b906107dc6107d6828490610922565b1561072c565b6107e6575b505050565b61083360046108389461082e849161081f61080463095ea7b36106ed565b915f9061080f610042565b9687946020860190815201610763565b60208201810382520383610228565b610b14565b610b14565b5f80806107e1565b5f90565b90610857610850610042565b9283610228565b565b67ffffffffffffffff8111610877576108736020916101f1565b0190565b6101fb565b9061088e61088983610859565b610844565b918252565b606090565b3d5f146108b3576108a83d61087c565b903d5f602084013e5b565b6108bb610893565b906108b1565b5190565b6108d96108d46108de92610731565b610196565b610098565b90565b6108ea8161072c565b036108f157565b5f80fd5b90505190610902826108e1565b565b9060208282031261091d5761091a915f016108f5565b90565b61004c565b905f809161092e610840565b50610938846101d9565b9082602082019151925af161094b610898565b81610976575b50908161095d575b5090565b610970915061096b906101d9565b610b80565b5f610959565b9050610981816108c1565b61099361098d5f6108c5565b91610098565b149081156109a3575b505f610951565b6109be915060206109b3826108c1565b818301019101610904565b5f61099c565b67ffffffffffffffff81116109e2576109de6020916101f1565b0190565b6101fb565b906109f96109f4836109c4565b610844565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b610a2f60206109e7565b90610a3c602083016109fe565b565b610a46610a25565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610aac602a604092610a49565b610ab581610a52565b0190565b610ace9060208101905f818303910152610a9f565b90565b15610ad857565b610ae0610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610b1060048201610ab9565b0390fd5b610b5d91610b24610b33926101d9565b90610b2d610a3e565b91610ba0565b610b3c816108c1565b610b4e610b485f6108c5565b91610098565b14908115610b5f575b50610ad1565b565b610b7a91506020610b6f826108c1565b818301019101610904565b5f610b57565b610b88610840565b503b610b9c610b965f6108c5565b91610098565b1190565b90610bbf9291610bae610893565b5090610bb95f6108c5565b91610c90565b90565b610bcb906101cd565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610c286026604092610a49565b610c3181610bce565b0190565b610c4a9060208101905f818303910152610c1b565b90565b15610c5457565b610c5c610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610c8c60048201610c35565b0390fd5b915f8091610ce69593610ca1610893565b50610cc8610cae30610bc2565b31610cc1610cbb85610098565b91610098565b1015610c4d565b8591602082019151925af191610cdc610898565b9092909192610d85565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610d1d601d602092610a49565b610d2681610ce9565b0190565b610d3f9060208101905f818303910152610d10565b90565b15610d4957565b610d51610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610d8160048201610d2a565b0390fd5b919290610d90610893565b505f14610dd45750610da1826108c1565b610db3610dad5f6108c5565b91610098565b14610dbd575b5090565b610dc9610dce91610b80565b610d42565b5f610db9565b82610e32565b5190565b90825f9392825e0152565b610e08610e11602093610e1693610dff81610dda565b93848093610a49565b95869101610dde565b6101f1565b0190565b610e2f9160208201915f818403910152610de9565b90565b90610e3c826108c1565b610e4e610e485f6108c5565b91610098565b115f14610e5e5750805190602001fd5b610e9990610e6a610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610e1a565b0390fd"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610192565b61001d5f3561003c565b80638340f549146100375763f3fef3a30361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b9161030a565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b906104c4565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b90565b6101ad6101a86101b292610050565b610196565b610050565b90565b6101be90610199565b90565b6101ca906101b5565b90565b6101d690610199565b90565b6101e2906101cd565b90565b6101ee906101cd565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90610232906101f1565b810190811067ffffffffffffffff82111761024c57604052565b6101fb565b60e01b90565b905051906102648261009b565b565b9060208282031261027f5761027c915f01610257565b90565b61004c565b61028d90610069565b9052565b91906102a4905f60208501940190610284565b565b6102ae610042565b3d5f823e3d90fd5b6102bf90610199565b90565b6102cb906102b6565b90565b6102d7906101cd565b90565b6102e390610098565b9052565b91602061030892949361030160408201965f8301906102da565b0190610284565b565b908261033e6103387fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b146103e5575b61036660209261036161035961036b946101c1565b828791610786565b6102c2565b6102ce565b636e553f6592906103975f61037f306101e5565b956103a261038b610042565b97889687958694610251565b8452600484016102e7565b03925af180156103e0576103b4575b50565b6103d49060203d81116103d9575b6103cc8183610228565b810190610266565b6103b1565b503d6103c2565b6102a6565b915061042f60206103fd6103f8856101c1565b6101d9565b6370a082319061042461040f306101e5565b92610418610042565b95869485938493610251565b835260048301610291565b03915afa90811561048d5760209261036161035961036b94610366945f91610460575b509694505050925050610344565b6104809150873d8111610486575b6104788183610228565b810190610266565b5f610452565b503d61046e565b6102a6565b6040906104bb6104c294969593966104b160608401985f8501906102da565b6020830190610284565b0190610284565b565b90806104f86104f27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b145f14610625575061055e61051461050f836102c2565b6102ce565b602061052c61052763ba087652956102c2565b6102ce565b6370a082319061055361053e306101e5565b92610547610042565b96879485938493610251565b835260048301610291565b03915afa908115610620576020925f926105f1575b506105a25f610581306101e5565b956105ad61058e306101e5565b610596610042565b98899788968795610251565b855260048501610492565b03925af180156105ec576105c0575b505b565b6105e09060203d81116105e5575b6105d88183610228565b810190610266565b6105bc565b503d6105ce565b6102a6565b610612919250833d8111610619575b61060a8183610228565b810190610266565b905f610573565b503d610600565b6102a6565b906106396106346020926102c2565b6102ce565b63b460af94929061066e5f61064d306101e5565b9561067961065a306101e5565b610662610042565b98899788968795610251565b855260048501610492565b03925af180156106ba5761068e575b506105be565b6106ae9060203d81116106b3575b6106a68183610228565b810190610266565b610688565b503d61069c565b6102a6565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6107016106fc610706926106bf565b610251565b6106c8565b90565b91602061072a92949361072360408201965f830190610284565b01906102da565b565b151590565b90565b60ff1690565b61074e61074961075392610731565b610196565b610734565b90565b61075f9061073a565b9052565b91602061078492949361077d60408201965f830190610284565b0190610756565b565b90916107c76004916107b861079e63095ea7b36106ed565b91866107a8610042565b9586946020860190815201610709565b60208201810382520382610228565b906107dc6107d6828490610922565b1561072c565b6107e6575b505050565b61083360046108389461082e849161081f61080463095ea7b36106ed565b915f9061080f610042565b9687946020860190815201610763565b60208201810382520383610228565b610b14565b610b14565b5f80806107e1565b5f90565b90610857610850610042565b9283610228565b565b67ffffffffffffffff8111610877576108736020916101f1565b0190565b6101fb565b9061088e61088983610859565b610844565b918252565b606090565b3d5f146108b3576108a83d61087c565b903d5f602084013e5b565b6108bb610893565b906108b1565b5190565b6108d96108d46108de92610731565b610196565b610098565b90565b6108ea8161072c565b036108f157565b5f80fd5b90505190610902826108e1565b565b9060208282031261091d5761091a915f016108f5565b90565b61004c565b905f809161092e610840565b50610938846101d9565b9082602082019151925af161094b610898565b81610976575b50908161095d575b5090565b610970915061096b906101d9565b610b80565b5f610959565b9050610981816108c1565b61099361098d5f6108c5565b91610098565b149081156109a3575b505f610951565b6109be915060206109b3826108c1565b818301019101610904565b5f61099c565b67ffffffffffffffff81116109e2576109de6020916101f1565b0190565b6101fb565b906109f96109f4836109c4565b610844565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b610a2f60206109e7565b90610a3c602083016109fe565b565b610a46610a25565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610aac602a604092610a49565b610ab581610a52565b0190565b610ace9060208101905f818303910152610a9f565b90565b15610ad857565b610ae0610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610b1060048201610ab9565b0390fd5b610b5d91610b24610b33926101d9565b90610b2d610a3e565b91610ba0565b610b3c816108c1565b610b4e610b485f6108c5565b91610098565b14908115610b5f575b50610ad1565b565b610b7a91506020610b6f826108c1565b818301019101610904565b5f610b57565b610b88610840565b503b610b9c610b965f6108c5565b91610098565b1190565b90610bbf9291610bae610893565b5090610bb95f6108c5565b91610c90565b90565b610bcb906101cd565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610c286026604092610a49565b610c3181610bce565b0190565b610c4a9060208101905f818303910152610c1b565b90565b15610c5457565b610c5c610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610c8c60048201610c35565b0390fd5b915f8091610ce69593610ca1610893565b50610cc8610cae30610bc2565b31610cc1610cbb85610098565b91610098565b1015610c4d565b8591602082019151925af191610cdc610898565b9092909192610d85565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610d1d601d602092610a49565b610d2681610ce9565b0190565b610d3f9060208101905f818303910152610d10565b90565b15610d4957565b610d51610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610d8160048201610d2a565b0390fd5b919290610d90610893565b505f14610dd45750610da1826108c1565b610db3610dad5f6108c5565b91610098565b14610dbd575b5090565b610dc9610dce91610b80565b610d42565b5f610db9565b82610e32565b5190565b90825f9392825e0152565b610e08610e11602093610e1693610dff81610dda565b93848093610a49565b95869101610dde565b6101f1565b0190565b610e2f9160208201915f818403910152610de9565b90565b90610e3c826108c1565b610e4e610e485f6108c5565b91610098565b115f14610e5e5750805190602001fd5b610e9990610e6a610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610e1a565b0390fd"

    public enum RevertReason: Equatable, Error {
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [depositFn, withdrawFn]
    public static let depositFn = ABI.Function(
        name: "deposit",
        inputs: [.address, .address, .uint256],
        outputs: []
    )

    public static func deposit(vault: EthAddress, asset: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try depositFn.encoded(with: [.address(vault), .address(asset), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try depositFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, depositFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func depositDecode(input: Hex) throws -> (EthAddress, EthAddress, BigUInt) {
        let decodedInput = try depositFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.address(vault), .address(asset), .uint256(amount)):
            return (vault, asset, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, depositFn.inputTuple)
        }
    }

    public static let withdrawFn = ABI.Function(
        name: "withdraw",
        inputs: [.address, .uint256],
        outputs: []
    )

    public static func withdraw(vault: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try withdrawFn.encoded(with: [.address(vault), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try withdrawFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, withdrawFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func withdrawDecode(input: Hex) throws -> (EthAddress, BigUInt) {
        let decodedInput = try withdrawFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple2(.address(vault), .uint256(amount)):
            return (vault, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, withdrawFn.inputTuple)
        }
    }
}
