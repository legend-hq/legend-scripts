@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum MorphoVaultActions {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b610db661002b8239610db690f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610192565b61001d5f3561003c565b80638340f549146100375763f3fef3a30361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b916102e9565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b906103d1565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b90565b6101ad6101a86101b292610050565b610196565b610050565b90565b6101be90610199565b90565b6101ca906101b5565b90565b6101d690610199565b90565b6101e2906101cd565b90565b6101ee90610199565b90565b6101fa906101e5565b90565b610206906101e5565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061024a90610209565b810190811067ffffffffffffffff82111761026457604052565b610213565b60e01b90565b9050519061027c8261009b565b565b9060208282031261029757610294915f0161026f565b90565b61004c565b6102a590610098565b9052565b6102b290610069565b9052565b9160206102d79294936102d060408201965f83019061029c565b01906102a9565b565b6102e1610042565b3d5f823e3d90fd5b61030b610310916103066102fe6020956101c1565b82879161069f565b6101d9565b6101f1565b636e553f65929061033c5f610324306101fd565b95610347610330610042565b97889687958694610269565b8452600484016102b6565b03925af1801561038557610359575b50565b6103799060203d811161037e575b6103718183610240565b81019061027e565b610356565b503d610367565b6102d9565b6040906103b36103ba94969593966103a960608401985f85019061029c565b60208301906102a9565b01906102a9565b565b91906103cf905f602085019401906102a9565b565b90806104056103ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b145f14610532575061046b61042161041c836101d9565b6101f1565b602061043961043463ba087652956101d9565b6101f1565b6370a082319061046061044b306101fd565b92610454610042565b96879485938493610269565b8352600483016103bc565b03915afa90811561052d576020925f926104fe575b506104af5f61048e306101fd565b956104ba61049b306101fd565b6104a3610042565b98899788968795610269565b85526004850161038a565b03925af180156104f9576104cd575b505b565b6104ed9060203d81116104f2575b6104e58183610240565b81019061027e565b6104c9565b503d6104db565b6102d9565b61051f919250833d8111610526575b6105178183610240565b81019061027e565b905f610480565b503d61050d565b6102d9565b906105466105416020926101d9565b6101f1565b63b460af94929061057b5f61055a306101fd565b95610586610567306101fd565b61056f610042565b98899788968795610269565b85526004850161038a565b03925af180156105c75761059b575b506104cb565b6105bb9060203d81116105c0575b6105b38183610240565b81019061027e565b610595565b503d6105a9565b6102d9565b6105d5906101e5565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61061a61061561061f926105d8565b610269565b6105e1565b90565b91602061064392949361063c60408201965f8301906102a9565b019061029c565b565b151590565b90565b60ff1690565b61066761066261066c9261064a565b610196565b61064d565b90565b61067890610653565b9052565b91602061069d92949361069660408201965f8301906102a9565b019061066f565b565b90916106e06004916106d16106b763095ea7b3610606565b91866106c1610042565b9586946020860190815201610622565b60208201810382520382610240565b906106f56106ef82849061083b565b15610645565b6106ff575b505050565b61074c600461075194610747849161073861071d63095ea7b3610606565b915f90610728610042565b968794602086019081520161067c565b60208201810382520383610240565b610a2d565b610a2d565b5f80806106fa565b5f90565b90610770610769610042565b9283610240565b565b67ffffffffffffffff81116107905761078c602091610209565b0190565b610213565b906107a76107a283610772565b61075d565b918252565b606090565b3d5f146107cc576107c13d610795565b903d5f602084013e5b565b6107d46107ac565b906107ca565b5190565b6107f26107ed6107f79261064a565b610196565b610098565b90565b61080381610645565b0361080a57565b5f80fd5b9050519061081b826107fa565b565b9060208282031261083657610833915f0161080e565b90565b61004c565b905f8091610847610759565b50610851846105cc565b9082602082019151925af16108646107b1565b8161088f575b509081610876575b5090565b6108899150610884906105cc565b610a99565b5f610872565b905061089a816107da565b6108ac6108a65f6107de565b91610098565b149081156108bc575b505f61086a565b6108d7915060206108cc826107da565b81830101910161081d565b5f6108b5565b67ffffffffffffffff81116108fb576108f7602091610209565b0190565b610213565b9061091261090d836108dd565b61075d565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b6109486020610900565b9061095560208301610917565b565b61095f61093e565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b6109c5602a604092610962565b6109ce8161096b565b0190565b6109e79060208101905f8183039101526109b8565b90565b156109f157565b6109f9610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a29600482016109d2565b0390fd5b610a7691610a3d610a4c926105cc565b90610a46610957565b91610ab9565b610a55816107da565b610a67610a615f6107de565b91610098565b14908115610a78575b506109ea565b565b610a9391506020610a88826107da565b81830101910161081d565b5f610a70565b610aa1610759565b503b610ab5610aaf5f6107de565b91610098565b1190565b90610ad89291610ac76107ac565b5090610ad25f6107de565b91610ba9565b90565b610ae4906101e5565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b416026604092610962565b610b4a81610ae7565b0190565b610b639060208101905f818303910152610b34565b90565b15610b6d57565b610b75610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610ba560048201610b4e565b0390fd5b915f8091610bff9593610bba6107ac565b50610be1610bc730610adb565b31610bda610bd485610098565b91610098565b1015610b66565b8591602082019151925af191610bf56107b1565b9092909192610c9e565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c36601d602092610962565b610c3f81610c02565b0190565b610c589060208101905f818303910152610c29565b90565b15610c6257565b610c6a610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610c9a60048201610c43565b0390fd5b919290610ca96107ac565b505f14610ced5750610cba826107da565b610ccc610cc65f6107de565b91610098565b14610cd6575b5090565b610ce2610ce791610a99565b610c5b565b5f610cd2565b82610d4b565b5190565b90825f9392825e0152565b610d21610d2a602093610d2f93610d1881610cf3565b93848093610962565b95869101610cf7565b610209565b0190565b610d489160208201915f818403910152610d02565b90565b90610d55826107da565b610d67610d615f6107de565b91610098565b115f14610d775750805190602001fd5b610db290610d83610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d33565b0390fd"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b610192565b61001d5f3561003c565b80638340f549146100375763f3fef3a30361000e5761015e565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61007290610050565b90565b61007e81610069565b0361008557565b5f80fd5b9050359061009682610075565b565b90565b6100a481610098565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b90916060828403126100f3576100f06100d9845f8501610089565b936100e78160208601610089565b936040016100af565b90565b61004c565b5f0190565b3461012c576101166101103660046100be565b916102e9565b61011e610042565b80610128816100f8565b0390f35b610048565b9190604083820312610159578061014d610156925f8601610089565b936020016100af565b90565b61004c565b3461018d57610177610171366004610131565b906103d1565b61017f610042565b80610189816100f8565b0390f35b610048565b5f80fd5b90565b6101ad6101a86101b292610050565b610196565b610050565b90565b6101be90610199565b90565b6101ca906101b5565b90565b6101d690610199565b90565b6101e2906101cd565b90565b6101ee90610199565b90565b6101fa906101e5565b90565b610206906101e5565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061024a90610209565b810190811067ffffffffffffffff82111761026457604052565b610213565b60e01b90565b9050519061027c8261009b565b565b9060208282031261029757610294915f0161026f565b90565b61004c565b6102a590610098565b9052565b6102b290610069565b9052565b9160206102d79294936102d060408201965f83019061029c565b01906102a9565b565b6102e1610042565b3d5f823e3d90fd5b61030b610310916103066102fe6020956101c1565b82879161069f565b6101d9565b6101f1565b636e553f65929061033c5f610324306101fd565b95610347610330610042565b97889687958694610269565b8452600484016102b6565b03925af1801561038557610359575b50565b6103799060203d811161037e575b6103718183610240565b81019061027e565b610356565b503d610367565b6102d9565b6040906103b36103ba94969593966103a960608401985f85019061029c565b60208301906102a9565b01906102a9565b565b91906103cf905f602085019401906102a9565b565b90806104056103ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610098565b91610098565b145f14610532575061046b61042161041c836101d9565b6101f1565b602061043961043463ba087652956101d9565b6101f1565b6370a082319061046061044b306101fd565b92610454610042565b96879485938493610269565b8352600483016103bc565b03915afa90811561052d576020925f926104fe575b506104af5f61048e306101fd565b956104ba61049b306101fd565b6104a3610042565b98899788968795610269565b85526004850161038a565b03925af180156104f9576104cd575b505b565b6104ed9060203d81116104f2575b6104e58183610240565b81019061027e565b6104c9565b503d6104db565b6102d9565b61051f919250833d8111610526575b6105178183610240565b81019061027e565b905f610480565b503d61050d565b6102d9565b906105466105416020926101d9565b6101f1565b63b460af94929061057b5f61055a306101fd565b95610586610567306101fd565b61056f610042565b98899788968795610269565b85526004850161038a565b03925af180156105c75761059b575b506104cb565b6105bb9060203d81116105c0575b6105b38183610240565b81019061027e565b610595565b503d6105a9565b6102d9565b6105d5906101e5565b90565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61061a61061561061f926105d8565b610269565b6105e1565b90565b91602061064392949361063c60408201965f8301906102a9565b019061029c565b565b151590565b90565b60ff1690565b61066761066261066c9261064a565b610196565b61064d565b90565b61067890610653565b9052565b91602061069d92949361069660408201965f8301906102a9565b019061066f565b565b90916106e06004916106d16106b763095ea7b3610606565b91866106c1610042565b9586946020860190815201610622565b60208201810382520382610240565b906106f56106ef82849061083b565b15610645565b6106ff575b505050565b61074c600461075194610747849161073861071d63095ea7b3610606565b915f90610728610042565b968794602086019081520161067c565b60208201810382520383610240565b610a2d565b610a2d565b5f80806106fa565b5f90565b90610770610769610042565b9283610240565b565b67ffffffffffffffff81116107905761078c602091610209565b0190565b610213565b906107a76107a283610772565b61075d565b918252565b606090565b3d5f146107cc576107c13d610795565b903d5f602084013e5b565b6107d46107ac565b906107ca565b5190565b6107f26107ed6107f79261064a565b610196565b610098565b90565b61080381610645565b0361080a57565b5f80fd5b9050519061081b826107fa565b565b9060208282031261083657610833915f0161080e565b90565b61004c565b905f8091610847610759565b50610851846105cc565b9082602082019151925af16108646107b1565b8161088f575b509081610876575b5090565b6108899150610884906105cc565b610a99565b5f610872565b905061089a816107da565b6108ac6108a65f6107de565b91610098565b149081156108bc575b505f61086a565b6108d7915060206108cc826107da565b81830101910161081d565b5f6108b5565b67ffffffffffffffff81116108fb576108f7602091610209565b0190565b610213565b9061091261090d836108dd565b61075d565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b6109486020610900565b9061095560208301610917565b565b61095f61093e565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b6109c5602a604092610962565b6109ce8161096b565b0190565b6109e79060208101905f8183039101526109b8565b90565b156109f157565b6109f9610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a29600482016109d2565b0390fd5b610a7691610a3d610a4c926105cc565b90610a46610957565b91610ab9565b610a55816107da565b610a67610a615f6107de565b91610098565b14908115610a78575b506109ea565b565b610a9391506020610a88826107da565b81830101910161081d565b5f610a70565b610aa1610759565b503b610ab5610aaf5f6107de565b91610098565b1190565b90610ad89291610ac76107ac565b5090610ad25f6107de565b91610ba9565b90565b610ae4906101e5565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b416026604092610962565b610b4a81610ae7565b0190565b610b639060208101905f818303910152610b34565b90565b15610b6d57565b610b75610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610ba560048201610b4e565b0390fd5b915f8091610bff9593610bba6107ac565b50610be1610bc730610adb565b31610bda610bd485610098565b91610098565b1015610b66565b8591602082019151925af191610bf56107b1565b9092909192610c9e565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c36601d602092610962565b610c3f81610c02565b0190565b610c589060208101905f818303910152610c29565b90565b15610c6257565b610c6a610042565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610c9a60048201610c43565b0390fd5b919290610ca96107ac565b505f14610ced5750610cba826107da565b610ccc610cc65f6107de565b91610098565b14610cd6575b5090565b610ce2610ce791610a99565b610c5b565b5f610cd2565b82610d4b565b5190565b90825f9392825e0152565b610d21610d2a602093610d2f93610d1881610cf3565b93848093610962565b95869101610cf7565b610209565b0190565b610d489160208201915f818403910152610d02565b90565b90610d55826107da565b610d67610d615f6107de565b91610098565b115f14610d775750805190602001fd5b610db290610d83610042565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d33565b0390fd"

    public enum RevertReason: Equatable, Error {
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [depositFn, withdrawFn]
    public static let depositFn = ABI.Function(
        name: "deposit",
        inputs: [.address, .address, .uint256],
        outputs: []
    )

    public static func deposit(vault: EthAddress, asset: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try depositFn.encoded(with: [.address(vault), .address(asset), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try depositFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, depositFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func depositDecode(input: Hex) throws -> (EthAddress, EthAddress, BigUInt) {
        let decodedInput = try depositFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.address(vault), .address(asset), .uint256(amount)):
            return (vault, asset, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, depositFn.inputTuple)
        }
    }

    public static let withdrawFn = ABI.Function(
        name: "withdraw",
        inputs: [.address, .uint256],
        outputs: []
    )

    public static func withdraw(vault: EthAddress, amount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try withdrawFn.encoded(with: [.address(vault), .uint256(amount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try withdrawFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, withdrawFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func withdrawDecode(input: Hex) throws -> (EthAddress, BigUInt) {
        let decodedInput = try withdrawFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple2(.address(vault), .uint256(amount)):
            return (vault, amount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, withdrawFn.inputTuple)
        }
    }
}
