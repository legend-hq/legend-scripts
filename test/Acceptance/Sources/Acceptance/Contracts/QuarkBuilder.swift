@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum QuarkBuilder {
    public enum Accounts {
        public struct AccountBalance: Equatable {
            public static let schema: ABI.Schema = .tuple([.address, .uint256])

            public let account: EthAddress
            public let balance: BigUInt

            public init(account: EthAddress, balance: BigUInt) {
                self.account = account
                self.balance = balance
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple2(.address(account),
                        .uint256(balance))
            }

            public static func decode(hex: Hex) throws -> Accounts.AccountBalance {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.AccountBalance {
                switch value {
                case let .tuple2(.address(account),
                                 .uint256(balance)):
                    return Accounts.AccountBalance(account: account, balance: balance)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct AssetPositions: Equatable {
            public static let schema: ABI.Schema = .tuple([.address, .string, .uint256, .uint256, .array(Accounts.AccountBalance.schema)])

            public let asset: EthAddress
            public let symbol: String
            public let decimals: BigUInt
            public let usdPrice: BigUInt
            public let accountBalances: [Accounts.AccountBalance]

            public init(asset: EthAddress, symbol: String, decimals: BigUInt, usdPrice: BigUInt, accountBalances: [Accounts.AccountBalance]) {
                self.asset = asset
                self.symbol = symbol
                self.decimals = decimals
                self.usdPrice = usdPrice
                self.accountBalances = accountBalances
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple5(.address(asset),
                        .string(symbol),
                        .uint256(decimals),
                        .uint256(usdPrice),
                        .array(Accounts.AccountBalance.schema, accountBalances.map {
                            $0.asValue
                        }))
            }

            public static func decode(hex: Hex) throws -> Accounts.AssetPositions {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.AssetPositions {
                switch value {
                case let .tuple5(.address(asset),
                                 .string(symbol),
                                 .uint256(decimals),
                                 .uint256(usdPrice),
                                 .array(Accounts.AccountBalance.schema, accountBalances)):
                    return try Accounts.AssetPositions(asset: asset, symbol: symbol, decimals: decimals, usdPrice: usdPrice, accountBalances: accountBalances.map {
                        try Accounts.AccountBalance.decodeValue($0)
                    })
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct ChainAccounts: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])

            public let chainId: BigUInt
            public let quarkSecrets: [Accounts.QuarkSecret]
            public let assetPositionsList: [Accounts.AssetPositions]
            public let cometPositions: [Accounts.CometPositions]
            public let morphoPositions: [Accounts.MorphoPositions]
            public let morphoVaultPositions: [Accounts.MorphoVaultPositions]

            public init(chainId: BigUInt, quarkSecrets: [Accounts.QuarkSecret], assetPositionsList: [Accounts.AssetPositions], cometPositions: [Accounts.CometPositions], morphoPositions: [Accounts.MorphoPositions], morphoVaultPositions: [Accounts.MorphoVaultPositions]) {
                self.chainId = chainId
                self.quarkSecrets = quarkSecrets
                self.assetPositionsList = assetPositionsList
                self.cometPositions = cometPositions
                self.morphoPositions = morphoPositions
                self.morphoVaultPositions = morphoVaultPositions
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple6(.uint256(chainId),
                        .array(Accounts.QuarkSecret.schema, quarkSecrets.map {
                            $0.asValue
                        }),
                        .array(Accounts.AssetPositions.schema, assetPositionsList.map {
                            $0.asValue
                        }),
                        .array(Accounts.CometPositions.schema, cometPositions.map {
                            $0.asValue
                        }),
                        .array(Accounts.MorphoPositions.schema, morphoPositions.map {
                            $0.asValue
                        }),
                        .array(Accounts.MorphoVaultPositions.schema, morphoVaultPositions.map {
                            $0.asValue
                        }))
            }

            public static func decode(hex: Hex) throws -> Accounts.ChainAccounts {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.ChainAccounts {
                switch value {
                case let .tuple6(.uint256(chainId),
                                 .array(Accounts.QuarkSecret.schema, quarkSecrets),
                                 .array(Accounts.AssetPositions.schema, assetPositionsList),
                                 .array(Accounts.CometPositions.schema, cometPositions),
                                 .array(Accounts.MorphoPositions.schema, morphoPositions),
                                 .array(Accounts.MorphoVaultPositions.schema, morphoVaultPositions)):
                    return try Accounts.ChainAccounts(chainId: chainId, quarkSecrets: quarkSecrets.map {
                        try Accounts.QuarkSecret.decodeValue($0)
                    }, assetPositionsList: assetPositionsList.map {
                        try Accounts.AssetPositions.decodeValue($0)
                    }, cometPositions: cometPositions.map {
                        try Accounts.CometPositions.decodeValue($0)
                    }, morphoPositions: morphoPositions.map {
                        try Accounts.MorphoPositions.decodeValue($0)
                    }, morphoVaultPositions: morphoVaultPositions.map {
                        try Accounts.MorphoVaultPositions.decodeValue($0)
                    })
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct CometBasePosition: Equatable {
            public static let schema: ABI.Schema = .tuple([.address, .array(.address), .array(.uint256), .array(.uint256)])

            public let asset: EthAddress
            public let accounts: [EthAddress]
            public let borrowed: [BigUInt]
            public let supplied: [BigUInt]

            public init(asset: EthAddress, accounts: [EthAddress], borrowed: [BigUInt], supplied: [BigUInt]) {
                self.asset = asset
                self.accounts = accounts
                self.borrowed = borrowed
                self.supplied = supplied
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple4(.address(asset),
                        .array(.address, accounts.map {
                            .address($0)
                        }),
                        .array(.uint256, borrowed.map {
                            .uint256($0)
                        }),
                        .array(.uint256, supplied.map {
                            .uint256($0)
                        }))
            }

            public static func decode(hex: Hex) throws -> Accounts.CometBasePosition {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.CometBasePosition {
                switch value {
                case let .tuple4(.address(asset),
                                 .array(.address, accounts),
                                 .array(.uint256, borrowed),
                                 .array(.uint256, supplied)):
                    return Accounts.CometBasePosition(asset: asset, accounts: accounts.map {
                        $0.asEthAddress!
                    }, borrowed: borrowed.map {
                        $0.asBigUInt!
                    }, supplied: supplied.map {
                        $0.asBigUInt!
                    })
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct CometCollateralPosition: Equatable {
            public static let schema: ABI.Schema = .tuple([.address, .array(.address), .array(.uint256)])

            public let asset: EthAddress
            public let accounts: [EthAddress]
            public let balances: [BigUInt]

            public init(asset: EthAddress, accounts: [EthAddress], balances: [BigUInt]) {
                self.asset = asset
                self.accounts = accounts
                self.balances = balances
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple3(.address(asset),
                        .array(.address, accounts.map {
                            .address($0)
                        }),
                        .array(.uint256, balances.map {
                            .uint256($0)
                        }))
            }

            public static func decode(hex: Hex) throws -> Accounts.CometCollateralPosition {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.CometCollateralPosition {
                switch value {
                case let .tuple3(.address(asset),
                                 .array(.address, accounts),
                                 .array(.uint256, balances)):
                    return Accounts.CometCollateralPosition(asset: asset, accounts: accounts.map {
                        $0.asEthAddress!
                    }, balances: balances.map {
                        $0.asBigUInt!
                    })
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct CometPositions: Equatable {
            public static let schema: ABI.Schema = .tuple([.address, Accounts.CometBasePosition.schema, .array(Accounts.CometCollateralPosition.schema)])

            public let comet: EthAddress
            public let basePosition: Accounts.CometBasePosition
            public let collateralPositions: [Accounts.CometCollateralPosition]

            public init(comet: EthAddress, basePosition: Accounts.CometBasePosition, collateralPositions: [Accounts.CometCollateralPosition]) {
                self.comet = comet
                self.basePosition = basePosition
                self.collateralPositions = collateralPositions
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple3(.address(comet),
                        basePosition.asValue,
                        .array(Accounts.CometCollateralPosition.schema, collateralPositions.map {
                            $0.asValue
                        }))
            }

            public static func decode(hex: Hex) throws -> Accounts.CometPositions {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.CometPositions {
                switch value {
                case let .tuple3(.address(comet),
                                 basePosition,
                                 .array(Accounts.CometCollateralPosition.schema, collateralPositions)):
                    return try Accounts.CometPositions(comet: comet, basePosition: Accounts.CometBasePosition.decodeValue(basePosition), collateralPositions: collateralPositions.map {
                        try Accounts.CometCollateralPosition.decodeValue($0)
                    })
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct MorphoBorrowPosition: Equatable {
            public static let schema: ABI.Schema = .tuple([.array(.address), .array(.uint256)])

            public let accounts: [EthAddress]
            public let borrowed: [BigUInt]

            public init(accounts: [EthAddress], borrowed: [BigUInt]) {
                self.accounts = accounts
                self.borrowed = borrowed
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple2(.array(.address, accounts.map {
                    .address($0)
                }),
                .array(.uint256, borrowed.map {
                    .uint256($0)
                }))
            }

            public static func decode(hex: Hex) throws -> Accounts.MorphoBorrowPosition {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.MorphoBorrowPosition {
                switch value {
                case let .tuple2(.array(.address, accounts),
                                 .array(.uint256, borrowed)):
                    return Accounts.MorphoBorrowPosition(accounts: accounts.map {
                        $0.asEthAddress!
                    }, borrowed: borrowed.map {
                        $0.asBigUInt!
                    })
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct MorphoCollateralPosition: Equatable {
            public static let schema: ABI.Schema = .tuple([.array(.address), .array(.uint256)])

            public let accounts: [EthAddress]
            public let balances: [BigUInt]

            public init(accounts: [EthAddress], balances: [BigUInt]) {
                self.accounts = accounts
                self.balances = balances
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple2(.array(.address, accounts.map {
                    .address($0)
                }),
                .array(.uint256, balances.map {
                    .uint256($0)
                }))
            }

            public static func decode(hex: Hex) throws -> Accounts.MorphoCollateralPosition {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.MorphoCollateralPosition {
                switch value {
                case let .tuple2(.array(.address, accounts),
                                 .array(.uint256, balances)):
                    return Accounts.MorphoCollateralPosition(accounts: accounts.map {
                        $0.asEthAddress!
                    }, balances: balances.map {
                        $0.asBigUInt!
                    })
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct MorphoPositions: Equatable {
            public static let schema: ABI.Schema = .tuple([.bytes32, .address, .address, .address, Accounts.MorphoBorrowPosition.schema, Accounts.MorphoCollateralPosition.schema])

            public let marketId: Hex
            public let morpho: EthAddress
            public let loanToken: EthAddress
            public let collateralToken: EthAddress
            public let borrowPosition: Accounts.MorphoBorrowPosition
            public let collateralPosition: Accounts.MorphoCollateralPosition

            public init(marketId: Hex, morpho: EthAddress, loanToken: EthAddress, collateralToken: EthAddress, borrowPosition: Accounts.MorphoBorrowPosition, collateralPosition: Accounts.MorphoCollateralPosition) {
                self.marketId = marketId
                self.morpho = morpho
                self.loanToken = loanToken
                self.collateralToken = collateralToken
                self.borrowPosition = borrowPosition
                self.collateralPosition = collateralPosition
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple6(.bytes32(marketId),
                        .address(morpho),
                        .address(loanToken),
                        .address(collateralToken),
                        borrowPosition.asValue,
                        collateralPosition.asValue)
            }

            public static func decode(hex: Hex) throws -> Accounts.MorphoPositions {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.MorphoPositions {
                switch value {
                case let .tuple6(.bytes32(marketId),
                                 .address(morpho),
                                 .address(loanToken),
                                 .address(collateralToken),
                                 borrowPosition,
                                 collateralPosition):
                    return try Accounts.MorphoPositions(marketId: marketId, morpho: morpho, loanToken: loanToken, collateralToken: collateralToken, borrowPosition: Accounts.MorphoBorrowPosition.decodeValue(borrowPosition), collateralPosition: Accounts.MorphoCollateralPosition.decodeValue(collateralPosition))
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct MorphoVaultPositions: Equatable {
            public static let schema: ABI.Schema = .tuple([.address, .array(.address), .array(.uint256), .address])

            public let asset: EthAddress
            public let accounts: [EthAddress]
            public let balances: [BigUInt]
            public let vault: EthAddress

            public init(asset: EthAddress, accounts: [EthAddress], balances: [BigUInt], vault: EthAddress) {
                self.asset = asset
                self.accounts = accounts
                self.balances = balances
                self.vault = vault
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple4(.address(asset),
                        .array(.address, accounts.map {
                            .address($0)
                        }),
                        .array(.uint256, balances.map {
                            .uint256($0)
                        }),
                        .address(vault))
            }

            public static func decode(hex: Hex) throws -> Accounts.MorphoVaultPositions {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.MorphoVaultPositions {
                switch value {
                case let .tuple4(.address(asset),
                                 .array(.address, accounts),
                                 .array(.uint256, balances),
                                 .address(vault)):
                    return Accounts.MorphoVaultPositions(asset: asset, accounts: accounts.map {
                        $0.asEthAddress!
                    }, balances: balances.map {
                        $0.asBigUInt!
                    }, vault: vault)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct QuarkSecret: Equatable {
            public static let schema: ABI.Schema = .tuple([.address, .bytes32])

            public let account: EthAddress
            public let nonceSecret: Hex

            public init(account: EthAddress, nonceSecret: Hex) {
                self.account = account
                self.nonceSecret = nonceSecret
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple2(.address(account),
                        .bytes32(nonceSecret))
            }

            public static func decode(hex: Hex) throws -> Accounts.QuarkSecret {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Accounts.QuarkSecret {
                switch value {
                case let .tuple2(.address(account),
                                 .bytes32(nonceSecret)):
                    return Accounts.QuarkSecret(account: account, nonceSecret: nonceSecret)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum Actions {
        public struct Action: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .address, .string, .bytes, .bytes, .string, .bytes32, .uint256])

            public let chainId: BigUInt
            public let quarkAccount: EthAddress
            public let actionType: String
            public let actionContext: Hex
            public let quotePayActionContext: Hex
            public let paymentMethod: String
            public let nonceSecret: Hex
            public let totalPlays: BigUInt

            public init(chainId: BigUInt, quarkAccount: EthAddress, actionType: String, actionContext: Hex, quotePayActionContext: Hex, paymentMethod: String, nonceSecret: Hex, totalPlays: BigUInt) {
                self.chainId = chainId
                self.quarkAccount = quarkAccount
                self.actionType = actionType
                self.actionContext = actionContext
                self.quotePayActionContext = quotePayActionContext
                self.paymentMethod = paymentMethod
                self.nonceSecret = nonceSecret
                self.totalPlays = totalPlays
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple8(.uint256(chainId),
                        .address(quarkAccount),
                        .string(actionType),
                        .bytes(actionContext),
                        .bytes(quotePayActionContext),
                        .string(paymentMethod),
                        .bytes32(nonceSecret),
                        .uint256(totalPlays))
            }

            public static func decode(hex: Hex) throws -> Actions.Action {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Actions.Action {
                switch value {
                case let .tuple8(.uint256(chainId),
                                 .address(quarkAccount),
                                 .string(actionType),
                                 .bytes(actionContext),
                                 .bytes(quotePayActionContext),
                                 .string(paymentMethod),
                                 .bytes32(nonceSecret),
                                 .uint256(totalPlays)):
                    return Actions.Action(chainId: chainId, quarkAccount: quarkAccount, actionType: actionType, actionContext: actionContext, quotePayActionContext: quotePayActionContext, paymentMethod: paymentMethod, nonceSecret: nonceSecret, totalPlays: totalPlays)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum CometActionsBuilder {
        public struct CometBorrowIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string, .uint256, .address, .uint256, .array(.uint256), .array(.string), .address, .bool, .string])

            public let amount: BigUInt
            public let assetSymbol: String
            public let blockTimestamp: BigUInt
            public let borrower: EthAddress
            public let chainId: BigUInt
            public let collateralAmounts: [BigUInt]
            public let collateralAssetSymbols: [String]
            public let comet: EthAddress
            public let preferAcross: Bool
            public let paymentAssetSymbol: String

            public init(amount: BigUInt, assetSymbol: String, blockTimestamp: BigUInt, borrower: EthAddress, chainId: BigUInt, collateralAmounts: [BigUInt], collateralAssetSymbols: [String], comet: EthAddress, preferAcross: Bool, paymentAssetSymbol: String) {
                self.amount = amount
                self.assetSymbol = assetSymbol
                self.blockTimestamp = blockTimestamp
                self.borrower = borrower
                self.chainId = chainId
                self.collateralAmounts = collateralAmounts
                self.collateralAssetSymbols = collateralAssetSymbols
                self.comet = comet
                self.preferAcross = preferAcross
                self.paymentAssetSymbol = paymentAssetSymbol
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple10(.uint256(amount),
                         .string(assetSymbol),
                         .uint256(blockTimestamp),
                         .address(borrower),
                         .uint256(chainId),
                         .array(.uint256, collateralAmounts.map {
                             .uint256($0)
                         }),
                         .array(.string, collateralAssetSymbols.map {
                             .string($0)
                         }),
                         .address(comet),
                         .bool(preferAcross),
                         .string(paymentAssetSymbol))
            }

            public static func decode(hex: Hex) throws -> CometActionsBuilder.CometBorrowIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> CometActionsBuilder.CometBorrowIntent {
                switch value {
                case let .tuple10(.uint256(amount),
                                  .string(assetSymbol),
                                  .uint256(blockTimestamp),
                                  .address(borrower),
                                  .uint256(chainId),
                                  .array(.uint256, collateralAmounts),
                                  .array(.string, collateralAssetSymbols),
                                  .address(comet),
                                  .bool(preferAcross),
                                  .string(paymentAssetSymbol)):
                    return CometActionsBuilder.CometBorrowIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, borrower: borrower, chainId: chainId, collateralAmounts: collateralAmounts.map {
                        $0.asBigUInt!
                    }, collateralAssetSymbols: collateralAssetSymbols.map {
                        $0.asString!
                    }, comet: comet, preferAcross: preferAcross, paymentAssetSymbol: paymentAssetSymbol)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct CometRepayIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string, .uint256, .uint256, .array(.uint256), .array(.string), .address, .address, .bool, .string])

            public let amount: BigUInt
            public let assetSymbol: String
            public let blockTimestamp: BigUInt
            public let chainId: BigUInt
            public let collateralAmounts: [BigUInt]
            public let collateralAssetSymbols: [String]
            public let comet: EthAddress
            public let repayer: EthAddress
            public let preferAcross: Bool
            public let paymentAssetSymbol: String

            public init(amount: BigUInt, assetSymbol: String, blockTimestamp: BigUInt, chainId: BigUInt, collateralAmounts: [BigUInt], collateralAssetSymbols: [String], comet: EthAddress, repayer: EthAddress, preferAcross: Bool, paymentAssetSymbol: String) {
                self.amount = amount
                self.assetSymbol = assetSymbol
                self.blockTimestamp = blockTimestamp
                self.chainId = chainId
                self.collateralAmounts = collateralAmounts
                self.collateralAssetSymbols = collateralAssetSymbols
                self.comet = comet
                self.repayer = repayer
                self.preferAcross = preferAcross
                self.paymentAssetSymbol = paymentAssetSymbol
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple10(.uint256(amount),
                         .string(assetSymbol),
                         .uint256(blockTimestamp),
                         .uint256(chainId),
                         .array(.uint256, collateralAmounts.map {
                             .uint256($0)
                         }),
                         .array(.string, collateralAssetSymbols.map {
                             .string($0)
                         }),
                         .address(comet),
                         .address(repayer),
                         .bool(preferAcross),
                         .string(paymentAssetSymbol))
            }

            public static func decode(hex: Hex) throws -> CometActionsBuilder.CometRepayIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> CometActionsBuilder.CometRepayIntent {
                switch value {
                case let .tuple10(.uint256(amount),
                                  .string(assetSymbol),
                                  .uint256(blockTimestamp),
                                  .uint256(chainId),
                                  .array(.uint256, collateralAmounts),
                                  .array(.string, collateralAssetSymbols),
                                  .address(comet),
                                  .address(repayer),
                                  .bool(preferAcross),
                                  .string(paymentAssetSymbol)):
                    return CometActionsBuilder.CometRepayIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, chainId: chainId, collateralAmounts: collateralAmounts.map {
                        $0.asBigUInt!
                    }, collateralAssetSymbols: collateralAssetSymbols.map {
                        $0.asString!
                    }, comet: comet, repayer: repayer, preferAcross: preferAcross, paymentAssetSymbol: paymentAssetSymbol)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct CometSupplyIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string, .uint256, .uint256, .address, .address, .bool, .string])

            public let amount: BigUInt
            public let assetSymbol: String
            public let blockTimestamp: BigUInt
            public let chainId: BigUInt
            public let comet: EthAddress
            public let sender: EthAddress
            public let preferAcross: Bool
            public let paymentAssetSymbol: String

            public init(amount: BigUInt, assetSymbol: String, blockTimestamp: BigUInt, chainId: BigUInt, comet: EthAddress, sender: EthAddress, preferAcross: Bool, paymentAssetSymbol: String) {
                self.amount = amount
                self.assetSymbol = assetSymbol
                self.blockTimestamp = blockTimestamp
                self.chainId = chainId
                self.comet = comet
                self.sender = sender
                self.preferAcross = preferAcross
                self.paymentAssetSymbol = paymentAssetSymbol
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple8(.uint256(amount),
                        .string(assetSymbol),
                        .uint256(blockTimestamp),
                        .uint256(chainId),
                        .address(comet),
                        .address(sender),
                        .bool(preferAcross),
                        .string(paymentAssetSymbol))
            }

            public static func decode(hex: Hex) throws -> CometActionsBuilder.CometSupplyIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> CometActionsBuilder.CometSupplyIntent {
                switch value {
                case let .tuple8(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .uint256(chainId),
                                 .address(comet),
                                 .address(sender),
                                 .bool(preferAcross),
                                 .string(paymentAssetSymbol)):
                    return CometActionsBuilder.CometSupplyIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, chainId: chainId, comet: comet, sender: sender, preferAcross: preferAcross, paymentAssetSymbol: paymentAssetSymbol)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct CometWithdrawIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string, .uint256, .uint256, .address, .address, .bool, .string])

            public let amount: BigUInt
            public let assetSymbol: String
            public let blockTimestamp: BigUInt
            public let chainId: BigUInt
            public let comet: EthAddress
            public let withdrawer: EthAddress
            public let preferAcross: Bool
            public let paymentAssetSymbol: String

            public init(amount: BigUInt, assetSymbol: String, blockTimestamp: BigUInt, chainId: BigUInt, comet: EthAddress, withdrawer: EthAddress, preferAcross: Bool, paymentAssetSymbol: String) {
                self.amount = amount
                self.assetSymbol = assetSymbol
                self.blockTimestamp = blockTimestamp
                self.chainId = chainId
                self.comet = comet
                self.withdrawer = withdrawer
                self.preferAcross = preferAcross
                self.paymentAssetSymbol = paymentAssetSymbol
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple8(.uint256(amount),
                        .string(assetSymbol),
                        .uint256(blockTimestamp),
                        .uint256(chainId),
                        .address(comet),
                        .address(withdrawer),
                        .bool(preferAcross),
                        .string(paymentAssetSymbol))
            }

            public static func decode(hex: Hex) throws -> CometActionsBuilder.CometWithdrawIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> CometActionsBuilder.CometWithdrawIntent {
                switch value {
                case let .tuple8(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .uint256(chainId),
                                 .address(comet),
                                 .address(withdrawer),
                                 .bool(preferAcross),
                                 .string(paymentAssetSymbol)):
                    return CometActionsBuilder.CometWithdrawIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, chainId: chainId, comet: comet, withdrawer: withdrawer, preferAcross: preferAcross, paymentAssetSymbol: paymentAssetSymbol)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum EIP712Helper {
        public struct EIP712Data: Equatable {
            public static let schema: ABI.Schema = .tuple([.bytes32, .bytes32, .bytes32])

            public let digest: Hex
            public let domainSeparator: Hex
            public let hashStruct: Hex

            public init(digest: Hex, domainSeparator: Hex, hashStruct: Hex) {
                self.digest = digest
                self.domainSeparator = domainSeparator
                self.hashStruct = hashStruct
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple3(.bytes32(digest),
                        .bytes32(domainSeparator),
                        .bytes32(hashStruct))
            }

            public static func decode(hex: Hex) throws -> EIP712Helper.EIP712Data {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> EIP712Helper.EIP712Data {
                switch value {
                case let .tuple3(.bytes32(digest),
                                 .bytes32(domainSeparator),
                                 .bytes32(hashStruct)):
                    return EIP712Helper.EIP712Data(digest: digest, domainSeparator: domainSeparator, hashStruct: hashStruct)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum IQuarkWallet {
        public struct QuarkOperation: Equatable {
            public static let schema: ABI.Schema = .tuple([.bytes32, .bool, .address, .array(.bytes), .bytes, .uint256])

            public let nonce: Hex
            public let isReplayable: Bool
            public let scriptAddress: EthAddress
            public let scriptSources: [Hex]
            public let scriptCalldata: Hex
            public let expiry: BigUInt

            public init(nonce: Hex, isReplayable: Bool, scriptAddress: EthAddress, scriptSources: [Hex], scriptCalldata: Hex, expiry: BigUInt) {
                self.nonce = nonce
                self.isReplayable = isReplayable
                self.scriptAddress = scriptAddress
                self.scriptSources = scriptSources
                self.scriptCalldata = scriptCalldata
                self.expiry = expiry
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple6(.bytes32(nonce),
                        .bool(isReplayable),
                        .address(scriptAddress),
                        .array(.bytes, scriptSources.map {
                            .bytes($0)
                        }),
                        .bytes(scriptCalldata),
                        .uint256(expiry))
            }

            public static func decode(hex: Hex) throws -> IQuarkWallet.QuarkOperation {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> IQuarkWallet.QuarkOperation {
                switch value {
                case let .tuple6(.bytes32(nonce),
                                 .bool(isReplayable),
                                 .address(scriptAddress),
                                 .array(.bytes, scriptSources),
                                 .bytes(scriptCalldata),
                                 .uint256(expiry)):
                    return IQuarkWallet.QuarkOperation(nonce: nonce, isReplayable: isReplayable, scriptAddress: scriptAddress, scriptSources: scriptSources.map {
                        $0.asHex!
                    }, scriptCalldata: scriptCalldata, expiry: expiry)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum MorphoActionsBuilder {
        public struct MorphoBorrowIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string, .uint256, .address, .uint256, .uint256, .string, .bool])

            public let amount: BigUInt
            public let assetSymbol: String
            public let blockTimestamp: BigUInt
            public let borrower: EthAddress
            public let chainId: BigUInt
            public let collateralAmount: BigUInt
            public let collateralAssetSymbol: String
            public let preferAcross: Bool

            public init(amount: BigUInt, assetSymbol: String, blockTimestamp: BigUInt, borrower: EthAddress, chainId: BigUInt, collateralAmount: BigUInt, collateralAssetSymbol: String, preferAcross: Bool) {
                self.amount = amount
                self.assetSymbol = assetSymbol
                self.blockTimestamp = blockTimestamp
                self.borrower = borrower
                self.chainId = chainId
                self.collateralAmount = collateralAmount
                self.collateralAssetSymbol = collateralAssetSymbol
                self.preferAcross = preferAcross
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple8(.uint256(amount),
                        .string(assetSymbol),
                        .uint256(blockTimestamp),
                        .address(borrower),
                        .uint256(chainId),
                        .uint256(collateralAmount),
                        .string(collateralAssetSymbol),
                        .bool(preferAcross))
            }

            public static func decode(hex: Hex) throws -> MorphoActionsBuilder.MorphoBorrowIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> MorphoActionsBuilder.MorphoBorrowIntent {
                switch value {
                case let .tuple8(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .address(borrower),
                                 .uint256(chainId),
                                 .uint256(collateralAmount),
                                 .string(collateralAssetSymbol),
                                 .bool(preferAcross)):
                    return MorphoActionsBuilder.MorphoBorrowIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, borrower: borrower, chainId: chainId, collateralAmount: collateralAmount, collateralAssetSymbol: collateralAssetSymbol, preferAcross: preferAcross)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct MorphoRepayIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string, .uint256, .address, .uint256, .uint256, .string, .bool])

            public let amount: BigUInt
            public let assetSymbol: String
            public let blockTimestamp: BigUInt
            public let repayer: EthAddress
            public let chainId: BigUInt
            public let collateralAmount: BigUInt
            public let collateralAssetSymbol: String
            public let preferAcross: Bool

            public init(amount: BigUInt, assetSymbol: String, blockTimestamp: BigUInt, repayer: EthAddress, chainId: BigUInt, collateralAmount: BigUInt, collateralAssetSymbol: String, preferAcross: Bool) {
                self.amount = amount
                self.assetSymbol = assetSymbol
                self.blockTimestamp = blockTimestamp
                self.repayer = repayer
                self.chainId = chainId
                self.collateralAmount = collateralAmount
                self.collateralAssetSymbol = collateralAssetSymbol
                self.preferAcross = preferAcross
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple8(.uint256(amount),
                        .string(assetSymbol),
                        .uint256(blockTimestamp),
                        .address(repayer),
                        .uint256(chainId),
                        .uint256(collateralAmount),
                        .string(collateralAssetSymbol),
                        .bool(preferAcross))
            }

            public static func decode(hex: Hex) throws -> MorphoActionsBuilder.MorphoRepayIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> MorphoActionsBuilder.MorphoRepayIntent {
                switch value {
                case let .tuple8(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .address(repayer),
                                 .uint256(chainId),
                                 .uint256(collateralAmount),
                                 .string(collateralAssetSymbol),
                                 .bool(preferAcross)):
                    return MorphoActionsBuilder.MorphoRepayIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, repayer: repayer, chainId: chainId, collateralAmount: collateralAmount, collateralAssetSymbol: collateralAssetSymbol, preferAcross: preferAcross)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct MorphoRewardsClaimIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .address, .uint256, .array(.address), .array(.uint256), .array(.address), .array(.address), .array(.bytes32), .bool])

            public let blockTimestamp: BigUInt
            public let claimer: EthAddress
            public let chainId: BigUInt
            public let accounts: [EthAddress]
            public let claimables: [BigUInt]
            public let distributors: [EthAddress]
            public let rewards: [EthAddress]
            public let proofs: [Hex]
            public let preferAcross: Bool

            public init(blockTimestamp: BigUInt, claimer: EthAddress, chainId: BigUInt, accounts: [EthAddress], claimables: [BigUInt], distributors: [EthAddress], rewards: [EthAddress], proofs: [Hex], preferAcross: Bool) {
                self.blockTimestamp = blockTimestamp
                self.claimer = claimer
                self.chainId = chainId
                self.accounts = accounts
                self.claimables = claimables
                self.distributors = distributors
                self.rewards = rewards
                self.proofs = proofs
                self.preferAcross = preferAcross
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple9(.uint256(blockTimestamp),
                        .address(claimer),
                        .uint256(chainId),
                        .array(.address, accounts.map {
                            .address($0)
                        }),
                        .array(.uint256, claimables.map {
                            .uint256($0)
                        }),
                        .array(.address, distributors.map {
                            .address($0)
                        }),
                        .array(.address, rewards.map {
                            .address($0)
                        }),
                        .array(.bytes32, proofs.map {
                            .bytes32($0)
                        }),
                        .bool(preferAcross))
            }

            public static func decode(hex: Hex) throws -> MorphoActionsBuilder.MorphoRewardsClaimIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> MorphoActionsBuilder.MorphoRewardsClaimIntent {
                switch value {
                case let .tuple9(.uint256(blockTimestamp),
                                 .address(claimer),
                                 .uint256(chainId),
                                 .array(.address, accounts),
                                 .array(.uint256, claimables),
                                 .array(.address, distributors),
                                 .array(.address, rewards),
                                 .array(.bytes32, proofs),
                                 .bool(preferAcross)):
                    return MorphoActionsBuilder.MorphoRewardsClaimIntent(blockTimestamp: blockTimestamp, claimer: claimer, chainId: chainId, accounts: accounts.map {
                        $0.asEthAddress!
                    }, claimables: claimables.map {
                        $0.asBigUInt!
                    }, distributors: distributors.map {
                        $0.asEthAddress!
                    }, rewards: rewards.map {
                        $0.asEthAddress!
                    }, proofs: proofs.map {
                        $0.asHex!
                    }, preferAcross: preferAcross)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum MorphoVaultActionsBuilder {
        public struct MorphoVaultSupplyIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string, .uint256, .address, .uint256, .bool])

            public let amount: BigUInt
            public let assetSymbol: String
            public let blockTimestamp: BigUInt
            public let sender: EthAddress
            public let chainId: BigUInt
            public let preferAcross: Bool

            public init(amount: BigUInt, assetSymbol: String, blockTimestamp: BigUInt, sender: EthAddress, chainId: BigUInt, preferAcross: Bool) {
                self.amount = amount
                self.assetSymbol = assetSymbol
                self.blockTimestamp = blockTimestamp
                self.sender = sender
                self.chainId = chainId
                self.preferAcross = preferAcross
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple6(.uint256(amount),
                        .string(assetSymbol),
                        .uint256(blockTimestamp),
                        .address(sender),
                        .uint256(chainId),
                        .bool(preferAcross))
            }

            public static func decode(hex: Hex) throws -> MorphoVaultActionsBuilder.MorphoVaultSupplyIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> MorphoVaultActionsBuilder.MorphoVaultSupplyIntent {
                switch value {
                case let .tuple6(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .address(sender),
                                 .uint256(chainId),
                                 .bool(preferAcross)):
                    return MorphoVaultActionsBuilder.MorphoVaultSupplyIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, sender: sender, chainId: chainId, preferAcross: preferAcross)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct MorphoVaultWithdrawIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string, .uint256, .uint256, .address, .bool])

            public let amount: BigUInt
            public let assetSymbol: String
            public let blockTimestamp: BigUInt
            public let chainId: BigUInt
            public let withdrawer: EthAddress
            public let preferAcross: Bool

            public init(amount: BigUInt, assetSymbol: String, blockTimestamp: BigUInt, chainId: BigUInt, withdrawer: EthAddress, preferAcross: Bool) {
                self.amount = amount
                self.assetSymbol = assetSymbol
                self.blockTimestamp = blockTimestamp
                self.chainId = chainId
                self.withdrawer = withdrawer
                self.preferAcross = preferAcross
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple6(.uint256(amount),
                        .string(assetSymbol),
                        .uint256(blockTimestamp),
                        .uint256(chainId),
                        .address(withdrawer),
                        .bool(preferAcross))
            }

            public static func decode(hex: Hex) throws -> MorphoVaultActionsBuilder.MorphoVaultWithdrawIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> MorphoVaultActionsBuilder.MorphoVaultWithdrawIntent {
                switch value {
                case let .tuple6(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .uint256(chainId),
                                 .address(withdrawer),
                                 .bool(preferAcross)):
                    return MorphoVaultActionsBuilder.MorphoVaultWithdrawIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, chainId: chainId, withdrawer: withdrawer, preferAcross: preferAcross)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum PaymentInfo {
        public struct Payment: Equatable {
            public static let schema: ABI.Schema = .tuple([.bool, .string, .bytes32, .array(PaymentInfo.PaymentMaxCost.schema)])

            public let isToken: Bool
            public let currency: String
            public let quoteId: Hex
            public let maxCosts: [PaymentInfo.PaymentMaxCost]

            public init(isToken: Bool, currency: String, quoteId: Hex, maxCosts: [PaymentInfo.PaymentMaxCost]) {
                self.isToken = isToken
                self.currency = currency
                self.quoteId = quoteId
                self.maxCosts = maxCosts
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple4(.bool(isToken),
                        .string(currency),
                        .bytes32(quoteId),
                        .array(PaymentInfo.PaymentMaxCost.schema, maxCosts.map {
                            $0.asValue
                        }))
            }

            public static func decode(hex: Hex) throws -> PaymentInfo.Payment {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> PaymentInfo.Payment {
                switch value {
                case let .tuple4(.bool(isToken),
                                 .string(currency),
                                 .bytes32(quoteId),
                                 .array(PaymentInfo.PaymentMaxCost.schema, maxCosts)):
                    return try PaymentInfo.Payment(isToken: isToken, currency: currency, quoteId: quoteId, maxCosts: maxCosts.map {
                        try PaymentInfo.PaymentMaxCost.decodeValue($0)
                    })
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct PaymentMaxCost: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .uint256])

            public let chainId: BigUInt
            public let amount: BigUInt

            public init(chainId: BigUInt, amount: BigUInt) {
                self.chainId = chainId
                self.amount = amount
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple2(.uint256(chainId),
                        .uint256(amount))
            }

            public static func decode(hex: Hex) throws -> PaymentInfo.PaymentMaxCost {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> PaymentInfo.PaymentMaxCost {
                switch value {
                case let .tuple2(.uint256(chainId),
                                 .uint256(amount)):
                    return PaymentInfo.PaymentMaxCost(chainId: chainId, amount: amount)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum QuarkBuilderBase {
        public struct BuilderResult: Equatable {
            public static let schema: ABI.Schema = .tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])

            public let version: String
            public let quarkOperations: [IQuarkWallet.QuarkOperation]
            public let actions: [Actions.Action]
            public let eip712Data: EIP712Helper.EIP712Data
            public let paymentCurrency: String

            public init(version: String, quarkOperations: [IQuarkWallet.QuarkOperation], actions: [Actions.Action], eip712Data: EIP712Helper.EIP712Data, paymentCurrency: String) {
                self.version = version
                self.quarkOperations = quarkOperations
                self.actions = actions
                self.eip712Data = eip712Data
                self.paymentCurrency = paymentCurrency
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple5(.string(version),
                        .array(IQuarkWallet.QuarkOperation.schema, quarkOperations.map {
                            $0.asValue
                        }),
                        .array(Actions.Action.schema, actions.map {
                            $0.asValue
                        }),
                        eip712Data.asValue,
                        .string(paymentCurrency))
            }

            public static func decode(hex: Hex) throws -> QuarkBuilderBase.BuilderResult {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> QuarkBuilderBase.BuilderResult {
                switch value {
                case let .tuple5(.string(version),
                                 .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                 .array(Actions.Action.schema, actions),
                                 eip712Data,
                                 .string(paymentCurrency)):
                    return try QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                        try IQuarkWallet.QuarkOperation.decodeValue($0)
                    }, actions: actions.map {
                        try Actions.Action.decodeValue($0)
                    }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum Quotes {
        public struct AssetQuote: Equatable {
            public static let schema: ABI.Schema = .tuple([.string, .uint256])

            public let symbol: String
            public let price: BigUInt

            public init(symbol: String, price: BigUInt) {
                self.symbol = symbol
                self.price = price
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple2(.string(symbol),
                        .uint256(price))
            }

            public static func decode(hex: Hex) throws -> Quotes.AssetQuote {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Quotes.AssetQuote {
                switch value {
                case let .tuple2(.string(symbol),
                                 .uint256(price)):
                    return Quotes.AssetQuote(symbol: symbol, price: price)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct NetworkOperationFee: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string, .uint256])

            public let chainId: BigUInt
            public let opType: String
            public let price: BigUInt

            public init(chainId: BigUInt, opType: String, price: BigUInt) {
                self.chainId = chainId
                self.opType = opType
                self.price = price
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple3(.uint256(chainId),
                        .string(opType),
                        .uint256(price))
            }

            public static func decode(hex: Hex) throws -> Quotes.NetworkOperationFee {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Quotes.NetworkOperationFee {
                switch value {
                case let .tuple3(.uint256(chainId),
                                 .string(opType),
                                 .uint256(price)):
                    return Quotes.NetworkOperationFee(chainId: chainId, opType: opType, price: price)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct Quote: Equatable {
            public static let schema: ABI.Schema = .tuple([.bytes32, .uint256, .uint256, .array(Quotes.AssetQuote.schema), .array(Quotes.NetworkOperationFee.schema)])

            public let quoteId: Hex
            public let issuedAt: BigUInt
            public let expiresAt: BigUInt
            public let assetQuotes: [Quotes.AssetQuote]
            public let networkOperationFees: [Quotes.NetworkOperationFee]

            public init(quoteId: Hex, issuedAt: BigUInt, expiresAt: BigUInt, assetQuotes: [Quotes.AssetQuote], networkOperationFees: [Quotes.NetworkOperationFee]) {
                self.quoteId = quoteId
                self.issuedAt = issuedAt
                self.expiresAt = expiresAt
                self.assetQuotes = assetQuotes
                self.networkOperationFees = networkOperationFees
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple5(.bytes32(quoteId),
                        .uint256(issuedAt),
                        .uint256(expiresAt),
                        .array(Quotes.AssetQuote.schema, assetQuotes.map {
                            $0.asValue
                        }),
                        .array(Quotes.NetworkOperationFee.schema, networkOperationFees.map {
                            $0.asValue
                        }))
            }

            public static func decode(hex: Hex) throws -> Quotes.Quote {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> Quotes.Quote {
                switch value {
                case let .tuple5(.bytes32(quoteId),
                                 .uint256(issuedAt),
                                 .uint256(expiresAt),
                                 .array(Quotes.AssetQuote.schema, assetQuotes),
                                 .array(Quotes.NetworkOperationFee.schema, networkOperationFees)):
                    return try Quotes.Quote(quoteId: quoteId, issuedAt: issuedAt, expiresAt: expiresAt, assetQuotes: assetQuotes.map {
                        try Quotes.AssetQuote.decodeValue($0)
                    }, networkOperationFees: networkOperationFees.map {
                        try Quotes.NetworkOperationFee.decodeValue($0)
                    })
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum SwapActionsBuilder {
        public struct RecurringSwapIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .address, .uint256, .address, .uint256, .bool, .bytes, .uint256, .address, .uint256, .bool])

            public let chainId: BigUInt
            public let sellToken: EthAddress
            public let sellAmount: BigUInt
            public let buyToken: EthAddress
            public let buyAmount: BigUInt
            public let isExactOut: Bool
            public let path: Hex
            public let interval: BigUInt
            public let sender: EthAddress
            public let blockTimestamp: BigUInt
            public let preferAcross: Bool

            public init(chainId: BigUInt, sellToken: EthAddress, sellAmount: BigUInt, buyToken: EthAddress, buyAmount: BigUInt, isExactOut: Bool, path: Hex, interval: BigUInt, sender: EthAddress, blockTimestamp: BigUInt, preferAcross: Bool) {
                self.chainId = chainId
                self.sellToken = sellToken
                self.sellAmount = sellAmount
                self.buyToken = buyToken
                self.buyAmount = buyAmount
                self.isExactOut = isExactOut
                self.path = path
                self.interval = interval
                self.sender = sender
                self.blockTimestamp = blockTimestamp
                self.preferAcross = preferAcross
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple11(.uint256(chainId),
                         .address(sellToken),
                         .uint256(sellAmount),
                         .address(buyToken),
                         .uint256(buyAmount),
                         .bool(isExactOut),
                         .bytes(path),
                         .uint256(interval),
                         .address(sender),
                         .uint256(blockTimestamp),
                         .bool(preferAcross))
            }

            public static func decode(hex: Hex) throws -> SwapActionsBuilder.RecurringSwapIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> SwapActionsBuilder.RecurringSwapIntent {
                switch value {
                case let .tuple11(.uint256(chainId),
                                  .address(sellToken),
                                  .uint256(sellAmount),
                                  .address(buyToken),
                                  .uint256(buyAmount),
                                  .bool(isExactOut),
                                  .bytes(path),
                                  .uint256(interval),
                                  .address(sender),
                                  .uint256(blockTimestamp),
                                  .bool(preferAcross)):
                    return SwapActionsBuilder.RecurringSwapIntent(chainId: chainId, sellToken: sellToken, sellAmount: sellAmount, buyToken: buyToken, buyAmount: buyAmount, isExactOut: isExactOut, path: path, interval: interval, sender: sender, blockTimestamp: blockTimestamp, preferAcross: preferAcross)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }

        public struct ZeroExSwapIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .address, .bytes, .address, .uint256, .address, .uint256, .address, .uint256, .address, .bool, .uint256, .bool])

            public let chainId: BigUInt
            public let entryPoint: EthAddress
            public let swapData: Hex
            public let sellToken: EthAddress
            public let sellAmount: BigUInt
            public let buyToken: EthAddress
            public let buyAmount: BigUInt
            public let feeToken: EthAddress
            public let feeAmount: BigUInt
            public let sender: EthAddress
            public let isExactOut: Bool
            public let blockTimestamp: BigUInt
            public let preferAcross: Bool

            public init(chainId: BigUInt, entryPoint: EthAddress, swapData: Hex, sellToken: EthAddress, sellAmount: BigUInt, buyToken: EthAddress, buyAmount: BigUInt, feeToken: EthAddress, feeAmount: BigUInt, sender: EthAddress, isExactOut: Bool, blockTimestamp: BigUInt, preferAcross: Bool) {
                self.chainId = chainId
                self.entryPoint = entryPoint
                self.swapData = swapData
                self.sellToken = sellToken
                self.sellAmount = sellAmount
                self.buyToken = buyToken
                self.buyAmount = buyAmount
                self.feeToken = feeToken
                self.feeAmount = feeAmount
                self.sender = sender
                self.isExactOut = isExactOut
                self.blockTimestamp = blockTimestamp
                self.preferAcross = preferAcross
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple13(.uint256(chainId),
                         .address(entryPoint),
                         .bytes(swapData),
                         .address(sellToken),
                         .uint256(sellAmount),
                         .address(buyToken),
                         .uint256(buyAmount),
                         .address(feeToken),
                         .uint256(feeAmount),
                         .address(sender),
                         .bool(isExactOut),
                         .uint256(blockTimestamp),
                         .bool(preferAcross))
            }

            public static func decode(hex: Hex) throws -> SwapActionsBuilder.ZeroExSwapIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> SwapActionsBuilder.ZeroExSwapIntent {
                switch value {
                case let .tuple13(.uint256(chainId),
                                  .address(entryPoint),
                                  .bytes(swapData),
                                  .address(sellToken),
                                  .uint256(sellAmount),
                                  .address(buyToken),
                                  .uint256(buyAmount),
                                  .address(feeToken),
                                  .uint256(feeAmount),
                                  .address(sender),
                                  .bool(isExactOut),
                                  .uint256(blockTimestamp),
                                  .bool(preferAcross)):
                    return try SwapActionsBuilder.ZeroExSwapIntent(chainId: chainId, entryPoint: entryPoint, swapData: swapData, sellToken: sellToken, sellAmount: sellAmount, buyToken: buyToken, buyAmount: buyAmount, feeToken: feeToken, feeAmount: feeAmount, sender: sender, isExactOut: isExactOut, blockTimestamp: blockTimestamp, preferAcross: preferAcross)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public enum TransferActionsBuilder {
        public struct TransferIntent: Equatable {
            public static let schema: ABI.Schema = .tuple([.uint256, .string, .uint256, .address, .address, .uint256, .bool, .string])

            public let chainId: BigUInt
            public let assetSymbol: String
            public let amount: BigUInt
            public let sender: EthAddress
            public let recipient: EthAddress
            public let blockTimestamp: BigUInt
            public let preferAcross: Bool
            public let paymentAssetSymbol: String

            public init(chainId: BigUInt, assetSymbol: String, amount: BigUInt, sender: EthAddress, recipient: EthAddress, blockTimestamp: BigUInt, preferAcross: Bool, paymentAssetSymbol: String) {
                self.chainId = chainId
                self.assetSymbol = assetSymbol
                self.amount = amount
                self.sender = sender
                self.recipient = recipient
                self.blockTimestamp = blockTimestamp
                self.preferAcross = preferAcross
                self.paymentAssetSymbol = paymentAssetSymbol
            }

            public var encoded: Hex {
                asValue.encoded
            }

            public var asValue: ABI.Value {
                .tuple8(.uint256(chainId),
                        .string(assetSymbol),
                        .uint256(amount),
                        .address(sender),
                        .address(recipient),
                        .uint256(blockTimestamp),
                        .bool(preferAcross),
                        .string(paymentAssetSymbol))
            }

            public static func decode(hex: Hex) throws -> TransferActionsBuilder.TransferIntent {
                if let value = try? schema.decode(hex) {
                    return try decodeValue(value)
                }
                // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
                if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                    return try decodeValue(wrappedValue)
                }
                // retry original to throw the error
                return try decodeValue(schema.decode(hex))
            }

            public static func decodeValue(_ value: ABI.Value) throws -> TransferActionsBuilder.TransferIntent {
                switch value {
                case let .tuple8(.uint256(chainId),
                                 .string(assetSymbol),
                                 .uint256(amount),
                                 .address(sender),
                                 .address(recipient),
                                 .uint256(blockTimestamp),
                                 .bool(preferAcross),
                                 .string(paymentAssetSymbol)):
                    return TransferActionsBuilder.TransferIntent(chainId: chainId, assetSymbol: assetSymbol, amount: amount, sender: sender, recipient: recipient, blockTimestamp: blockTimestamp, preferAcross: preferAcross, paymentAssetSymbol: paymentAssetSymbol)
                default:
                    throw ABI.DecodeError.mismatchedType(value.schema, schema)
                }
            }
        }
    }

    public static let creationCode: Hex = ""
    public static let runtimeCode: Hex = "0x610580604052600436101562000013575f80fd5b5f3560e01c80630ba1ce761462005c5c57806315d3731514620051eb57806320caafca1462004a455780633711435c1462004a0b57806370309f011462003c6a5780638e263a1514620033f0578063989d15a81462002e9e578063b0d0c817146200285e578063b2bd80b0146200232b578063b83ed30c1462001ce4578063c2cdba081462000ee4578063f3faeec71462000843578063f52d4448146200011e5763ffa1ad7414620000c3575f80fd5b346200011a575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200011a57620001166200010162007dc3565b6040519182916020835260208301906200762c565b0390f35b5f80fd5b346200011a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200011a5760043567ffffffffffffffff81116200011a5760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126200011a57604051906200019e8262006446565b80600401358252602481013567ffffffffffffffff81116200011a576200020691620001d360a4926004369184010162006607565b60208501526044810135604085015260648101356060850152620001fa6084820162006651565b60808501520162006673565b60a082015260243567ffffffffffffffff81116200011a576200022e903690600401620067d8565b6044359167ffffffffffffffff83116200011a57620002546020933690600401620079ba565b916200025f62007e20565b508151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83146200080a575b84810151918151604083015160608401519073ffffffffffffffffffffffffffffffffffffffff6080860151169260405196620002c98862006446565b8588528a88015260408701526060860152608085015260a0840152620002ee62008066565b50620002f962008099565b506040938451926200030c86856200658a565b60018452620003407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0870189860162007fec565b848661071895620004988b88018351986200035c828b6200658a565b808a5262018a0b99818f8c90830139620003768562007f00565b52620003828462007f00565b50620003d26200039960808801518851906200b055565b8f73ffffffffffffffffffffffffffffffffffffffff60a0620003c4838c01518b860151906200b0a4565b9a015116910151906200b273565b9d8e620004798d6200044c6040620003f3608084015187850151906200e5d9565b9201519951998a927ff3fef3a30000000000000000000000000000000000000000000000000000000087850152602484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018952886200658a565b0151996200048a8d5193846200658a565b81835260208301396200b331565b9160608901519162093a8083018311620007dd5773ffffffffffffffffffffffffffffffffffffffff62093a80948c519a620004d48c62006446565b8b525f60208c0152168b8a0152606089015260808801520160a086015260408601519060208101519073ffffffffffffffffffffffffffffffffffffffff60808901516200052760208b0151826200e5d9565b90826060850151945116948c5196620005408862006446565b875260208701528b860152166060840152608083015260a0820152620005a473ffffffffffffffffffffffffffffffffffffffff60a060808901519801511691620005d16200058e6200aec8565b918a519384916020808401528c8301906200aa71565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018452836200658a565b6020620005de8b6200b3c2565b9b015192895198620005f08a6200640b565b895260208901528888015260608701526020988751620006118b826200658a565b5f8152608088015260a087015260c0860152600160e08601526200063462007e55565b508551916200064487846200658a565b600183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08701368a8501376200067b8362007f00565b5285516200068a87826200658a565b60018152620006be7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe088018a830162007fec565b6020820151620006ce8262007f00565b52620006da8162007f00565b50865190620006ea8a836200658a565b5f82525f368137875193620007008b866200658a565b5f855283620001169b989693620007929896938b9373ffffffffffffffffffffffffffffffffffffffff60808f990151169560408501519360a060608701519601511515965197620007528962006463565b88528d8801528d8701526060860152608085015260a084015260c08301525f60e08301526001610100830152600161012083015261014082015262008857565b82620007a093929362007dc3565b95015192620007b082826200a4cc565b92855196620007bf8862006481565b875286015283850152606084015260808301525191829182620077f5565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b91506200083c60608301518584015173ffffffffffffffffffffffffffffffffffffffff60808601511691846200adfa565b916200028c565b346200011a57620008543662007c89565b91906200086062007e20565b50602082015191805192608082015173ffffffffffffffffffffffffffffffffffffffff6060840151169060408401519160a08501519260c08601519460405198620008ac8a6200640b565b895260208901526040880152606087015284608087015260a086015260c085015260e0840152620008dc62008066565b50620008e762008099565b506040928351620008f985826200658a565b600181526200092e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086016020830162007fec565b84516200094160206110b801826200658a565b6110b881526110b862016eea60208301396200095d8262007f00565b52620009698162007f00565b506200097f60a08301516080840151906200b055565b90620009ab73ffffffffffffffffffffffffffffffffffffffff6060850151166020840151906200b273565b94620009d5620009c68860208701519501948551906200b0a4565b9360e08601519051906200b0a4565b620009e460a08601516200cfe3565b62000a7162000a0260a088015160e089015160208a0151916200d0a5565b9162000a4460c08901518951908d519586947fa927d433000000000000000000000000000000000000000000000000000000006020870152602486016200ab63565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826200658a565b60208801519462000aa58a5162000a8e60206110b801826200658a565b6110b881526110b862016eea60208301396200b331565b9160408801519062093a8082018211620007dd578c968c9485519962000acb8b62006446565b8a5260208a015f905273ffffffffffffffffffffffffffffffffffffffff16858a01526060890152608088015262093a800160a087015260208701518780519460a08201519060c0830151916060820151915173ffffffffffffffffffffffffffffffffffffffff169260e0850151916060880151975173ffffffffffffffffffffffffffffffffffffffff169862000b64826200cfe3565b9660a08101519060e081015190602001519062000b81926200d0a5565b62000b8c906200e536565b9781519b62000b9b8d62006463565b8c5260208c01528a01526060890152608088015260a087015260c086015273ffffffffffffffffffffffffffffffffffffffff1660e085015261010084015261012083015261014082015260a0850151946060015173ffffffffffffffffffffffffffffffffffffffff169062000c116200adbd565b8951809260208201602090528b820162000c2b916200ac5c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835262000c5d90836200658a565b62000c68856200b3c2565b9860200151928a519762000c7c896200640b565b88526020880152898701526060860152602096885162000c9d89826200658a565b5f8152608087015260a086015260c0850152600160e085015262000cc062007e55565b50865162000ccf88826200658a565b600181527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08801368883013760a086015162000d0b8262007f00565b5287519562000d1b89886200658a565b6001875262000d4f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a0189890162007fec565b60c081015162000d5f8862007f00565b5262000d6b8762007f00565b5088519662000d7b8a896200658a565b600188527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a01368a8a0137815162000db48962007f00565b52895162000dc38b826200658a565b6001815262000df77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08c018b830162007fec565b602083015162000e078262007f00565b5262000e138162007f00565b50606083015173ffffffffffffffffffffffffffffffffffffffff169860408401519260808501519460e001511515958d519b62000e518d62006463565b8c528c8c01528c8b015260608a0152608089015260a088015260c08701525f60e08701526001610100870181905261012087015261014086015262000e969462008857565b8262000ea493929362007dc3565b9501519262000eb482826200a4cc565b9285519662000ec38862006481565b875286015283850152606084015260808301525162000116819282620077f5565b346200011a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200011a5760043567ffffffffffffffff81116200011a576101a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126200011a576040516101005262000f6b61010051620064da565b8060040135610100515262000f836024820162006651565b6020610100510152604481013567ffffffffffffffff81116200011a57620010719162000fba610184926004369184010162006607565b604061010051015262000fd06064820162006651565b60606101005101526084810135608061010051015262000ff360a4820162006651565b60a061010051015260c481013560c06101005101526200101660e4820162006651565b60e0610100510152610104810135610100805101526200103a610124820162006651565b61012061010051015262001052610144820162006673565b6101406101005101526101648101356101606101005101520162006673565b61018061010051015260243567ffffffffffffffff81116200011a576200109d903690600401620067d8565b60443567ffffffffffffffff81116200011a57620010c0903690600401620079ba565b908061014052620010d062007e20565b5081805162001ccd575b5050620010e662008066565b50620010f162008099565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608061010051015114908162001c67575b73ffffffffffffffffffffffffffffffffffffffff60206101005101511661016052604061010051015173ffffffffffffffffffffffffffffffffffffffff60606101005101511660206200119c6040620011936101005151620011876200a6f0565b5061014051906200b055565b0151836200c919565b0151608061010051015173ffffffffffffffffffffffffffffffffffffffff60a0610100510151166020620011df6040620011936101005151620011876200a6f0565b015160c061010051015173ffffffffffffffffffffffffffffffffffffffff60e0610100510151169060206200122c6040620012236101005151620011876200a6f0565b0151846200c919565b015192610100805101519461010051519673ffffffffffffffffffffffffffffffffffffffff610120610100510151169861014061010051015115159a6101606101005101519c60405161012052610200610120510161012051811067ffffffffffffffff82111762001c3a5760405261014051610120515261016051602061012051015260406101205101526060610120510152608061012051015260a061012051015260c061012051015260e0610120510152610100610120510152610120805101526101406101205101526101606101205101526101806101205101526101a06101205101526101c06101205101526101e06101205101526200133162008066565b506200133c62008099565b506040805160805262001352816080516200658a565b6001608051526200138b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0820160206080510162007fec565b80516200139e602061080d01826200658a565b61080d815261080d620191236020830139620013bc60805162007f00565b52620013ca60805162007f00565b50620013d562008117565b505f6101a08251620013e78162006532565b8281528260208201526060848201528260608201528260808201528260a0820152606060c08201528260e08201528261010082015282610120820152606061014082015282610160820152826101808201520152620014546101806101205101516101205151906200b055565b6200146b608061012051015183830151906200b0a4565b6200148260e061012051015184840151906200b0a4565b620014ca6200149e61014061012051015186860151906200b0a4565b93602073ffffffffffffffffffffffffffffffffffffffff6101a061012051015116910151906200b273565b60c0526101806101205101519261016061012051015160e05261014061012051015192606073ffffffffffffffffffffffffffffffffffffffff61012080510151169201519060a0610120510151906080610120510151606073ffffffffffffffffffffffffffffffffffffffff8161012051015116920151926101006101205101519460e061012051015196606073ffffffffffffffffffffffffffffffffffffffff60c061012051015116990151996101c061012051015115159b8d5160a0526200159960a05162006532565b60a0515260e051602060a05101528c60a0510152606060a0510152608060a051015260a08051015260c060a051015260e060a051015261010060a051015261012060a051015261014060a051015261016060a051015261018060a05101526101a060a051015273ffffffffffffffffffffffffffffffffffffffff602061012051015116926200170173ffffffffffffffffffffffffffffffffffffffff60606101205101511694620016d460a061012051015173ffffffffffffffffffffffffffffffffffffffff60c0610120510151166101006101205101519060406101205101519288519a8b967f9bc2f509000000000000000000000000000000000000000000000000000000006020890152602488015260448701526064860152608485015260a484015260c060c484015260e48301906200762c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018652856200658a565b602060c05101519362001737835162001720602061080d01826200658a565b61080d815261080d6201912360208301396200b331565b946101e0610120510151956203f48087018711620007dd576200011696620007929373ffffffffffffffffffffffffffffffffffffffff6203f48093885195620017818762006446565b86525f60208701521687850152608051606085015260808401520160a0820152610180610120510151908573ffffffffffffffffffffffffffffffffffffffff6101a06101205101511694620017d66200ad80565b95875160208082015260a0515189820152602060a051015160608201526200197681620019076200188f6200181e8d60a05101516101c060808601526102008501906200762c565b73ffffffffffffffffffffffffffffffffffffffff606060a05101511660a0850152608060a051015160c085015260a08051015160e085015260c060a05101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858303016101008601526200762c565b73ffffffffffffffffffffffffffffffffffffffff60e060a05101511661012084015261010060a051015161014084015261012060a051015161016084015261014060a05101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0848303016101808501526200762c565b73ffffffffffffffffffffffffffffffffffffffff61016060a0510151166101a083015261018060a05101516101c08301526101a060a051015115156101e0830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826200658a565b6200198283856200b4f8565b97602060c0510151928a519762001999896200640b565b885260208801528987015260608601526020968851620019ba89826200658a565b5f8152608087015260a086015260c0850152600160e0850152620019dd62007e55565b5086805191620019ee82846200658a565b600183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082013689850137608061010051015162001a2d8462007f00565b5281519262001a3d83856200658a565b6001845262001a717fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084018a860162007fec565b8862001ab173ffffffffffffffffffffffffffffffffffffffff6060610100510151168562001aa86101005151620011876200a6f0565b0151906200c919565b015162001abe8562007f00565b5262001aca8462007f00565b5082519362001ada84866200658a565b600185527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08401368b87013760c061010051015162001b198662007f00565b52835162001b2885826200658a565b6001815262001b5c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086018c830162007fec565b8a62001b9373ffffffffffffffffffffffffffffffffffffffff60a0610100510151168762001aa86101005151620011876200a6f0565b015162001ba08262007f00565b5262001bac8162007f00565b5073ffffffffffffffffffffffffffffffffffffffff610120610100510151169561016061010051015192610100515194610180610100510151151597519862001bf68a62006463565b89528d8901528d8801526060870152608086015260a085015260c084015260e083015260016101008301526001610120830152610140820152610140519062008857565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b62001cbf8173ffffffffffffffffffffffffffffffffffffffff606061010051015116602062001cb761010051519262001ca06200a6f0565b50604062001aa8610140519561014051906200b055565b015162008605565b608061010051015262001124565b62001cd89162008525565b610140528181620010da565b346200011a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200011a5760043567ffffffffffffffff81116200011a5760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126200011a576040519062001d648262006446565b80600401358252602481013567ffffffffffffffff81116200011a5762001dcc9162001d9960a4926004369184010162006607565b60208501526044810135604085015262001db66064820162006651565b6060850152608481013560808501520162006673565b60a082015260243567ffffffffffffffff81116200011a5762001df4903690600401620067d8565b60443567ffffffffffffffff81116200011a5762001e17903690600401620079ba565b90818162001e2462007e20565b50815162002317575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8351149283620022fe575b60208101519080516040820151608083015190606084015173ffffffffffffffffffffffffffffffffffffffff16926040519562001e998762006446565b878752602087015260408601526060850152608084015260a083015262001ebf62008066565b5062001eca62008099565b5060409283519562001edd85886200658a565b6001875262001f127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086016020890162007fec565b61071892602084019786519462001f2a8a876200658a565b80865262018a0b958187602083013962001f448362007f00565b5262001f508262007f00565b506080870151875162001f63916200b055565b9160208801518984015162001f78916200b0a4565b9260a089015173ffffffffffffffffffffffffffffffffffffffff16906020015162001fa4916200b273565b9a608089015160208a015162001fba916200e5d9565b845160408b01518c517f8340f54900000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9384166024820152929091166044830152606480830191909152815292620020286084856200658a565b60208d0151988b51926200203d90846200658a565b818352602083013962002050906200b331565b9160608901519162093a8083018311620007dd5773ffffffffffffffffffffffffffffffffffffffff62093a80948c519a6200208c8c62006446565b8b525f60208c0152168b8a0152606089015260808801520160a086015260408601519060208101519073ffffffffffffffffffffffffffffffffffffffff6080890151620020df60208b0151826200e5d9565b90826060850151945116948c5196620020f88862006446565b875260208701528b860152166060840152608083015260a0820152620005a473ffffffffffffffffffffffffffffffffffffffff60a060808901519801511691620021466200058e6200ad43565b602062002154868c6200b4f8565b9b015192895198620021668a6200640b565b895260208901528888015260608701526020988751620021878b826200658a565b5f8152608088015260a087015260c0860152600160e08601528551620021ae87826200658a565b600181527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08701368a8301378151620021e78262007f00565b528651620021f688826200658a565b600181526200222a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe089018b830162007fec565b60208301516200223a8262007f00565b52620022468162007f00565b508751620022558b826200658a565b5f81525f3681378851916200226b8c846200658a565b5f835294848c9997948b94620001169e94620007929b998f99606073ffffffffffffffffffffffffffffffffffffffff910151169760408601519460a0608088015197015115159882519a620022c18c62006463565b8b528a01528801526060870152608086015260a085015260c084015260e08301526001610100830152600161012083015261014082015262008857565b6200230f8383602084015162008605565b815262001e5b565b62002323925062008525565b818462001e2d565b346200011a576200233c3662007b45565b6200235a82916200234c62007e20565b5060e0850151908462008160565b809281516200284a575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff835114908162002831575b60208401518451606086015173ffffffffffffffffffffffffffffffffffffffff60808801511673ffffffffffffffffffffffffffffffffffffffff60a0890151169160408901519360405195620023ea8762006429565b878752602087015260408601526060850152608084015260a083015260c08201526200241562008066565b506200242062008099565b506040928351926200243385856200658a565b60018452620024687fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086016020860162007fec565b610a699160208301948651936200248087866200658a565b80855262017fa294818660208301396200249a8362007f00565b52620024a68262007f00565b50620024b960608701518751906200b055565b91620024fa620024d260208901518b860151906200b0a4565b93602073ffffffffffffffffffffffffffffffffffffffff60a08b015116910151906200b273565b976060926200251860208a015162002511620087ab565b906200af05565b15620027b0575b90620025399160208b0151986200048a8d5193846200658a565b9160c08801519162093a8083018311620007dd5773ffffffffffffffffffffffffffffffffffffffff62093a80948c5199620025758b62006446565b8a525f60208b0152168b890152606088015260808701520160a0850152604085015190606086015173ffffffffffffffffffffffffffffffffffffffff608088015116606083015191602073ffffffffffffffffffffffffffffffffffffffff8551169401518b5195620025e98762006446565b865260208601528a8501526060840152608083015260a0820152620005a473ffffffffffffffffffffffffffffffffffffffff60a060608801519701511691620026366200058e6200ad06565b6020620026438b6200b3c2565b9801519289519762002655896200640b565b8852602088015288870152606086015260209587516200267688826200658a565b5f8152608087015260a086015260c0850152600160e08501528551976200269e878a6200658a565b600189527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0870136878b01378051620026d78a62007f00565b52865198620026e7888b6200658a565b60018a526200271b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08901888c0162007fec565b60208201516200272b8b62007f00565b52620027378a62007f00565b5087516200274688826200658a565b5f81525f36813788519a6200275c898d6200658a565b5f8c5293838a93620001169d8b948e9873ffffffffffffffffffffffffffffffffffffffff60a0620007929e9d9c9a0151169760408601519460c0606088015197015115159882519a620022c18c62006463565b6080890151855160408b01518d517f0c0a769b00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9384166024820152929091166044830152606482015290935062002539919062002827816084810162000a44565b939091506200251f565b620028428382602087015162008605565b845262002392565b62002856925062008525565b818462002364565b346200011a576200286f3662007c89565b916200287a62007e20565b508051907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821462002dfd575b602081015181519060808301519073ffffffffffffffffffffffffffffffffffffffff6060850151169160408501519060a08601519160c08701519360405196620028f2886200640b565b875260208701526040860152606085015286608085015260a084015260c083015260e08201526200292262008066565b506200292d62008099565b5060409384516200293f86826200658a565b60018152620029747fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe087016020830162007fec565b85516200298760206110b801826200658a565b6110b881526110b862016eea6020830139620029a38262007f00565b52620029af8162007f00565b50620029c560608401516080850151906200b055565b91620029f173ffffffffffffffffffffffffffffffffffffffff60e0860151166020850151906200b273565b9562002a1b62002a0c8960208801519601958651906200b0a4565b9460c08701519051906200b0a4565b62002a2a60608701516200cfe3565b62002a8a62002a48606089015160c08a015160208b0151916200d0a5565b9162000a448c8a5160a08c015191519586947fae8adba7000000000000000000000000000000000000000000000000000000006020870152602486016200ab63565b60208901519562002aa78b5162000a8e60206110b801826200658a565b9160408901519062093a8082018211620007dd578d978d9485519a62002acd8c62006446565b8b5260208b015f905273ffffffffffffffffffffffffffffffffffffffff16858b015260608a0152608089015262093a800160a08801528751928860208101519160608201519060a083015160c0840151906060830151925173ffffffffffffffffffffffffffffffffffffffff16936060880151975173ffffffffffffffffffffffffffffffffffffffff169862002b66826200cfe3565b9660608101519060c081015190602001519062002b83926200d0a5565b62002b8e906200e536565b9781519b62002b9d8d62006463565b8c5260208c01528a01526060890152608088015260a087015260c086015273ffffffffffffffffffffffffffffffffffffffff1660e085015261010084015261012083015261014082015260608601519560e0015173ffffffffffffffffffffffffffffffffffffffff169062002c136200ac1f565b8a51809260208201602090528c820162002c2d916200ac5c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835262002c5f90836200658a565b62002c6a866200b3c2565b9960200151928b519862002c7e8a6200640b565b895260208901528a8801526060870152602097895162002c9f8a826200658a565b5f8152608088015260a087015260c0860152600160e086015287519062002cc789836200658a565b600182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08901368984013762002cfe8262007f00565b5287519562002d0e89886200658a565b6001875262002d427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a0189890162007fec565b602081015162002d528862007f00565b5262002d5e8762007f00565b5088519662002d6e8a896200658a565b600188527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a01368a8a013760a082015162002daa8962007f00565b52895162002db98b826200658a565b6001815262002ded7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08c018b830162007fec565b60c083015162000e078262007f00565b905062002e976080820180519073ffffffffffffffffffffffffffffffffffffffff62002e718162002e4f602088015162002e376200a6f0565b50604062002e468b896200b055565b0151906200b0a4565b511692604062002e468960c08a0151935162002e6a6200a6f0565b506200b055565b51169073ffffffffffffffffffffffffffffffffffffffff60608601511692866200aad3565b90620028a7565b346200011a5762002eaf3662007b45565b919062002ebb62007e20565b5062002ef27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8351149360e0840151908362008160565b91805193620033a0575b6020810151908051606082015173ffffffffffffffffffffffffffffffffffffffff60808401511673ffffffffffffffffffffffffffffffffffffffff60a085015116916040850151936040519662002f558862006429565b888852602088015260408701526060860152608085015260a084015260c083015262002f8062008066565b5062002f8b62008099565b5060409283519562002f9e85886200658a565b6001875262002fd37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086016020890162007fec565b84519261061f6020810162002fe981876200658a565b818652620168cb9582876020830139620030038b62007f00565b526200300f8a62007f00565b506200302260608801518851906200b055565b91620030636200303b60208a01518b860151906200b0a4565b93602073ffffffffffffffffffffffffffffffffffffffff60a08c015116910151906200b273565b9a8b926060928a8c6200307e602083015162002511620087ab565b1562003316575b50506020620030a19394950151996200048a8d5193846200658a565b9160c08901519162093a8083018311620007dd5773ffffffffffffffffffffffffffffffffffffffff62093a80948c519a620030dd8c62006446565b8b525f60208c0152168b8a0152606089015260808801520160a0860152604086015190602087015190606088015173ffffffffffffffffffffffffffffffffffffffff60808a0151169073ffffffffffffffffffffffffffffffffffffffff6060840151935116938b5195620031538762006446565b865260208601528a8501526060840152608083015260a0820152620005a473ffffffffffffffffffffffffffffffffffffffff60a060608901519801511691620031a06200058e6200aa34565b6020620031ad8b6200b3c2565b9b015192895198620031bf8a6200640b565b895260208901528888015260608701526020988751620031e08b826200658a565b5f8152608088015260a087015260c0860152600160e08601528551916200320887846200658a565b600183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08701368a8501376200323f8362007f00565b5285516200324e87826200658a565b60018152620032827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe088018a830162007fec565b6020820151620032928262007f00565b526200329e8162007f00565b50865190620032ae8a836200658a565b5f82525f368137875193620032c48b866200658a565b5f855283620001169b989693620007929896938b9373ffffffffffffffffffffffffffffffffffffffff60a08f990151169560408501519360c060608701519601511515965197620007528962006463565b6080820151885160409093015191517fd9caed120000000000000000000000000000000000000000000000000000000060208281019190915273ffffffffffffffffffffffffffffffffffffffff92831660248301529390911660448201526064810191909152939450620030a19362003394816084810162000a44565b949350508a8c62003085565b9250620033e9606084015173ffffffffffffffffffffffffffffffffffffffff60808601511673ffffffffffffffffffffffffffffffffffffffff60a08701511691846200a995565b9262002efc565b346200011a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200011a5760043567ffffffffffffffff81116200011a576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126200011a57604051906200347182620064bc565b80600401358252602481013567ffffffffffffffff81116200011a576200349f906004369184010162006607565b60208301526044810135604083015260648101356060830152608481013567ffffffffffffffff81116200011a57620034df906004369184010162006709565b608083015260a481013567ffffffffffffffff81116200011a576200350b906004369184010162007abb565b60a08301526200351e60c4820162006651565b9060c083019182526200353460e4820162006651565b60e084015262003548610104820162006673565b6101008401526101248101359067ffffffffffffffff82116200011a57600462003576923692010162006607565b610120830190815260243567ffffffffffffffff81116200011a57620035a1903690600401620067d8565b9260443567ffffffffffffffff81116200011a57620035c5903690600401620073ec565b918492620035d262007e20565b5060808301515160a0840151510362003c4257620035f39151908662008160565b8094815162003c2c575b505080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810362003c2557506200366e606082015173ffffffffffffffffffffffffffffffffffffffff85511673ffffffffffffffffffffffffffffffffffffffff60e08501511691856200a8b0565b925b6020820151825191606084015190608085015173ffffffffffffffffffffffffffffffffffffffff60a087015192511692604087015173ffffffffffffffffffffffffffffffffffffffff60e0890151169560405197620036d1896200649e565b8a8952602089015260408801526060870152608086015260a085015260c084015260e08301526101008201526200370762008066565b506200371262008099565b506040908151956200372583886200658a565b600187526200375a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084016020890162007fec565b82516200376d602061075501826200658a565b6107558152610755620161766020830139620037898862007f00565b52620037958762007f00565b50620037a860808301518351906200b055565b93620037d573ffffffffffffffffffffffffffffffffffffffff610100850151166020870151906200b273565b90620037ea604085015186880151906200b0a4565b93620037fb60c08201515162007eab565b996200380c60c08301515162007eab565b985f5b60c084015180518210156200388157908b620038798f73ffffffffffffffffffffffffffffffffffffffff84918f8f906200385d91620038528660019b62007fd7565b51910151906200b0a4565b906200386f8460608401519262007fd7565b5251169262007fd7565b52016200380f565b505089908b828e8b999a6200393473ffffffffffffffffffffffffffffffffffffffff60e08a015116620039078d8b60a0810151602073ffffffffffffffffffffffffffffffffffffffff88511692015192519b8c957fff203885000000000000000000000000000000000000000000000000000000006020880152602487016200a71c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018852876200658a565b60208a015196620039688c5162003951602061075501826200658a565b61075581526107556201617660208301396200b331565b9660608a01519162093a8083018311620007dd578d8f9981519b6200398d8d62006446565b8c5260208c015f905273ffffffffffffffffffffffffffffffffffffffff16908b015260608a0152608089015262093a800160a08801528a60208901519360408a0151938a608081015160a08201519060c08301519260e0015173ffffffffffffffffffffffffffffffffffffffff16956060880151975173ffffffffffffffffffffffffffffffffffffffff169881519a62003a2a8c620064bc565b8b5260208b01528901526060880152608087015260a086015260c085015260e0840152610100830152610120820152608086015195610100015173ffffffffffffffffffffffffffffffffffffffff169062003a856200a958565b8a51809260208201602090528c820162003a9f916200a7b0565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835262003ad190836200658a565b62003adc866200b3c2565b9960200151928b519862003af08a6200640b565b895260208901528a8801526060870152602097895162003b118a826200658a565b5f8152608088015260a087015260c0860152600160e086015262003b3462007e55565b5087519062003b4489836200658a565b600182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08901368984013762003b7b8262007f00565b5287519562003b8b89886200658a565b6001875262003bbf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a0189890162007fec565b602081015162003bcf8862007f00565b5262003bdb8762007f00565b5060e081015173ffffffffffffffffffffffffffffffffffffffff1696608082015160a08301519060408401519260608501519461010001511515958d519b62000e518d62006463565b9262003670565b62003c3992935062008525565b908385620035fd565b7fb4fa3fb3000000000000000000000000000000000000000000000000000000005f5260045ffd5b346200011a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200011a5760043567ffffffffffffffff81116200011a576101607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126200011a576040519062003ceb8262006463565b8060040135825262003d006024820162006651565b60208301526044810135604083015262003d1d6064820162006651565b60608301526084810135608083015262003d3a60a4820162006673565b9060a0830191825260c481013567ffffffffffffffff81116200011a5762003da89162003d71610144926004369184010162006607565b60c086015260e481013560e086015262003d8f610104820162006651565b6101008601526101248101356101208601520162006673565b61014083015260243567ffffffffffffffff81116200011a5762003dd1903690600401620067d8565b60443567ffffffffffffffff81116200011a5762003df4903690600401620079ba565b91828262003e0162007e20565b508151620049f5575b505073ffffffffffffffffffffffffffffffffffffffff60208501511684602062003e4160406200122387855162002e6a6200a6f0565b01519260408201519073ffffffffffffffffffffffffffffffffffffffff60608401511690602062003e7f6040620012238a885162002e6a6200a6f0565b0151906080850151905115159060c08601519260e08701519487519661012073ffffffffffffffffffffffffffffffffffffffff6101008b0151169901519a6040519a62003ecd8c620064da565b8d8c5260208c015260408b015260608a0152608089015260a088015260c087015260e0860152610100850152610120840152610140830152610160820152610180810191825262003f1d62008066565b5062003f2862008099565b5060405162003f3781620064f8565b62003f416200844f565b815262003f4d6200a6f0565b602082015262003f5c6200a6f0565b604082015260606040519162003f728362006550565b5f83525f6020840152015262003f906101408201518251906200b055565b9162003fbd73ffffffffffffffffffffffffffffffffffffffff610160840151166020850151906200b273565b604083015162003fe762003fd860408701928351906200b0a4565b9160a08601519051906200b0a4565b906040519562003ff787620064f8565b8652602086015260408501526060840152604051620040168162006515565b6200402062007e00565b8152604051620040308162006429565b5f81525f60208201525f60408201525f60608201525f60808201525f60a0820152606060c0820152602082015260408051916200406d8362006515565b5f83526060602084015260608284015201525194857ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4810111620007dd576101208201517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff460405197620040e18962006515565b0187526020870152620151806040870152620041026101408301516200c97b565b73ffffffffffffffffffffffffffffffffffffffff6101608401511673ffffffffffffffffffffffffffffffffffffffff60208501511673ffffffffffffffffffffffffffffffffffffffff6080860151169060e0860151151591825f14620049e95760c0870151915b6101008801519473ffffffffffffffffffffffffffffffffffffffff60405197620041978962006429565b168752602087015260408601526060850152608084015260a083015260c0820152620041e7620041cb60408501516200ca67565b620041da60a08601516200ca67565b610140860151916200cace565b6040519291620041f78462006515565b67016345785d8a0000845260208401526040830152604051976200421b8962006515565b8852602088015260408701526200423162008066565b506040938451916200424486846200658a565b60018352620042797fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe087016020850162007fec565b85516200428c60206117c001826200658a565b6117c081526117c0620149b66020830139620042a88462007f00565b52620042b48362007f00565b508551977f8f706e180000000000000000000000000000000000000000000000000000000060208a0152602060248a0152868151805160448c0152602081015160648c0152015160848a0152886040620043c260c0602085015160a060a486015273ffffffffffffffffffffffffffffffffffffffff81511660e486015273ffffffffffffffffffffffffffffffffffffffff60208201511661010486015273ffffffffffffffffffffffffffffffffffffffff8c8201511661012486015273ffffffffffffffffffffffffffffffffffffffff606082015116610144860152608081015161016486015260a08101511515610184860152015160e06101a48501526101c48401906200762c565b920151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc8282030160c483015282518152886200441060208501516060602085015260608401906200a633565b9301519089818503910152602080825194858152019101925f5b818110620049cd575050620044679250037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018a52896200658a565b6020606086015101519786519889525f5b6101f38110620049be575091879162000792959493620001169a519473ffffffffffffffffffffffffffffffffffffffff620044d78b51620044c060206117c001826200658a565b6117c081526117c0620149b660208301396200b331565b8b5197620044e58962006446565b885260016020890152168a870152606086015260808501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60a08501526101408501516060860151868a8a604083015173ffffffffffffffffffffffffffffffffffffffff60208501511660606020840151015160c08601519160a0870151936060604073ffffffffffffffffffffffffffffffffffffffff60808b01511697015101519661012060e08a015115159901519981519b620045a78d62006463565b8c5260208c01528a01526060890152608088015260a087015260c086015260e08501526101008401526101208301526101408201526200464c73ffffffffffffffffffffffffffffffffffffffff6101606101408901519801511691620047258b620046126200a873565b92610140620046b683519687946020808701528451818701526020850151606087015284015161016060808701526101a08601906200762c565b73ffffffffffffffffffffffffffffffffffffffff60608501511660a0860152608084015160c086015260a084015160e086015260c08401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0868303016101008701526200762c565b9173ffffffffffffffffffffffffffffffffffffffff60e0820151166101208501526101008101518285015261012081015115156101608501520151610180830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018452836200658a565b6020606062004734886200b3c2565b9b01510151928b5198620047488a6200640b565b895260208901528a88015260608701526020978951620047698a826200658a565b5f8152608088015260a087015260c08601526101f460e08601526200478d62007e55565b50878051916200479e82846200658a565b600183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201368a8501376040810151620047da8462007f00565b52815192620047ea83856200658a565b600184526200481e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084018b860162007fec565b896200485073ffffffffffffffffffffffffffffffffffffffff6020850151168562001aa889875162002e6a6200a6f0565b01516200485d8562007f00565b52620048698462007f00565b5082516200487884826200658a565b600181527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08401368c8301376080830151620048b48262007f00565b52835190620048c485836200658a565b60018252620048f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086018d840162007fec565b8b6200492a73ffffffffffffffffffffffffffffffffffffffff6060870151168762001aa88b895162002e6a6200a6f0565b0151620049378362007f00565b52620049438262007f00565b5073ffffffffffffffffffffffffffffffffffffffff61010085015116956101208501519361014086519601511515965197620049808962006463565b88528d8801528d8701526060860152608085015260a084015260c08301525f60e08301525f6101008301525f61012083015261014082015262008857565b60208a208a5260010162004478565b8451151583526020948501948d9450909201916001016200442a565b6060870151916200416c565b62004a0292935062008525565b90828562003e0a565b346200011a575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200011a5760206040515f8152f35b346200011a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200011a5760043567ffffffffffffffff81116200011a576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126200011a5760405162004ac581620064bc565b81600401358152602482013567ffffffffffffffff81116200011a5762004af3906004369185010162006607565b60208201526044820135604082015262004b106064830162006651565b60608201526084820135608082015260a482013567ffffffffffffffff81116200011a5762004b46906004369185010162006709565b60a082015260c482013567ffffffffffffffff81116200011a5762004b72906004369185010162007abb565b60c082015262004b8560e4830162006651565b9160e0820192835262004b9c610104820162006673565b6101008301526101248101359067ffffffffffffffff82116200011a57600462004bca923692010162006607565b90610120810191825260243567ffffffffffffffff81116200011a5762004bf6903690600401620067d8565b916044359067ffffffffffffffff82116200011a5762004c1f62004c34923690600401620073ec565b9062004c2a62007e20565b5051908462008160565b60a08201515160c0830151510362003c4257815193602083015190604084015173ffffffffffffffffffffffffffffffffffffffff60608601511660808601519060a08701519273ffffffffffffffffffffffffffffffffffffffff60c0890151955116956040519a62004ca88c6200649e565b8a8c5260208c015260408b015260608a0152608089015260a088015260c087015260e086015261010085015262004cde62008066565b5062004ce962008099565b50604080519262004cfb82856200658a565b6001845262004d307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083016020860162007fec565b815162004d43602061078901826200658a565b61078981526107896201422d602083013962004d5f8562007f00565b5262004d6b8462007f00565b5062004d7e60a08701518751906200b055565b9262004daa73ffffffffffffffffffffffffffffffffffffffff6080890151166020860151906200b273565b62004dbe604089015185870151906200b0a4565b9262004dcf60e08a01515162007eab565b9862004de060e08201515162007eab565b975f5b60e0830151805182101562004e46579073ffffffffffffffffffffffffffffffffffffffff8d62004e1d8c8c620038528660019862007fd7565b9062004e2f8460608401519262007fd7565b52511662004e3e828d62007fd7565b520162004de3565b5050888a8c828a989962004ef973ffffffffffffffffffffffffffffffffffffffff6101008901511662004ecc8c60c08b015173ffffffffffffffffffffffffffffffffffffffff8651169060208d015192519a8b957fff203885000000000000000000000000000000000000000000000000000000006020880152602487016200a71c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018752866200658a565b60208901519562004f2d8b5162004f16602061078901826200658a565b61078981526107896201422d60208301396200b331565b9560608901519162093a8083018311620007dd578d978d519962004f518b62006446565b8a5260208a015f905273ffffffffffffffffffffffffffffffffffffffff168d8a01526060890152608088015262093a800160a08701528960408801519260208901519460a08a015160c08b015160e08c0151916101008d015173ffffffffffffffffffffffffffffffffffffffff16956060880151975173ffffffffffffffffffffffffffffffffffffffff169881519a62004fee8c620064bc565b8b5260208b01528901526060880152608087015260a086015260c085015260e084015261010083015261012082015260a0850151946080015173ffffffffffffffffffffffffffffffffffffffff1690620050486200a773565b8951809260208201602090528b820162005062916200a7b0565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183526200509490836200658a565b6200509f856200b3c2565b9860200151928a5197620050b3896200640b565b885260208801528987015260608601526020968851620050d489826200658a565b5f8152608087015260a086015260c0850152600160e0850152620050f762007e55565b508651946200510788876200658a565b600186527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0880136888801378051620051408762007f00565b528751906200515089836200658a565b60018252620051847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a0189840162007fec565b6020810151620051948362007f00565b52620051a08262007f00565b50606081015173ffffffffffffffffffffffffffffffffffffffff169660a08201519260c08301519160408401519260808501519461010001511515958d519b62000e518d62006463565b346200011a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200011a5760043567ffffffffffffffff81116200011a576101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126200011a57604051906200526c826200649e565b80600401358252620052816024820162006651565b602083015260448101356040830152606481013567ffffffffffffffff81116200011a57620052b790600436918401016200669a565b9160608101928352608482013567ffffffffffffffff81116200011a57620052e6906004369185010162006709565b608082015260a482013567ffffffffffffffff81116200011a576200531290600436918501016200669a565b9160a0820192835260c481013567ffffffffffffffff81116200011a576200534190600436918401016200669a565b60c083015260e481013567ffffffffffffffff81116200011a57810190366023830112156200011a576004820135916200537b8362006681565b926200538b60405194856200658a565b808452602060048186019260051b84010101913683116200011a5760248101915b83831062005bcd5750505050610104620053ce9160e085019384520162006673565b61010083015260243567ffffffffffffffff81116200011a57620053f7903690600401620067d8565b9260443567ffffffffffffffff81116200011a576200541b903690600401620079ba565b946200542662007e20565b5080515160808501515181149081159162005bbf575b811562005bae575b811562005ba0575b5062003c42575191835191604085015190608086015173ffffffffffffffffffffffffffffffffffffffff60208801511691519260c08801519451956040519762005497896200649e565b8a8952602089015260408801526060870152608086015260a085015260c084015260e0830152610100820152620054cd62008066565b50620054d862008099565b5060408051620054e982826200658a565b600181526200551e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083016020830162007fec565b815162005531602061057d01826200658a565b61057d815261057d62013cb060208301396200554d8262007f00565b52620055598162007f00565b506200556c60608401518451906200b055565b926200559873ffffffffffffffffffffffffffffffffffffffff60a0830151166020860151906200b273565b90620055a960e0820151516200800a565b97620055ba60e08301515162007eab565b965f5b60e084015180518210156200563a579060608c62005623836200560a8d8d73ffffffffffffffffffffffffffffffffffffffff620055fe8560019b62007fd7565b5116910151906200c919565b9260208401516200561c838362007fd7565b5262007fd7565b50015162005632828c62007fd7565b5201620055bd565b50508589620056ab8a8d8960c089015160208a0151906200573e8b6200570d60e0820151620056dc6101006080850151940151968d519b8c977f73bf9a7f0000000000000000000000000000000000000000000000000000000060208a015260a060248a015260c48901906200a633565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8883030160448901526200a633565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8683030160648701526200a633565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8483030160848501526200a67e565b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8284030160a4830152805180845260208401936020808360051b8301019301945f915b83831062005b235750505050620057c29250037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018652856200658a565b60208a015193620057f68751620057df602061057d01826200658a565b61057d815261057d62013cb060208301396200b331565b9160408b01519262093a808401809411620007dd57885196620058198862006446565b8752602087015f905273ffffffffffffffffffffffffffffffffffffffff16888701526060860152608085015260a084015260808801519160608901519260e08a01518751916200586a8362006481565b825260208201938452878201948552606082019283526080820190815260608b01519a60a0015173ffffffffffffffffffffffffffffffffffffffff1694620058b26200a6b3565b9389519586946020860160209052518b860160a0905260e08601620058d7916200a67e565b9051908581037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00160608701526200590f916200766f565b9151608085015251908381037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00160a08501526200594d916200a67e565b9051908281037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00160c084015262005985916200a633565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352620059b790836200658a565b620059c2886200b3c2565b996020015192865199620059d68b6200640b565b8a5260208a01528589015260608801526020978451620059f78a826200658a565b5f8152608089015260a088015260c0870152600160e087015262005a1a62007e55565b5060c08401515162005a2c906200800a565b945f5b8860c0870151805183101562005aa2579062005a7f73ffffffffffffffffffffffffffffffffffffffff62005a68856001969562007fd7565b51168862001aa88960408d015162002e6a6200a6f0565b015162005a8d828a62007fd7565b5262005a9a818962007fd7565b500162005a2f565b5096905087939195855162005ab889826200658a565b5f81525f36813786519262005ace8a856200658a565b5f8452928783620001169b98969362000792989673ffffffffffffffffffffffffffffffffffffffff60208e980151169460808401519084519361010060408701519601511515965197620007528962006463565b9193909294507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828203018352855190602080835192838152019201905f905b80821062005b87575050506020806001929701930193019092899492959362005783565b9091926020806001928651815201940192019062005b63565b90508351511415876200544c565b60c086015151811415915062005444565b83515181141591506200543c565b823567ffffffffffffffff81116200011a5760049083010136603f820112156200011a5760208101359062005c028262006681565b9162005c1260405193846200658a565b8083526020808085019260051b84010101913683116200011a57604001905b82821062005c4b57505050815260209283019201620053ac565b813581526020918201910162005c31565b346200011a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126200011a5760043567ffffffffffffffff81116200011a576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126200011a5762005cdb6105806200640b565b806004013561058052602481013567ffffffffffffffff81116200011a5762005d0b906004369184010162006607565b6105a05260448101356105c09081529062005d296064820162006651565b6105e05262005d3b6084820162006651565b61060090815260a4820135610620529062005d5960c4820162006673565b6106405260e48101359067ffffffffffffffff82116200011a57600462005d84923692010162006607565b61066090815260243567ffffffffffffffff81116200011a5762005dad903690600401620067d8565b9160443567ffffffffffffffff81116200011a5762005dd562005deb913690600401620073ec565b849362005de162007e20565b5051908562008160565b80938151620063f5575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84511480620063da575b6105a0518551610580516105e05194516106205160405196909473ffffffffffffffffffffffffffffffffffffffff9283169491909216929162005e668862006429565b888852602088015260408701526060860152608085015260a084015260c083015262005e9162008066565b5062005e9c62008099565b5060409283519562005eaf85886200658a565b6001875262005ee47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086016020890162007fec565b61054792602084019786519462005efc8a876200658a565b80865262013769958187602083013962005f168362007f00565b5262005f228262007f00565b5062005f3560608801518851906200b055565b916200601662005f7a62005f5260208b01518c870151906200b0a4565b94602073ffffffffffffffffffffffffffffffffffffffff60808d015116910151906200b273565b9b8c938b8b62005f92602082015162002511620087ab565b15620063335760a081015160409091015191517fae77a7080000000000000000000000000000000000000000000000000000000060208083019190915273ffffffffffffffffffffffffffffffffffffffff909216602482015260448101929092529062006004816064810162000a44565b950151996200048a8d5193846200658a565b9160c08901519162093a8083018311620007dd5773ffffffffffffffffffffffffffffffffffffffff62093a80948c519a620060528c62006446565b8b525f60208c0152168b8a0152606089015260808801520160a08601526040860151906060810151602073ffffffffffffffffffffffffffffffffffffffff83511692015190606089015173ffffffffffffffffffffffffffffffffffffffff60a08b015116928b5195620060c78762006446565b865260208601528a8501526060840152608083015260a082015260a073ffffffffffffffffffffffffffffffffffffffff608060608901519801511691620061a962006112620087e8565b918a73ffffffffffffffffffffffffffffffffffffffff815195869360208086015280518486015262006156602082015160c060608801526101008701906200762c565b9381015160808601526060810151828601528260808201511660c086015201511660e0830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018452836200658a565b6020620061b7858c6200b4f8565b9b015192895198620061c98a6200640b565b895260208901528888015260608701526020988751620061ea8b826200658a565b5f8152608088015260a087015260c0860152600160e08601526200620d62007e55565b508551916200621d87846200658a565b600183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08701368a85013751620062558362007f00565b528551916200626587846200658a565b60018352620062997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe088018a850162007fec565b6105a051620062a88462007f00565b52620062b48362007f00565b508651620062c38a826200658a565b5f81525f368137875190620062d98b836200658a565b5f8252998993819896938a62000792999794620001169e73ffffffffffffffffffffffffffffffffffffffff60606105800151169660a0610580015193610580519560c0610580015115159882519a620022c18c62006463565b620063d360209262000a4473ffffffffffffffffffffffffffffffffffffffff8b511691604073ffffffffffffffffffffffffffffffffffffffff60a08701511695015190519485937f92940bf900000000000000000000000000000000000000000000000000000000888601526024850173ffffffffffffffffffffffffffffffffffffffff6040929594938160608401971683521660208201520152565b9562000479565b620063ed84846020610580015162008605565b855262005e22565b6200640292935062008525565b90828562005df5565b610100810190811067ffffffffffffffff82111762001c3a57604052565b60e0810190811067ffffffffffffffff82111762001c3a57604052565b60c0810190811067ffffffffffffffff82111762001c3a57604052565b610160810190811067ffffffffffffffff82111762001c3a57604052565b60a0810190811067ffffffffffffffff82111762001c3a57604052565b610120810190811067ffffffffffffffff82111762001c3a57604052565b610140810190811067ffffffffffffffff82111762001c3a57604052565b6101a0810190811067ffffffffffffffff82111762001c3a57604052565b6080810190811067ffffffffffffffff82111762001c3a57604052565b6060810190811067ffffffffffffffff82111762001c3a57604052565b6101c0810190811067ffffffffffffffff82111762001c3a57604052565b6040810190811067ffffffffffffffff82111762001c3a57604052565b6020810190811067ffffffffffffffff82111762001c3a57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111762001c3a57604052565b67ffffffffffffffff811162001c3a57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b81601f820112156200011a576020813591016200662482620065cc565b926200663460405194856200658a565b828452828201116200011a57815f92602092838601378301015290565b359073ffffffffffffffffffffffffffffffffffffffff821682036200011a57565b359081151582036200011a57565b67ffffffffffffffff811162001c3a5760051b60200190565b9080601f830112156200011a578135620066b48162006681565b92620066c460405194856200658a565b81845260208085019260051b8201019283116200011a57602001905b828210620066ee5750505090565b60208091620066fd8462006651565b815201910190620066e0565b9080601f830112156200011a578135620067238162006681565b926200673360405194856200658a565b81845260208085019260051b8201019283116200011a57602001905b8282106200675d5750505090565b81358152602091820191016200674f565b91906040838203126200011a57604051906200678a8262006550565b8193803567ffffffffffffffff81116200011a5782620067ac9183016200669a565b835260208101359167ffffffffffffffff83116200011a57602092620067d3920162006709565b910152565b6104e0526104605261046051601f6104e0510112156200011a576104e051356104a0526200681e6200680d6104a05162006681565b60405161056052610560516200658a565b61056051506104a0516105605152602061056051016104605160206104a05160051b6104e0510101116200011a5760206104e05101610480525b60206104a05160051b6104e051010161048051106200687957506105605190565b610480513567ffffffffffffffff81116200011a5760c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0826104e05101610460510301126200011a5760405190620068d28262006446565b6020816104e05101013582526040816104e05101013567ffffffffffffffff81116200011a57602090826104e05101010161046051601f820112156200011a5780356200691f8162006681565b916200692f60405193846200658a565b81835260208084019260061b820101906104605182116200011a57602001915b818310620073ab5750505060208301526060816104e05101013567ffffffffffffffff81116200011a57610460516104e05183018201603f0112156200011a57602081836104e0510101013590620069a78262006681565b91620069b760405193846200658a565b80835260208301916104605160208360051b8184896104e0510101010101116200011a576104e05185018101604001925b60208360051b8184896104e05101010101018410620071bb575050505060408301526080816104e0510101356104405267ffffffffffffffff61044051116200011a5761046051601f602061044051846104e0510101010112156200011a57602061044051826104e0510101013562006a618162006681565b9062006a7160405192836200658a565b808252602082016104605160208360051b8161044051886104e0510101010101116200011a5760208061044051866104e05101010101905b60208360051b8161044051886104e0510101010101821062006dce57505050606083015260a0816104e05101013567ffffffffffffffff81116200011a57602090826104e05101010161046051601f820112156200011a57803562006b0e8162006681565b9162006b1e60405193846200658a565b81835260208084019260051b820101906104605182116200011a5760208101925b82841062006cce5750505050608083015260c0816104e05101013567ffffffffffffffff81116200011a576020916104e05101010161046051601f820112156200011a57803562006b908162006681565b9162006ba060405193846200658a565b81835260208084019260051b820101906104605182116200011a5760208101925b82841062006beb5750505050906020929160a0820152815201602061048051016104805262006858565b833567ffffffffffffffff81116200011a5782019060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083610460510301126200011a576040519062006c3f82620064f8565b62006c4d6020840162006651565b8252604083013567ffffffffffffffff81116200011a576104605162006c789185016020016200669a565b602083015260608301359167ffffffffffffffff83116200011a5762006cbd608060209562006cb1879687610460519184010162006709565b60408501520162006651565b606082015281520193019262006bc1565b833567ffffffffffffffff81116200011a57820160c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082610460510301126200011a576040519162006d218362006446565b6020820135835262006d366040830162006651565b602084015262006d496060830162006651565b604084015262006d5c6080830162006651565b606084015260a082013567ffffffffffffffff81116200011a576104605162006d8a9184016020016200676e565b608084015260c08201359267ffffffffffffffff84116200011a5762006dbd60209493858095610460519201016200676e565b60a082015281520193019262006b3f565b813567ffffffffffffffff81116200011a5760607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0826020610440518a6104e05101010101610460510301126200011a576040519062006e2e8262006515565b62006e4a60208281610440518b6104e051010101010162006651565b82526040816020610440518a6104e05101010101013567ffffffffffffffff81116200011a5760806020828482610440518d6104e0510101010101016104605103126200011a576040519067ffffffffffffffff6020808386828e62006eb089620064f8565b62006ecd8285858261044051866104e05101010101010162006651565b895261044051906104e0510101010101010135116200011a5767ffffffffffffffff604060208386828e62006f2f61046051838087878261044051886104e05101010101010101358487878261044051886104e051010101010101016200669a565b828a015261044051906104e0510101010101010135116200011a5767ffffffffffffffff606060208386828e62006f946104605160408487878261044051886104e05101010101010101358487878261044051886104e0510101010101010162006709565b60408a015261044051906104e0510101010101010135116200011a5761046051610440516104e05162006fdb936040918d01909201860190910160a0810135010162006709565b606082015260208301526060816020610440518a6104e05101010101013567ffffffffffffffff81116200011a5761046051610440516104e0518a010183018201605f0112156200011a576020818382610440518c6104e05101010101010135620070468162006681565b926200705660405194856200658a565b81845261046051610440516104e0516020870195926060918e0190920184018301600586901b0101116200011a57610440516104e0518c010182018101606001935b610440516104e0516060908e0190910184018301600586901b01018510620070d6575050505050918160209360408594015281520191019062006aa9565b843567ffffffffffffffff81116200011a57602083858f839061044051906104e0510101010101010160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082610460510301126200011a57604051916200713e8362006515565b6200714c6020830162006651565b8352604082013567ffffffffffffffff81116200011a5761046051620071779184016020016200669a565b602084015260608201359267ffffffffffffffff84116200011a57620071aa602094938580956104605192010162006709565b604082015281520194019362007098565b833567ffffffffffffffff81116200011a57602083886104e051010101016105405260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061054051610460510301126200011a576040516104c052620072256104c05162006481565b620072366020610540510162006651565b6104c05152604061054051013567ffffffffffffffff81116200011a5761046051610540516200726a920160200162006607565b60206104c0510152606061054051013560406104c0510152608061054051013560606104c051015260a06105405101356105205267ffffffffffffffff61052051116200011a5761046051610520516105405101603f0112156200011a576020610520516105405101013561050052620072e76105005162006681565b620072f660405191826200658a565b610500518152602081016104605160206105005160061b81610520516105405101010101116200011a57610520516105405101604001905b60206105005160061b8161052051610540510101010182106200736a575050602091829160806104c05101526104c051815201930192620069e8565b6040826104605103126200011a57602060409182516200738a8162006550565b620073958562006651565b815282850135838201528152019101906200732e565b6040836104605103126200011a5760206040918251620073cb8162006550565b620073d68662006651565b815282860135838201528152019201916200694f565b919060a0838203126200011a57604051620074078162006481565b8093803582526020810135602083015260408101356040830152606081013567ffffffffffffffff81116200011a57810183601f820112156200011a578035620074518162006681565b916200746160405193846200658a565b81835260208084019260051b820101908682116200011a5760208101925b8284106200759c5750505050606083015260808101359067ffffffffffffffff82116200011a570182601f820112156200011a57803590620074c18262006681565b93620074d160405195866200658a565b82855260208086019360051b830101918183116200011a5760208101935b8385106200750257505050505060800152565b843567ffffffffffffffff81116200011a57820160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082860301126200011a5760405191620075528362006515565b6020820135835260408201359267ffffffffffffffff84116200011a576060836200758588602080988198010162006607565b8584015201356040820152815201940193620074ef565b833567ffffffffffffffff81116200011a57820160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828b0301126200011a5760405191620075ec8362006550565b60208201359267ffffffffffffffff84116200011a57604083620076188d602080988198010162006607565b83520135838201528152019301926200747f565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b9080602083519182815201916020808360051b8301019401925f915b8383106200769b57505050505090565b9091929394602080620076d9837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0866001960301875289516200762c565b970193019301919392906200768b565b908151815260208201511515602082015273ffffffffffffffffffffffffffffffffffffffff604083015116604082015260a0806200774f6200773c606086015160c0606087015260c08601906200766f565b608086015185820360808701526200762c565b93015191015290565b908151815273ffffffffffffffffffffffffffffffffffffffff602083015116602082015260e080620077e2620077cf620077bc620077a9604088015161010060408901526101008801906200762c565b606088015187820360608901526200762c565b608087015186820360808801526200762c565b60a086015185820360a08701526200762c565b9360c081015160c0850152015191015290565b91906020835262007814815160e060208601526101008501906200762c565b926020820151937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828203016040830152845180825260208201916020808360051b8301019701925f915b8383106200796c5750505050506040820151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828603016060830152825180865260208601906020808260051b8901019501915f905b8282106200792057505050506200791d93945080604060606080930151805184860152602081015160a0860152015160c084015201519060e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828503019101526200762c565b90565b909192956020806200795d837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08d600196030186528a5162007758565b980192019201909291620078b6565b9091929397602080620079aa837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086600196030187528c51620076e9565b9a0193019301919392906200785f565b91906080838203126200011a57604051620079d581620064f8565b8093620079e28162006673565b8252602081013567ffffffffffffffff81116200011a578362007a0791830162006607565b60208301526040810135604083015260608101359067ffffffffffffffff82116200011a570182601f820112156200011a5780359062007a478262006681565b9362007a5760405195866200658a565b82855260208086019360061b830101918183116200011a57602001925b82841062007a86575050505060600152565b6040848303126200011a576020604091825162007aa38162006550565b86358152828701358382015281520193019262007a74565b9080601f830112156200011a57813562007ad58162006681565b9262007ae560405194856200658a565b81845260208085019260051b820101918383116200011a5760208201905b83821062007b1357505050505090565b813567ffffffffffffffff81116200011a5760209162007b398784809488010162006607565b81520191019062007b03565b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126200011a5760043567ffffffffffffffff81116200011a57600401610100818303126200011a576040519062007ba1826200640b565b80358252602081013567ffffffffffffffff81116200011a578362007bc891830162006607565b6020830152604081013560408301526060810135606083015262007bef6080820162006651565b608083015262007c0260a0820162006651565b60a083015262007c1560c0820162006673565b60c083015260e08101359067ffffffffffffffff82116200011a5762007c3e9184910162006607565b60e08201529160243567ffffffffffffffff81116200011a578262007c6691600401620067d8565b916044359067ffffffffffffffff82116200011a576200791d91600401620073ec565b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126200011a5760043567ffffffffffffffff81116200011a57600401610100818303126200011a576040519062007ce5826200640b565b80358252602081013567ffffffffffffffff81116200011a578362007d0c91830162006607565b60208301526040810135604083015262007d296060820162006651565b60608301526080810135608083015260a081013560a083015260c081013567ffffffffffffffff81116200011a578162007d6c8560e09362007d78950162006607565b60c08501520162006673565b60e08201529160243567ffffffffffffffff81116200011a578262007da091600401620067d8565b916044359067ffffffffffffffff82116200011a576200791d91600401620079ba565b6040519062007dd46040836200658a565b600582527f302e342e310000000000000000000000000000000000000000000000000000006020830152565b6040519062007e0f8262006515565b5f6040838281528260208201520152565b6040519062007e2f8262006481565b606060808382815282602082015282604082015262007e4d62007e00565b838201520152565b6040519062007e648262006463565b5f610140838281526060602082015260606040820152606080820152606060808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b9062007eb78262006681565b62007ec660405191826200658a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe062007ef6829462006681565b0190602036910137565b80511562007f0e5760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b80516001101562007f0e5760400190565b80516002101562007f0e5760600190565b80516003101562007f0e5760800190565b80516004101562007f0e5760a00190565b80516005101562007f0e5760c00190565b80516006101562007f0e5760e00190565b80516007101562007f0e576101000190565b80516008101562007f0e576101200190565b80516009101562007f0e576101400190565b805182101562007f0e5760209160051b010190565b5f5b82811062007ffb57505050565b60608282015260200162007fee565b90620080646200801a8362006681565b6200802960405191826200658a565b83815260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06200805b839662006681565b01910162007fec565b565b60405190620080758262006446565b5f60a083828152826020820152826040820152606080820152606060808201520152565b60405190620080a8826200640b565b5f60e0838281528260208201526060604082015260608082015260606080820152606060a08201528260c08201520152565b60405190620080eb6040836200658a565b600382527f55534400000000000000000000000000000000000000000000000000000000006020830152565b60405190620081268262006550565b5f6020838281520152565b60405190620081408262006550565b5f602083606081520152565b81810292918115918404141715620007dd57565b9092916040516200817181620064f8565b5f8152606060208201525f6040820152606080820152506200819d62008196620080da565b826200af05565b620083de57620081ac62008131565b915f945f5b60608201805180518310156200820857620081d183620081da9262007fd7565b5151866200af05565b620081ea575b50600101620081b1565b819750620081fb9295505162007fd7565b51926001809690620081e0565b5050509392919094156200839a576080840193845151937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0620082686200824f8762006681565b966200825f60405198896200658a565b80885262006681565b015f5b818110620083745750505f5b865180518210156200834657816200828f9162007fd7565b5190620082ad6040620082a48b85516200b055565b0151866200b0a4565b604080845194015191015190604d8211620007dd57620082d191600a0a906200814c565b916020870151801562008319576001930460405191620082f18362006550565b8252602082015262008304828962007fd7565b5262008311818862007fd7565b500162008277565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b505095509150925051604051926200835e84620064f8565b6001845260208401526040830152606082015290565b602090604051620083858162006550565b5f81525f8382015282828a010152016200826b565b620083da906040519182917f816c561b0000000000000000000000000000000000000000000000000000000083526020600484015260248301906200762c565b0390fd5b92516040519293929150620083f56020836200658a565b5f82525f805b81811062008429575050604051926200841484620064f8565b5f845260208401526040830152606082015290565b6020906040516200843a8162006550565b5f81525f8382015282828701015201620083fb565b604051906200845e8262006446565b606060a0835f815282602082015282604082015282808201528260808201520152565b906200848d8262006681565b6200849c60405191826200658a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0620084cc829462006681565b01905f5b828110620084dd57505050565b602090620084ea6200844f565b82828501015201620084d0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114620007dd5760010190565b919062008533835162008481565b925f915f5b8251811015620085a457806200855e620085556001938662007fd7565b5151846200b0e6565b6200856b575b0162008538565b6200859d6200857b828662007fd7565b51956200858881620084f7565b9662008595828b62007fd7565b528862007fd7565b5062008564565b505050919091620085b58162008481565b915f5b828110620085c65750505090565b80620085d56001928462007fd7565b51620085e2828762007fd7565b52620085ef818662007fd7565b5001620085b8565b91908201809211620007dd57565b5f9290835b8351851015620087a3576200868c60019162008648620086426040620082a489620086368c8262007fd7565b515162002e6a6200a6f0565b6200b126565b85511515806200878c575b62008744575b62008685905f906200867987620086718c8c62007fd7565b51516200b1e2565b62008695575b620085f7565b90620085f7565b9401936200860a565b9050620086cc620086428a604062002e468c62008636620086c48d620086bc878562007fd7565b51516200b20d565b948262007fd7565b908789888c8351151593846200871e575b5050505015620085f7579062008701620086f88b8b62007fd7565b5151896200b16d565b808211156200871557620086859162008825565b50505f62008685565b6200873a94506200251192916020620086bc9201519462007fd7565b89888c8b620086dd565b6200875d62008754898962007fd7565b5151876200b16d565b90818111156200877f576200868591620087779162008825565b905062008659565b5050620086855f62008777565b506200879d8560208801516200af05565b62008653565b935050505090565b60405190620087bc6040836200658a565b600382527f45544800000000000000000000000000000000000000000000000000000000006020830152565b60405190620087f96040836200658a565b600882527f5452414e534645520000000000000000000000000000000000000000000000006020830152565b91908203918211620007dd57565b6200884d604092959493956060835260608301906200762c565b9460208201520152565b6104a0526104005261036052610560526104e05260206104a05101515160406104a051015151148015906200a3c8575b62003c4257620088966200b54c565b6102e052620088a46200b54c565b6104c052620088b26200b584565b6103e0525f610300525b60406104a0510151805161030051101562008f0c5761030051620088e09162007fd7565b516103c05260c06104a051016200891a815161040051906200890d6103005160206104a051015162007fd7565b51906103c051906200b5bc565b6200893060206103605101516103c0516200af05565b50620089476103005160206104a051015162007fd7565b516200895c6104005183516103c0516200b734565b1062008975575b506001610300510161030052620088bc565b6104a05161010001511562008e61576200899a6103005160206104a051015162007fd7565b51610340525173ffffffffffffffffffffffffffffffffffffffff6104a051511660a06104a051015160e06104a05101511515916101406104a05101511515936040516103a052620089ef6103a05162006429565b6103c0516103a051526103405160206103a051015260406103a051015260606103a051015260806103a051015260a06103a051015260c06103a051015262008a366200b54c565b6104605262008a446200b54c565b6104405262008a656103a05151610400519060406103a0510151906200ec04565b6103205262008a7f6103205160206103a051015162008825565b6104205262008a9b60406103a05101516103a05151906200b1e2565b62008dfd575b5f610520525f610540525b610400515161054051101562008df757610420511562008ced5762008ad8610540516104005162007fd7565b5161050052610500515160406103a051015180821462008ce5576103a051519062008b0582828562011b72565b92831562008cd0575b5050501562008cca57608062008b316103a051516040610500510151906200b0a4565b0151610480525f610380525b610480515161038051101562008cb95761042051602062008b65610380516104805162007fd7565b5101511062008c9c57610420515b8062008b8c575b50600161038051016103805262008b3d565b62008c7762008c6a8262008ba862008c82946104205162008825565b610420526103a0515190610500515173ffffffffffffffffffffffffffffffffffffffff62008bde610380516104805162007fd7565b51511660406103a05101519073ffffffffffffffffffffffffffffffffffffffff60606103a0510151169260806103a0510151946040519662008c21886200640b565b610400518852602088015260408701526060860152608085015260a084015260c083015260e082015260a06103a0510151151560c06103a051015115159161036051906200ec1e565b610460929192516200b834565b50610440516200b7fe565b5062008c9161052051620084f7565b610520525f62008b7a565b602062008cb0610380516104805162007fd7565b51015162008b73565b600161054051016105405262008aac565b62008cb9565b62008cdc935062011bd9565b5f808062008b0e565b505062008cb9565b6104205162008da05762008d04610440516200c5b2565b62008d12610460516200bb4f565b9162008d4660405160208082015262008d378162000a44604082016103c0516200762c565b61034051906103e0516200b793565b505f5b825181101562008d95578062008d7162008d666001938662007fd7565b516104c0516200b7fe565b5062008d8d62008d82828762007fd7565b516102e0516200b834565b500162008d49565b509150505f62008963565b6103a0515162008dbb6103205160206103a051015162008825565b620083da6040519283927f9f6bb4e700000000000000000000000000000000000000000000000000000000845261042051916004850162008833565b62008ced565b62008e2d62008e1960406103a05101516103a05151906200b20d565b610400519060406103a0510151906200ec04565b61042051811062008e56575062008e4c610420515b6104205162008825565b6104205262008aa1565b62008e4c9062008e42565b62008e756104005182516103c0516200b734565b62008e8b6103005160206104a051015162007fd7565b5161036051519092901562008f045762008eaa9051610360516200b16d565b80821062008efa5762008ebd9162008825565b905b620083da6040519283927f08b61efa0000000000000000000000000000000000000000000000000000000084526103c0516004850162008833565b50505f9062008ebf565b505f62008eaa565b506101206104a051015162009e3a575b62008f2e6104e0516102e0516200b834565b5062008f41610560516104c0516200b7fe565b50610360515115158062009e1c575b62009d83575b62008f646104c0516200c5b2565b9062008f736102e0516200bb4f565b825181510362009d5b5762008f876200b584565b6101e05262008f956200b584565b6101a0525f5b83518110156200908c57806200904f62008fb86001938562007fd7565b515162008fc9816101e05162010597565b1562009077575b62008fdf816101a05162010597565b1562009057575b6200901c6200901162008ffd836101e05162010655565b62009009868b62007fd7565b51906200b7fe565b826101e051620105bd565b506200904462009030826101a05162010655565b6200903c858862007fd7565b51906200b834565b906101a051620105bd565b500162008f9b565b62009070620090656200b54c565b826101a051620105bd565b5062008fe6565b62009085620090116200b54c565b5062008fd0565b50509050620090a360206101e0515101516200800a565b905f5b6101e05151906020820151811015620090fd57620090db620090cb826001946200ee35565b602080825183010191016200b8ae565b51620090e8828662007fd7565b52620090f5818562007fd7565b5001620090a6565b50506200910b825162007eab565b915f5b8151811015620091535762009124818362007fd7565b5190602082519281808201948592010103126200011a57600191516200914b828762007fd7565b52016200910e565b505090805162009163816200c3e4565b6102a05262009172816200b9af565b6101c0525f610200525b806102005110620096f75750506101c0516102a051916103605151151580620096da575b620091a757565b9150620091b76102e0516200bb4f565b9060c06104a05101519273ffffffffffffffffffffffffffffffffffffffff6104a051511660405193620091eb8562006446565b8452602084016104005181526040850195865260608501918252608085019361036051855260a08601906104a0518252620092256200b584565b95620092306200b584565b91602082510151965f5b8a5180518210156200928a5790620092838b8b8b8b8b8b73ffffffffffffffffffffffffffffffffffffffff620092748960019b62007fd7565b5192519351945116956200f386565b016200923a565b5050985098620092bd929550620086429194979350620082a4620092b4604092518097516200b16d565b9851866200b055565b90620092ee620092e760405185602082015260208152620092e06040826200658a565b836200eced565b83620085f7565b62009313604051856020820152602081526200930c6040826200658a565b866200eced565b11620096825762009371926200934f879593620086856200936a946040519085602083015260208252620093496040836200658a565b6200eced565b9260405191602083015260208252620093496040836200658a565b9062008825565b106200964b57505090620093896102a051516200c3e4565b915f915b6102a051518310156200964757620093a9836102a05162007fd7565b5192620093ba816101c05162007fd7565b515193620093fb602061036051015195620093e9620093dd856101c05162007fd7565b5151610360516200b16d565b96620093f462008066565b50620129d7565b620094b9604051620094136020610ab801826200658a565b610ab88152602080820193610ab86201ae2786396060810151604091820151825173ffffffffffffffffffffffffffffffffffffffff928316858201908152919092166020820152916200946b908290840162000a44565b6040519586945180918587015e840190838201905f8252519283915e01015f8152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826200658a565b606082019384515160018101809111620007dd57620094d8906200800a565b955f5b86518051821015620095185790620094f68160019362007fd7565b5162009503828b62007fd7565b5262009510818a62007fd7565b5001620094db565b5050956200953d6001969998929951518462009535828562007fd7565b528262007fd7565b5073ffffffffffffffffffffffffffffffffffffffff84519460a06200956a60208301511515966200b331565b91620095f684604083015116608083015197620095c3604051998a937f57da115500000000000000000000000000000000000000000000000000000000602086015260248501526060604485015260848401906200762c565b906064830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018852876200658a565b01519460405196620096088862006446565b875260208701521660408501526060840152608083015260a082015262009630828662007fd7565b526200963d818562007fd7565b500191926200938d565b9150565b620083da6040519283927f5b7e74f3000000000000000000000000000000000000000000000000000000008452600484016200bbbb565b620096a8836200934f86936040519083602083015260208252620093496040836200658a565b917fe202212f000000000000000000000000000000000000000000000000000000005f5260045260245260445260645ffd5b50620096f160406104e0510151620025116200a873565b620091a0565b620097156200970a610200518462007fd7565b516101e05162010655565b6200973362009728610200518562007fd7565b516101a05162010655565b9060016020820151145f14620097ee57620097b6916200977662009766620097a6936200975f62008066565b506200edf5565b602080825183010191016200c4f2565b62009788610200516102a05162007fd7565b526200979b610200516102a05162007fd7565b506200975f62008099565b602080825183010191016200ba47565b620097c8610200516101c05162007fd7565b52620097db610200516101c05162007fd7565b505b60016102005101610200526200917c565b90620098026200980c92959394956200c5b2565b610260526200bb4f565b610220526200981a62008066565b506200982562008099565b5062009835610260515162007eab565b6102c0526200984861026051516200800a565b610240526102605151600181018111620007dd5760016200986a91016200800a565b610280525f5b610260515181101562009934578073ffffffffffffffffffffffffffffffffffffffff6040620098a66001946102605162007fd7565b51015116620098b9826102c05162007fd7565b526080620098cb826102605162007fd7565b510151620098dd826102405162007fd7565b52620098ed816102405162007fd7565b506200990c606062009903836102605162007fd7565b51015162007f00565b516200991c826102805162007fd7565b526200992c816102805162007fd7565b500162009870565b50906200997f6040516200994e602061052401826200658a565b61052481526105246201a903602083013961026051519062009974826102805162007fd7565b526102805162007fd7565b50604051927f4d618e3b00000000000000000000000000000000000000000000000000000000602085015260406024850152620099c3606485016102c0516200a633565b927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc858503016044860152846102405151808652602086019560208260051b8201019160206102405101915f5b82811062009d0c575050505062009a529293949550037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018652856200658a565b62009a5c62008066565b5062009a6762008099565b50610220515160018111908162009cc4575b501562009c3c5761026051517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8101908111620007dd5762009abf906102605162007fd7565b519161022051517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8101908111620007dd5762009b00906102205162007fd7565b51935b5f610180525b610220515161018051101562009c2f5762009b45604062009b31610180516102205162007fd7565b51015162009b3e620104e8565b9062012915565b62009b5b57600161018051016101805262009b09565b92606062009b76610180979497969396516102205162007fd7565b51015160808301525b80519273ffffffffffffffffffffffffffffffffffffffff602083015115159260a062009bd060405162009bb9602061052401826200658a565b61052481526105246201a90360208301396200b331565b910151936040519662009be38862006446565b87526020870152166040850152610280516060850152608084015260a083015262009c15610200516101c05162007fd7565b5262009c28610200516102a05162007fd7565b52620097dd565b9294919493909362009b7f565b61026051517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908111620007dd5762009c7b906102605162007fd7565b519161022051517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908111620007dd5762009cbc906102205162007fd7565b519362009b03565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810191508111620007dd57604062009b3162009d05926102205162007fd7565b5f62009a79565b9091929360208062009d4a838d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0886001970301905288516200762c565b96019a019101989291909862009a10565b7fa554dcdf000000000000000000000000000000000000000000000000000000005f5260045ffd5b62009e1562009e0a62009dfd62009d9d6102e0516200bb4f565b60c06104a051015173ffffffffffffffffffffffffffffffffffffffff6104a0515116906040519262009dd08462006446565b8352610400516020840152604083015260608201526103605160808201526104a05160a08201526200bbd9565b6102e0929192516200b834565b506104c0516200b7fe565b5062008f56565b5062009e3360406104e0510151620025116200a873565b1562008f50565b5f5b60406104a051015180518210156200a3c0578162009e5a9162007fd7565b519062009e8760405160208082015262009e7d8162000a4460408201876200762c565b6103e0516200b932565b156200a3b95762009eb860405160208082015262009eae8162000a4460408201876200762c565b6103e0516200ee4f565b602081519181808201938492010103126200011a57515b62009ef060405160208082015262009e7d8162000a4460408201886200762c565b156200a3b25762009f1760405160208082015262009eae8162000a4460408201886200762c565b602081519181808201938492010103126200011a57515b1515806200a381575b6200a379575b62009f508260206104a051015162007fd7565b519260c06104a05101519173ffffffffffffffffffffffffffffffffffffffff6104a05151169160a06104a051015162009fb260e06104a051015115159362009f986200a6f0565b506200867f620086426040620082a4610400518b6200b055565b91878310806200a366575b62009fd4575b505050505050600191500162009e3c565b62009fe090866200b20d565b916040519262009ff08462006429565b6104005184526020840190815260408401988952606084019182526080840196875260a0840195865260c084019283526200a02a62008066565b506200a03562008099565b506040908151926200a04883856200658a565b600184526200a07d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084016020860162007fec565b610bc79360208501958451976200a095888a6200658a565b8689526201993098878a60208301396200a0af8462007f00565b526200a0bb8362007f00565b508b5190516200a0cb916200b055565b968451868901516200a0dd916200b0a4565b978b5173ffffffffffffffffffffffffffffffffffffffff1690602001516200a106916200b273565b602001968751998751926200a11c90846200658a565b81835260208301396200a12f906200b331565b938d8c5191519051906200a14392620128b1565b90519162093a808301809311620007dd5785948551996200a1648b62006446565b8a525f60208b015273ffffffffffffffffffffffffffffffffffffffff16858a01526060890152608088015260a087015288519a5190516200a1a69162008825565b845173ffffffffffffffffffffffffffffffffffffffff169460200194855197888b51906200a1d5916200b20d565b9a8480519e8f906200a1e78262006481565b815260208101958652019283528d606081019a8b526080019b8c5251995173ffffffffffffffffffffffffffffffffffffffff1696516200a229818c6200eb3b565b608001516200a238916200af05565b5f1460019d620016d46200a3489d6200a2ae6200a33d9d73ffffffffffffffffffffffffffffffffffffffff6200a2ea986200a2e0976200a355576200a27d6200ef01565b9a5b8c519c8d986020808b01525190890152516060880152511660808601525160a08086015260e08501906200762c565b90517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08483030160c08501526200762c565b610360516200b4f8565b9351948351986200a2fb8a6200640b565b895260208901528288015260608701526200a31b6020915191826200658a565b5f8152608086015260a085015260c08401528560e08401526104c0516200b7fe565b506102e0516200b834565b505f808080808062009fc3565b6200a35f6200eec4565b9a6200a27f565b506200a37381876200b1e2565b62009fbd565b505f62009f3d565b506200a3976200a390620087ab565b846200af05565b8062009f3757506200a3ac6200a3906200b972565b62009f37565b5f62009f2e565b5f62009ecf565b505062008f1c565b5060606104a05101515160806104a051015151141562008887565b604051906200a3f46040836200658a565b600c82527f517561726b2057616c6c657400000000000000000000000000000000000000006020830152565b604051906200a4316040836200658a565b600182527f31000000000000000000000000000000000000000000000000000000000000006020830152565b6200a4676200a3e3565b602081519101206200a4786200a420565b602081519101206040519060208201927fb03948446334eb9b2196d5eb166f69b9d49403eb4a12f36de8d3f9f3cb8e15c3845260408301526060820152606081526200a4c66080826200658a565b51902090565b91906200a4d862007e00565b928051600181145f146200a5a95750909192506200a58a6200a5836200a57c6200a5416200a5068562007f00565b5173ffffffffffffffffffffffffffffffffffffffff60206200a5298962007f00565b510151166200a5388862007f00565b5151916200c784565b946200a57373ffffffffffffffffffffffffffffffffffffffff60206200a5688462007f00565b510151169162007f00565b5151906200c79f565b9262007f00565b516200c82b565b90604051926200a59a8462006515565b83526020830152604082015290565b6001106200a5b5575050565b909192506200a58a6200a5c983836200c62e565b62000a446200a61e6200a5db6200a45d565b9260405192839160208301958690916042927f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201520190565b519020926200a62c6200a45d565b926200c62e565b90602080835192838152019201905f5b8181106200a6515750505090565b825173ffffffffffffffffffffffffffffffffffffffff168452602093840193909201916001016200a643565b90602080835192838152019201905f5b8181106200a69c5750505090565b82518452602093840193909201916001016200a68e565b604051906200a6c46040836200658a565b601482527f4d4f5250484f5f434c41494d5f524557415244530000000000000000000000006020830152565b604051906200a6ff8262006481565b60606080835f81528260208201525f60408201525f838201520152565b916080936200a7596200a7689273ffffffffffffffffffffffffffffffffffffffff80959a99989a16865260a0602087015260a08601906200a633565b9084820360408601526200a67e565b951660608201520152565b604051906200a7846040836200658a565b600682527f424f52524f5700000000000000000000000000000000000000000000000000006020830152565b908151815261012073ffffffffffffffffffffffffffffffffffffffff816200a8516200a83e6200a82b6200a8186200a7fb60208a015161014060208b01526101408a01906200762c565b60408a015160408a015260608a015189820360608b01526200a67e565b608089015188820360808a01526200766f565b60a088015187820360a08901526200a67e565b60c087015186820360c08801526200a633565b948260e08201511660e086015261010081015161010086015201511691015290565b604051906200a8846040836200658a565b600e82527f524543555252494e475f535741500000000000000000000000000000000000006020830152565b5f9493926200a8bf926200cf28565b9273ffffffffffffffffffffffffffffffffffffffff60205f95019216935b60208351015180518210156200a9415773ffffffffffffffffffffffffffffffffffffffff6200a91083889362007fd7565b5116146200a922575b6001016200a8de565b905060016200a9378260408551015162007fd7565b519190506200a919565b505090506200791d9192506103e8810490620085f7565b604051906200a9696040836200658a565b600582527f52455041590000000000000000000000000000000000000000000000000000006020830152565b5f93926200a9a3926200cf28565b602001905f5b60208351015180518210156200aa2d576200a9da8273ffffffffffffffffffffffffffffffffffffffff9262007fd7565b511673ffffffffffffffffffffffffffffffffffffffff8316146200aa03575b6001016200a9a9565b926200aa246001916200aa1c8660608751015162007fd7565b5190620085f7565b9390506200a9fa565b5050505090565b604051906200aa456040836200658a565b600882527f57495448445241570000000000000000000000000000000000000000000000006020830152565b908151815260a073ffffffffffffffffffffffffffffffffffffffff816200aaa9602086015160c0602087015260c08601906200762c565b94604081015160408601528260608201511660608601526080810151608086015201511691015290565b909493926200aae4925f96620115bb565b9273ffffffffffffffffffffffffffffffffffffffff60805f95019216935b82515180518210156200a9415773ffffffffffffffffffffffffffffffffffffffff6200ab3283889362007fd7565b5116146200ab44575b6001016200ab03565b905060016200ab598260208551015162007fd7565b519190506200ab3b565b909493926200ac1660e09373ffffffffffffffffffffffffffffffffffffffff61010085019816845260208401906080809173ffffffffffffffffffffffffffffffffffffffff815116845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015273ffffffffffffffffffffffffffffffffffffffff604082015116604085015273ffffffffffffffffffffffffffffffffffffffff60608201511660608501520151910152565b60c08201520152565b604051906200ac306040836200658a565b600c82527f4d4f5250484f5f524550415900000000000000000000000000000000000000006020830152565b908151815261014073ffffffffffffffffffffffffffffffffffffffff816200acc26200ac9b602087015161016060208801526101608701906200762c565b6040870151604087015260608701516060870152608087015186820360808801526200762c565b9460a081015160a08601528260c08201511660c08601528260e08201511660e086015261010081015161010086015261012081015161012086015201511691015290565b604051906200ad176040836200658a565b600682527f535550504c5900000000000000000000000000000000000000000000000000006020830152565b604051906200ad546040836200658a565b601382527f4d4f5250484f5f5641554c545f535550504c59000000000000000000000000006020830152565b604051906200ad916040836200658a565b600482527f53574150000000000000000000000000000000000000000000000000000000006020830152565b604051906200adce6040836200658a565b600d82527f4d4f5250484f5f424f52524f57000000000000000000000000000000000000006020830152565b6200ae3f9193929373ffffffffffffffffffffffffffffffffffffffff6200ae365f966200ae276200a6f0565b50604062002e4686866200b055565b5116906200e95d565b905f9360208301945b855180518210156200aebf576200ae758273ffffffffffffffffffffffffffffffffffffffff9262007fd7565b511673ffffffffffffffffffffffffffffffffffffffff8416146200ae9e575b6001016200ae48565b936200aeb66001916200aa1c87604088015162007fd7565b9490506200ae95565b50509350505090565b604051906200aed96040836200658a565b601582527f4d4f5250484f5f5641554c545f574954484452415700000000000000000000006020830152565b6200afac60206200afa68180956200af61826200b002976040519681889251918291018484015e81015f8382015203017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018652856200658a565b6040519681889251918291018484015e81015f8382015203017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018652856200658a565b6200e9e2565b6040516200aff86020828180820195805191829101875e81015f8382015203017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826200658a565b519020916200e9e2565b6040516200b04e6020828180820195805191829101875e81015f8382015203017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826200658a565b5190201490565b906200b0606200844f565b915f5b82518110156200b09e57816200b07a828562007fd7565b5151146200b08b576001016200b063565b9190506200b09a925062007fd7565b5190565b50505090565b906200b0af6200a6f0565b915f5b82518110156200b09e576200b0d860206200b0ce838662007fd7565b510151836200af05565b6200b08b576001016200b0b2565b905f5b606083015180518210156200b11e576200b10582849262007fd7565b5151146200b116576001016200b0e9565b505050600190565b505050505f90565b905f90815b608084015180518410156200b166576200b15b60809260206200b1518760019562007fd7565b51015190620085f7565b93019290506200b12b565b5092509050565b905f5b60608301805180518310156200b1b6576200b18d83859262007fd7565b5151146200b19f57506001016200b170565b602093506200b1b092505162007fd7565b51015190565b837f54858456000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b6200b20573ffffffffffffffffffffffffffffffffffffffff926020926200eb3b565b015116151590565b906200b21a81836200b1e2565b6200b2375750506040516200b2316020826200658a565b5f815290565b8060806200b256826200b24f6200b25f95876200eb3b565b956200eb3b565b0151906200af05565b156200b26c576040015190565b6080015190565b906040516200b2828162006550565b5f81525f6020820152505f5b81518110156200b2ef5773ffffffffffffffffffffffffffffffffffffffff6200b2b9828462007fd7565b51511673ffffffffffffffffffffffffffffffffffffffff8416146200b2e2576001016200b28e565b906200b09a925062007fd7565b73ffffffffffffffffffffffffffffffffffffffff837f6a54cc78000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b73ffffffffffffffffffffffffffffffffffffffff906020815191012060405160208101917fff0000000000000000000000000000000000000000000000000000000000000083527f2b68764bcfe9fcd8d5a30a281f141f69b69ae3c800000000000000000000000060218301525f60358301526055820152605581526200b3bb6075826200658a565b5190201690565b51151580806200b4a1575b156200b41157506040516200b3e46040826200658a565b600a81527f51554f54455f43414c4c00000000000000000000000000000000000000000000602082015290565b806200b498575b156200b45b576040516200b42e6040826200658a565b600881527f5041595f43414c4c000000000000000000000000000000000000000000000000602082015290565b6040516200b46b6040826200658a565b600881527f4f4646434841494e000000000000000000000000000000000000000000000000602082015290565b5060016200b418565b505f6200b3cd565b51151580806200b4ef575b156200b4cb57506040516200b3e46040826200658a565b806200b4e757156200b45b576040516200b42e6040826200658a565b505f6200b418565b5060016200b4b4565b5115159081806200b544575b156200b51c5750506040516200b3e46040826200658a565b816200b53a575b50156200b45b576040516200b42e6040826200658a565b9050155f6200b523565b50806200b504565b6200b55662008131565b5060405160206200b56881836200658a565b5f82525f90604051926200b57c8462006550565b835282015290565b6040516200b592816200656d565b6200b59c62008131565b90526200b5a86200b54c565b604051906200b5b7826200656d565b815290565b90929192836200b5ce8484846200b734565b10156200b72e575f915f5b84518110156200b6e5576200b5ff60406200b5f5838862007fd7565b510151846200b0a4565b826200b60c838862007fd7565b51511480156200b6a0575b6200b687575b50816200b62b828762007fd7565b515114806200b66f575b6200b644575b6001016200b5d9565b926200b66660019162008685876200b65d888262007fd7565b5151876200ebb9565b9390506200b63b565b506200b6818362008671838862007fd7565b6200b635565b93620086856200b69892956200b126565b925f6200b61d565b506200b6ad828762007fd7565b515184846200b6be82828562011b72565b9283156200b6d0575b5050506200b617565b6200b6dc935062011bd9565b84845f6200b6c7565b505091508281106200b6f657505050565b620083da906040519384937f08b61efa0000000000000000000000000000000000000000000000000000000085526004850162008833565b50505050565b91906200b7406200a6f0565b506200b7606200864260406200b75785856200b055565b0151856200b0a4565b926200b76d81836200b1e2565b6200b7785750505090565b9162008685916200b78a94936200ebb9565b5f80806200b09e565b906200b7c36200791d936040516200b7ab816200656d565b6200b7b562008131565b90526200867f83856200eced565b916040516200b7d2816200656d565b6200b7dc62008131565b9052604051926020840152602083526200b7f86040846200658a565b620127e9565b620005a4906200b82e6200791d936200b81662008131565b506040519384916020808401526040830190620076e9565b6200ed2c565b620005a4906200b82e6200791d936200b84c62008131565b50604051938491602080840152604083019062007758565b81601f820112156200011a576020815191016200b88182620065cc565b926200b89160405194856200658a565b828452828201116200011a57815f926020928386015e8301015290565b6020818303126200011a5780519067ffffffffffffffff82116200011a57016040818303126200011a57604051916200b8e78362006550565b815167ffffffffffffffff81116200011a57816200b9079184016200b864565b8352602082015167ffffffffffffffff81116200011a576200b92a92016200b864565b602082015290565b905f5b825160208101518210156200b11e57620090cb826200b954926200ee35565b516020815191012082516020840120146200b116576001016200b935565b604051906200b9836040836200658a565b600482527f57455448000000000000000000000000000000000000000000000000000000006020830152565b906200b9bb8262006681565b6200b9ca60405191826200658a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06200b9fa829462006681565b01905f5b8281106200ba0b57505050565b6020906200ba1862008099565b828285010152016200b9fe565b519073ffffffffffffffffffffffffffffffffffffffff821682036200011a57565b6020818303126200011a5780519067ffffffffffffffff82116200011a570190610100828203126200011a57604051916200ba82836200640b565b805183526200ba94602082016200ba25565b6020840152604081015167ffffffffffffffff81116200011a57826200babc9183016200b864565b6040840152606081015167ffffffffffffffff81116200011a57826200bae49183016200b864565b6060840152608081015167ffffffffffffffff81116200011a57826200bb0c9183016200b864565b608084015260a081015167ffffffffffffffff81116200011a5760e0926200bb369183016200b864565b60a084015260c081015160c0840152015160e082015290565b9060208201916200bb6183516200b9af565b915f5b84518110156200bbb457806200bb936200bb82600193865162007fd7565b51602080825183010191016200ba47565b6200bb9f828762007fd7565b526200bbac818662007fd7565b50016200bb64565b5092505090565b9291906200bbd46020916040865260408601906200762c565b930152565b906200bbe462008066565b506200bbef62008099565b506200bbfa6200b54c565b6200bc046200b584565b926200bc0f6200b584565b602060808301510151925f5b86845180518310156200bcc0578291876200bc3d6001956200bc809462007fd7565b516200bc4b8151886200ef3e565b156200bc87575b60a089015160208a0151918973ffffffffffffffffffffffffffffffffffffffff60608d015116956200f386565b016200bc1b565b6200bcb981516200bc9762008131565b50604051906020820152602081526200bcb26040826200658a565b886200ed2c565b506200bc52565b505050939290915f926040925b602083015180518610156200c29c57856200bce89162007fd7565b5151946200bd0660808501516200bcff8a6201044b565b90620104ab565b926200bd13878a6200ef3e565b156200c27f575b6200bd2f866200b5f584602089015162007fd7565b6200bd3a816200b126565b9073ffffffffffffffffffffffffffffffffffffffff6200bd5f608083015162007f00565b5151169a5f5b608083015180518210156200c269576200bd828260209262007fd7565b5101516200bd93576001016200bd65565b6200bdc4919495939d969798999a9b9c50608073ffffffffffffffffffffffffffffffffffffffff93015162007fd7565b5151169a5b6200bdf76200bdf08a518c6020820152602081526200bde98c826200658a565b876200eced565b82620085f7565b6200be138a518c6020820152602081526200930c8c826200658a565b116200c22c576200be636200be478892620086858d6200be408e805192602084015260208352826200658a565b896200eced565b6200936a8b518d6020820152602081526200bde98d826200658a565b106200c2165750505050602083015194608060a0808601510151948651976200be8c8962006446565b8852602088019384528688019485526060880192835273ffffffffffffffffffffffffffffffffffffffff8289019a168a5260a088019586520151916200bed262008066565b506200bedd62008099565b506200bfa76200bf826200bf758851996200bef98a8c6200658a565b60018b526200bf2e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08b0160208d0162007fec565b89516200bf41602061040c01826200658a565b61040c815261040c6201a4f760208301396200bf5d8c62007f00565b526200bf698b62007f00565b5085519051906200b055565b925188840151906200b0a4565b91602073ffffffffffffffffffffffffffffffffffffffff8c5116910151906200b273565b9373ffffffffffffffffffffffffffffffffffffffff825116956020825196898701978851908b519a7f3e8bca6800000000000000000000000000000000000000000000000000000000858d0152737ea8d6119596016935543d90ee8f5126285060a160248d015260448c015260648b015260848a0152608489526200c02f60a48a6200658a565b01968751996200c0628a516200c04b602061040c01826200658a565b61040c815261040c6201a4f760208301396200b331565b92519262093a808401809411620007dd578a519b6200c0818d62006446565b8c5260208c015f905273ffffffffffffffffffffffffffffffffffffffff168a8c015260608b015260808a015260a089015251936060820151825173ffffffffffffffffffffffffffffffffffffffff1692602001519184519051928951976200c0eb8962006429565b88526020880152888701526060860152737ea8d6119596016935543d90ee8f5126285060a1608086015260a085015260c084015251965173ffffffffffffffffffffffffffffffffffffffff16936200c143620104e8565b90805192838560208201906200c1599162010525565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810185526200c18b90856200658a565b8151809560208201906200c19f9162010525565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810186526200c1d190866200658a565b6200c1dc906200b4a9565b9451958151996200c1ed8b6200640b565b8a5260208a01528801526060870152608086015260a085015260c0840152600160e08401529190565b929950979650600190910194939250906200bccd565b88620096a88b86620093496200c2558a865190856020830152602082526200934988836200658a565b94805193602085015260208452836200658a565b505092939190509a939495969798999a6200bdc9565b926200c29590620086858860808801516200b16d565b926200bd1a565b875f83878288815b602082019283519081518310156200c3d657506200c2c482869262007fd7565b5151936200c2db60808501516200bcff8b6201044b565b946200c2e8818b6200ef3e565b156200c3a6575b506200864285926200c307856200c311945162007fd7565b510151886200b0a4565b10156200c321576001016200c2a4565b5050935090915060015b156200c36757620083da90519283927f90f07adc000000000000000000000000000000000000000000000000000000008452600484016200bbbb565b620083da9250519182917f2d0bf7550000000000000000000000000000000000000000000000000000000083526020600484015260248301906200762c565b6200c31191926200c3076200c3ca869862008685620086429560808b01516200b16d565b9750509291506200c2ef565b97505050505090916200c32b565b906200c3f08262006681565b6200c3ff60405191826200658a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06200c42f829462006681565b01905f5b8281106200c44057505050565b6020906200c44d62008066565b828285010152016200c433565b519081151582036200011a57565b9080601f830112156200011a5781516200c4828162006681565b926200c49260405194856200658a565b81845260208085019260051b820101918383116200011a5760208201905b8382106200c4c057505050505090565b815167ffffffffffffffff81116200011a576020916200c4e6878480948801016200b864565b8152019101906200c4b0565b6020818303126200011a5780519067ffffffffffffffff82116200011a57019060c0828203126200011a57604051916200c52c8362006446565b805183526200c53e602082016200c45a565b60208401526200c551604082016200ba25565b6040840152606081015167ffffffffffffffff81116200011a57826200c5799183016200c468565b6060840152608081015167ffffffffffffffff81116200011a5760a0926200c5a39183016200b864565b6080840152015160a082015290565b9060208201916200c5c483516200c3e4565b915f5b84518110156200bbb457806200c5f66200c5e5600193865162007fd7565b51602080825183010191016200c4f2565b6200c602828762007fd7565b526200c60f818662007fd7565b50016200c5c7565b60209291908391805192839101825e019081520190565b9190825181510362009d5b578251927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06200c6866200c66d8662006681565b956200c67d60405197886200658a565b80875262006681565b013660208601375f5b81518110156200c6f457806200c6e06200c6ac6001938562007fd7565b5173ffffffffffffffffffffffffffffffffffffffff60206200c6d0858962007fd7565b510151166200a538848862007fd7565b6200c6ec828862007fd7565b52016200c68f565b50505060605f905b83518210156200c738576001906200c72f6200c719848762007fd7565b519162000a44604051938492602084016200c617565b9101906200c6fc565b919250506020815191012060405160208101917f92b2d9efc73bc6e6227406913cdbf4db958591519ece35c0b8a0892e798cee4683526040820152604081526200a4c66060826200658a565b6200a5db62000a4492936200c79d6200a4c6936200c82b565b945b9073ffffffffffffffffffffffffffffffffffffffff6200c7bf6200a3e3565b60208151910120926200c7d16200a420565b60208151910120926040519360208501957f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f87526040860152606085015260808401521660a082015260a081526200a4c660c0826200658a565b905f60605b606084015180518310156200c87857906200c86f6200c8528460019462007fd7565b51602081519101209162000a44604051938492602084016200c617565b9101906200c830565b5091929050805191602082015115159173ffffffffffffffffffffffffffffffffffffffff604082015116916020815191012060a0608083015160208151910120920151926040519460208601967f36ab2d79fec03d49d0f2f9baae952f47b4d0e0f6194a22d1394e3f3988191f2a885260408701526060860152608085015260a084015260c083015260e082015260e081526200a4c6610100826200658a565b906200c9246200a6f0565b915f5b82518110156200b09e5773ffffffffffffffffffffffffffffffffffffffff6200c952828562007fd7565b51511673ffffffffffffffffffffffffffffffffffffffff8316146200b08b576001016200c927565b60206200c98882620106fa565b01805190919073ffffffffffffffffffffffffffffffffffffffff16156200c9c557505173ffffffffffffffffffffffffffffffffffffffff1690565b608490604051907f24c0c2f900000000000000000000000000000000000000000000000000000000825260406004830152600760448301527f556e69737761700000000000000000000000000000000000000000000000000060648301526024820152fd5b604051906200ca3b6040836200658a565b600482527f55534443000000000000000000000000000000000000000000000000000000006020830152565b6200ca75620081966200b972565b156200ca8657506200791d620087ab565b6200ca94620081966200ca2a565b156200791d57506200791d620080da565b90916200cabf6200791d936040845260408401906200762c565b9160208184039101526200762c565b9291906200cae96200cae18386620109ff565b9282620109ff565b905f945b83518610156200cc74576200cb1360206200cb09888762007fd7565b510151826200af05565b806200cc5b575b156200cbbd5750505073ffffffffffffffffffffffffffffffffffffffff60606200cb9c6040958651946200cb5088876200658a565b600186527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08801803660208901376200cb8c8951998a6200658a565b600189523660208a013762007fd7565b510151166200cbab8262007f00565b525f6200cbb88462007f00565b529190565b9091946200cbd260406200b0ce838762007fd7565b806200cc38575b6200cbea576001019491906200caed565b9450505073ffffffffffffffffffffffffffffffffffffffff60606200cc1b6040958651946200cb5088876200658a565b510151166200cc2a8262007f00565b5260016200cbb88462007f00565b506200cc5560206200cc4b838762007fd7565b510151846200af05565b6200cbd9565b506200cc6e60406200b0ce888762007fd7565b6200cb1a565b9094505f905b83518210156200ceef57945f955b83518710156200cee1576200ccbf60206200cca4858862007fd7565b51015160206200ccb58a8862007fd7565b510151906200af05565b156200cd835750506200cd6760029573ffffffffffffffffffffffffffffffffffffffff93846200cd4a946060958691604051996200ccff848c6200658a565b8c8b527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08401803660208e01376040519d8e6200cd3d87826200658a565b523660208f013762007fd7565b510151166200cd598762007f00565b5260016200561c8962007f00565b510151166200cd768262007f3b565b525f6200cbb88462007f3b565b6200cd9560406200cca4858862007fd7565b156200cdf15750506200cd6760029573ffffffffffffffffffffffffffffffffffffffff93846200cdd5946060958691604051996200ccff848c6200658a565b510151166200cde48762007f00565b525f6200561c8962007f00565b6200ce1460206200ce03858862007fd7565b51015160406200ccb58a8862007fd7565b156200ce715750506200ce5460029573ffffffffffffffffffffffffffffffffffffffff93846200cd4a946060958691604051996200ccff848c6200658a565b510151166200ce638262007f3b565b5260016200cbb88462007f3b565b90956200ce9660406200ce85858862007fd7565b51015160406200ccb5848862007fd7565b6200cea65760010195906200cc88565b600296506200ce54915073ffffffffffffffffffffffffffffffffffffffff93846200cdd5946060958691604051996200ccff848c6200658a565b95509060010190946200cc7a565b8590620083da6040519283927fa695bfcd000000000000000000000000000000000000000000000000000000008452600484016200caa5565b916200cf77906040516200cf3c8162006515565b5f81526040516200cf4d81620064f8565b5f81526060602082015260606040820152606080820152602082015260606040820152936200b055565b606001905f5b825180518210156200aa2d576200cfaa8273ffffffffffffffffffffffffffffffffffffffff9262007fd7565b51511673ffffffffffffffffffffffffffffffffffffffff8316146200cfd3576001016200cf7d565b9190506200b09a92505162007fd7565b6001811480156200d06d575b80156200d060575b156200d016575073bbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb90565b62aa36a7036200d0385773d011ee229e7459ba1ddd22631ef7bf528d424a1490565b7fc08c7297000000000000000000000000000000000000000000000000000000005f5260045ffd5b5062014a3481146200cff7565b5061210581146200cfef565b604051906200d0888262006481565b5f6080838281528260208201528260408201528260608201520152565b6200d0af6200d079565b506040516200d0be816200656d565b6200d0c862008131565b90526200d0d46200b584565b916200d1926040516200d0e78162006515565b600181526200d0f56200ca2a565b60208201526200d104620116d2565b6040820152604051906200d1188262006481565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48825273cbb7c0000ab88b473b1f5afd9ef808440eed33bf602083015273a6d6950c9f177f1de7f7757fb33539e3ec60182a604083015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528562012c4e565b6200d24f6040516200d1a48162006515565b600181526200d1b26200ca2a565b60208201526200d1c16201170f565b6040820152604051906200d1d58262006481565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488252732260fac5e5542a773aa44fbcfedf7c193bc2c599602083015273dddd770badd886df3864029e4b377b5f6a2b6b83604083015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528562012c4e565b6200d30b6040516200d2618162006515565b600181526200d26f6201174c565b60208201526200d27e6201170f565b6040820152604051906200d2928262006481565b73dac17f958d2ee523a2206206994597c13d831ec78252732260fac5e5542a773aa44fbcfedf7c193bc2c5996020830152728bf4b1cda0cc9f0e882e0697f036667652e1ef604083015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528562012c4e565b6200d3c86040516200d31d8162006515565b600181526200d32b6200b972565b60208201526200d33a6201170f565b6040820152604051906200d34e8262006481565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28252732260fac5e5542a773aa44fbcfedf7c193bc2c599602083015273c29b3bc033640bae31ca53f8a0eb892adf68e663604083015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670cb2bba6f17b800060808301528562012c4e565b6200d4856040516200d3da8162006515565b600181526200d3e862011789565b60208201526200d3f76201170f565b6040820152604051906200d40b8262006481565b736c3ea9036406852006290770bedfcaba0e23a0e88252732260fac5e5542a773aa44fbcfedf7c193bc2c599602083015273c53c90d6e9a5b69e4abf3d5ae4c79225c7fef3d2604083015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528562012c4e565b6200d5426040516200d4978162006515565b600181526200d4a5620117c6565b60208201526200d4b46201170f565b6040820152604051906200d4c88262006481565b73a0d69e286b938e21cbf7e51d71f6a4c8918f482f8252732260fac5e5542a773aa44fbcfedf7c193bc2c599602083015273032f1c64899b2c89835e51aced9434b0adeaa69d604083015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528562012c4e565b604051936200d5518562006515565b600185526200d62c60409586516200d56a88826200658a565b600481527f5553444100000000000000000000000000000000000000000000000000000000602082015260208201526200d5a36201170f565b878201528651906200d5b58262006481565b71206329b97db379d5e1bf586bbdb969c632748252732260fac5e5542a773aa44fbcfedf7c193bc2c599602083015273032f1c64899b2c89835e51aced9434b0adeaa69d8883015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528662012c4e565b6200d6e585516200d63d8162006515565b600181526200d64b6200b972565b60208201526200d65a62011803565b878201528651906200d66c8262006481565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28252737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0602083015273bd60a6770b27e084e8617335dde769241b0e71d88883015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670d1d507e40be800060808301528662012c4e565b6200d79e85516200d6f68162006515565b600181526200d7046200ca2a565b60208201526200d71362011803565b878201528651906200d7258262006481565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488252737f39c581f595b53c5cb19bd0b3f8da6c935e2ca060208301527348f7e36eb6b826b2df4b2e630b62cd25e89e40e28883015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528662012c4e565b6200d7af85516200d6f68162006515565b6200d86885516200d7c08162006515565b600181526200d7ce6201174c565b60208201526200d7dd62011803565b878201528651906200d7ef8262006481565b73dac17f958d2ee523a2206206994597c13d831ec78252737f39c581f595b53c5cb19bd0b3f8da6c935e2ca060208301527395db30fab9a3754e42423000df27732cb23969928883015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528662012c4e565b6200d92185516200d8798162006515565b600181526200d887620117c6565b60208201526200d89662011803565b878201528651906200d8a88262006481565b73a0d69e286b938e21cbf7e51d71f6a4c8918f482f8252737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0602083015273bc693693fdbb177ad05ff38633110016bc043ac58883015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528662012c4e565b6200d9da85516200d9328162006515565b600181526200d94062011789565b60208201526200d94f62011803565b878201528651906200d9618262006481565b736c3ea9036406852006290770bedfcaba0e23a0e88252737f39c581f595b53c5cb19bd0b3f8da6c935e2ca060208301527327679a17b7419fb10bd9d143f21407760fda5c538883015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528662012c4e565b6200dac185516200d9eb8162006515565b600181526200d9f96200b972565b602082015286516200da0c88826200658a565b600581527f77654554480000000000000000000000000000000000000000000000000000006020820152878201528651906200da488262006481565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2825273cd5fe23c85820f7b72d0926fc9b05b43e359b7ee6020830152733fa58b74e9a8ea8768eb33c8453e9c2ed089a40a8883015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528662012c4e565b6200dba885516200dad28162006515565b600181526200dae06200ca2a565b602082015286516200daf388826200658a565b600381527f4d4b5200000000000000000000000000000000000000000000000000000000006020820152878201528651906200db2f8262006481565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488252739f8f72aa9304c8b593d555f12ef6589cc3a579a26020830152736686788b4315a4f93d822c1bf73910556fce2d5a8883015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670aaf96eb9d0d000060808301528662012c4e565b6200dc8f85516200dbb98162006515565b600181526200dbc762011840565b602082015286516200dbda88826200658a565b600481527f55534465000000000000000000000000000000000000000000000000000000006020820152878201528651906200dc168262006481565b736b175474e89094c44da98b954eedeac495271d0f8252734c9edd5852cd905f086c759e8383e09bff1e68b3602083015273ae4750d0813b5e37a51f7629beedd72af1f9ca358883015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528662012c4e565b6200dd7685516200dca08162006515565b600181526200dcae62011840565b602082015286516200dcc188826200658a565b600581527f73555344650000000000000000000000000000000000000000000000000000006020820152878201528651906200dcfd8262006481565b736b175474e89094c44da98b954eedeac495271d0f8252739d39a5de30e57443bff2a8307a4256c8797a34976020830152735d916980d5ae1737a8330bf24df812b2911aae258883015273870ac11d48b15db9a138cf899d20f13f79ba00bc6060830152670bef55718ad6000060808301528662012c4e565b6200de3085516200dd878162006515565b61210581526200dd966200ca2a565b60208201526200dda5620116d2565b878201528651906200ddb78262006481565b73833589fcd6edb6e08f4c7c32d4f71b54bda02913825273cbb7c0000ab88b473b1f5afd9ef808440eed33bf602083015273663becd10dae6c4a3dcd89f1d76c1174199639b9888301527346415998764c29ab2a25cbea6254146d50d226876060830152670bef55718ad6000060808301528662012c4e565b6200deea85516200de418162006515565b61210581526200de506200ca2a565b60208201526200de5f6200b972565b878201528651906200de718262006481565b73833589fcd6edb6e08f4c7c32d4f71b54bda029138252734200000000000000000000000000000000000006602083015273fea2d58cefcb9fcb597723c6bae66ffe4193afe4888301527346415998764c29ab2a25cbea6254146d50d226876060830152670bef55718ad6000060808301528662012c4e565b6200dfa485516200defb8162006515565b61210581526200df0a6200b972565b60208201526200df1962011803565b878201528651906200df2b8262006481565b734200000000000000000000000000000000000006825273c1cba3fcea344f92d9239c08c0568f6f2f0ee4526020830152734a11590e5326138b514e08a9b52202d42077ca65888301527346415998764c29ab2a25cbea6254146d50d226876060830152670d1d507e40be800060808301528662012c4e565b6200e05e85516200dfb58162006515565b61210581526200dfc46200ca2a565b60208201526200dfd36201187d565b878201528651906200dfe58262006481565b73833589fcd6edb6e08f4c7c32d4f71b54bda029138252732ae3f1ec7f1f5012cfeab0185bfc7aa3cf0dec22602083015273b40d93f44411d8c09ad17d7f88195ef9b05ccd96888301527346415998764c29ab2a25cbea6254146d50d226876060830152670bef55718ad6000060808301528662012c4e565b6200e11885516200e06f8162006515565b61210581526200e07e6200b972565b60208201526200e08d6201187d565b878201528651906200e09f8262006481565b7342000000000000000000000000000000000000068252732ae3f1ec7f1f5012cfeab0185bfc7aa3cf0dec22602083015273b03855ad5afd6b8db8091dd5551cac4ed621d9e6888301527346415998764c29ab2a25cbea6254146d50d226876060830152670d1d507e40be800060808301528662012c4e565b6200e1d285516200e1298162006515565b61210581526200e138620117c6565b60208201526200e1476201187d565b878201528651906200e1598262006481565b73cfa3ef56d303ae4faaba0592388f19d7c3399fb48252732ae3f1ec7f1f5012cfeab0185bfc7aa3cf0dec22602083015273c3fa71d77d80f671f366daa6812c8bd6c7749cec888301527346415998764c29ab2a25cbea6254146d50d226876060830152670bef55718ad6000060808301528662012c4e565b6200e2ba85516200e1e38162006515565b61210581526200e1f26200b972565b602082015286516200e20588826200658a565b600581527f657a4554480000000000000000000000000000000000000000000000000000006020820152878201528651906200e2418262006481565b7342000000000000000000000000000000000000068252732416092f143378750bb29b79ed961ab195cceea5602083015273cca88a97de6700bb5dadf4082cf35a55f383af05888301527346415998764c29ab2a25cbea6254146d50d226876060830152670cb2bba6f17b800060808301528662012c4e565b6200e37585516200e2cb8162006515565b62aa36a781526200e2db6200ca2a565b60208201526200e2ea6200b972565b878201528651906200e2fc8262006481565b731c7d4b196cb0c7b01d743fbc6116a902379c72388252732d5ee574e710219a521449679a4a7f2b43f046ad602083015273af02d46ada7bae6180ac2034c897a44ac11397b288830152738c5ddcd3f601c91d1bf51c8ec26066010acaba7c6060830152670d1d507e40be800060808301528662012c4e565b6200e43085516200e3868162006515565b62014a3481526200e3966200ca2a565b60208201526200e3a56200b972565b878201528651906200e3b78262006481565b73036cbd53842c5426634e7929541ec2318f3dcf7e82527342000000000000000000000000000000000000066020830152731631366c38d49ba58793a5f219050923fbf24c81888301527346415998764c29ab2a25cbea6254146d50d226876060830152670cb2bba6f17b800060808301528662012c4e565b8451926200e43e8462006515565b83526020830152838201526200e4536200d079565b506200e47583516200e46e8162000a448560208301620118ba565b836200b932565b156200e50e576200e49e916200e498620005a492855193849160208301620118ba565b6200ee4f565b60a0818051810103126200011a5760a0908251926200e4bd8462006481565b6200e4cb602083016200ba25565b84526200e4da8183016200ba25565b60208501526200e4ed606083016200ba25565b908401526200e4ff608082016200ba25565b60608401520151608082015290565b7f21cd21df000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040516200e5c86020820180936080809173ffffffffffffffffffffffffffffffffffffffff815116845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015273ffffffffffffffffffffffffffffffffffffffff604082015116604085015273ffffffffffffffffffffffffffffffffffffffff60608201511660608501520151910152565b60a081526200a4c660c0826200658a565b6040516200e5e7816200656d565b6200e5f162008131565b90526200e5fd6200b584565b916200e67162000a446200e63b6040516200e6188162006550565b600181526200e6266200ca2a565b6020820152604051928391602083016201191b565b60405190738eb67a509616cd6a7c1b3c8c21d48ff57df3d4586020830152602082526200e66a6040836200658a565b85620127e9565b506200e6c962000a446200e69a6040516200e68c8162006550565b600181526200e6266201174c565b60405190738cb3649114051ca5119141a34c200d65dc0faa736020830152602082526200e66a6040836200658a565b506200e72162000a446200e6f26040516200e6e48162006550565b600181526200e6266200b972565b60405190734881ef0bf6d2365d3dd6499ccd7532bcdbce06586020830152602082526200e66a6040836200658a565b506200e77962000a446200e74a6040516200e73c8162006550565b600181526200e6266201170f565b6040519073443df5eee3196e9b2dd77cabd3ea76c3dee8f9b26020830152602082526200e66a6040836200658a565b506200e7d262000a446200e7a36040516200e7948162006550565b61210581526200e6266200ca2a565b6040519073c1256ae5ff1cf2719d4937adb3bbccab2e00a2ca6020830152602082526200e66a6040836200658a565b506200e82b62000a446200e7fc6040516200e7ed8162006550565b61210581526200e6266200b972565b6040519073a0e430870c4604ccfc7b38ca7845b1ff653d0ff16020830152602082526200e66a6040836200658a565b506200e88562000a446200e8566040516200e8468162006550565b62aa36a781526200e6266200ca2a565b604051907362559b2707013890fbb111280d2ae099a2efc3426020830152602082526200e66a6040836200658a565b50604051916200e8958362006550565b825260208201526200e8b76040516200e46e8162000a4485602083016201191b565b156200e90f576200e8db916200e498620005a492604051938491602083016201191b565b6020818051810103126200011a576020015173ffffffffffffffffffffffffffffffffffffffff81168091036200011a5790565b7fce06bfd8000000000000000000000000000000000000000000000000000000005f5260045ffd5b604051906200e94682620064f8565b5f6060838281528160208201528160408201520152565b916200e974906200e96d6200e937565b936200b055565b60a001905f5b825180518210156200aa2d576200e9a78273ffffffffffffffffffffffffffffffffffffffff9262007fd7565b51511673ffffffffffffffffffffffffffffffffffffffff8316146200cfd3576001016200e97a565b90815181101562007f0e570160200190565b905f5b82518110156200eb0c577f41000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000006200ea3d83866200e9d0565b51161015806200eab3575b6200ea57575b6001016200e9e5565b60206200ea6582856200e9d0565b5160f81c019060ff8211620007dd577fff0000000000000000000000000000000000000000000000000000000000000060019260f81b165f1a6200eaaa82866200e9d0565b5390506200ea4e565b507f5a000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000006200eb0283866200e9d0565b511611156200ea48565b50565b604051906200eb1e8262006481565b60606080835f81525f60208201528260408201525f838201520152565b6200eb456200eb0f565b915f5b6200eb526201193e565b518110156200b09e576200eb70816200eb6a6201193e565b62007fd7565b5183815114806200eb8b575b620087a357506001016200eb48565b506200eb9c6040820151846200af05565b806200eb7c57506200ebb36080820151846200af05565b6200eb7c565b91906200ebc783826200b1e2565b6200ebf4577f468041b4000000000000000000000000000000000000000000000000000000005f5260045ffd5b6200ec046200791d93826200b20d565b604062002e466200791d94620086429462002e6a6200a6f0565b926200ec2962008066565b506200ec3462008099565b50606084016200ec66815160a08701906200ec5982519160208a019283519162011bd9565b9351915190519162011b72565b91156200ecc057156200ec8357506200ec7f9262011d30565b9091565b6200ecb557505050505b7f8be078ea000000000000000000000000000000000000000000000000000000005f5260045ffd5b6200ec7f926201238d565b90156200ecd357506200ec7f926201238d565b6200ece257505050506200ec8d565b6200ec7f9262011d30565b6200ed1391604051915f6020840152602083526200ed0d6040846200658a565b6201276f565b602081519181808201938492010103126200011a575190565b906200ed3762008131565b5060208201908151835151809110156200ed75575b506200ed639083518351916200561c838362007fd7565b506200ed708151620084f7565b905290565b80600195929493951b9080820460021490151715620007dd5760018101809111620007dd576200eda5906200800a565b935f5b81518110156200ede457806200edc2600192865162007fd7565b516200edcf828962007fd7565b526200eddc818862007fd7565b50016200eda8565b509382529290916200ed636200ed4c565b6020810151156200ee0d575f6200b09a915162007fd7565b7fd3482f7b000000000000000000000000000000000000000000000000000000005f5260045ffd5b9060208201518110156200ee0d576200b09a915162007fd7565b905f5b825160208101518210156200ee9c57620090cb826200ee71926200ee35565b80516020815191012083516020850120146200ee9157506001016200ee52565b602001519392505050565b7f5f3f479c000000000000000000000000000000000000000000000000000000005f5260045ffd5b604051906200eed56040836200658a565b600482527f57524150000000000000000000000000000000000000000000000000000000006020830152565b604051906200ef126040836200658a565b600682527f554e5752415000000000000000000000000000000000000000000000000000006020830152565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff916200ef8591604051916020830152602082526200ef7f6040836200658a565b62013489565b141590565b604051906200ef9b6040836200658a565b600682527f42524944474500000000000000000000000000000000000000000000000000006020830152565b6020818303126200011a5780519067ffffffffffffffff82116200011a570160c0818303126200011a57604051916200f0008362006446565b8151835260208201519167ffffffffffffffff83116200011a576200f02e60a0926200f0619483016200b864565b6020850152604081015160408501526200f04b606082016200ba25565b606085015260808101516080850152016200ba25565b60a082015290565b9080601f830112156200011a5781516200f0838162006681565b926200f09360405194856200658a565b81845260208085019260051b8201019283116200011a57602001905b8282106200f0bd5750505090565b81518152602091820191016200f0af565b9080601f830112156200011a5781516200f0e88162006681565b926200f0f860405194856200658a565b81845260208085019260051b8201019283116200011a57602001905b8282106200f1225750505090565b602080916200f131846200ba25565b8152019101906200f114565b6020818303126200011a5780519067ffffffffffffffff82116200011a5701610140818303126200011a57604051916200f17783620064bc565b81518352602082015167ffffffffffffffff81116200011a57816200f19e9184016200b864565b602084015260408201516040840152606082015167ffffffffffffffff81116200011a57816200f1d09184016200f069565b6060840152608082015167ffffffffffffffff81116200011a57816200f1f89184016200c468565b608084015260a082015167ffffffffffffffff81116200011a57816200f2209184016200f069565b60a084015260c08201519167ffffffffffffffff83116200011a576200f250610120926200f27b9483016200f0ce565b60c08501526200f26360e082016200ba25565b60e0850152610100810151610100850152016200ba25565b61012082015290565b6020818303126200011a5780519067ffffffffffffffff82116200011a5701610160818303126200011a57604051916200f2be8362006463565b81518352602082015167ffffffffffffffff81116200011a57816200f2e59184016200b864565b6020840152604082015160408401526060820151606084015260808201519167ffffffffffffffff83116200011a576200f329610140926200f37d9483016200b864565b608085015260a081015160a08501526200f34660c082016200ba25565b60c08501526200f35960e082016200ba25565b60e0850152610100810151610100850152610120810151610120850152016200ba25565b61014082015290565b9390949592919260408401926200f3a28451620025116200ef8a565b156200f52357505050506060015190815182019360208501926020818703126200011a57602081015167ffffffffffffffff81116200011a57019461012090869003126200011a57604051926200f3f9846200649e565b602086015167ffffffffffffffff81116200011a578160206200f41f928901016200b864565b845260408601519067ffffffffffffffff82116200011a5760206200f447928801016200b864565b6020840152606085015191604084019283526200f4bd6080870151926060860193845260a088015195608081019687526200f4b061012060c08b01519a60a084019b8c5260e081015160c08501526200f4a461010082016200ba25565b60e0850152016200ba25565b610100820152516200af05565b6200f4cb575b505050505050565b6200f516956200f4f9925190604051916020830152602082526200f4f16040836200658a565b51916200b793565b505190604051916020830152602082526200f4f16040836200658a565b505f80808080806200f4c3565b6200f5398499989997969751620025116200a773565b156200f630575050505060606200f55c910151602080825183010191016200f13d565b916200f56d8560208501516200af05565b6200f5fb575b5060808201925f5b845180518210156200f5f257906200f5a2876200f59b8360019562007fd7565b516200af05565b6200f5af575b016200f57b565b6200f5eb6040860151604051906020820152602081526200f5d26040826200658a565b6200f5e283606089015162007fd7565b5190866200b793565b506200f5a8565b50509350505050565b6200f628906040840151604051906020820152602081526200f61f6040826200658a565b8451916200b793565b505f6200f573565b6200f64584999697989951620025116200adbd565b156200f6fe5750505050906200f66d60606200f690930151602080825183010191016200f284565b936200f67e8260208701516200af05565b6200f6c9575b5060808401516200af05565b6200f699575050565b81606060406200eb0c94015191604051926020840152602083526200f6c06040846200658a565b0151916200b793565b6200f6f6906040860151604051906020820152602081526200f6ed6040826200658a565b8651916200b793565b505f6200f684565b8395979691929351956200f74d6040978851906200f71d8a836200658a565b600d82527f434c41494d5f524557415244530000000000000000000000000000000000000060208301526200af05565b156200f83a575050505050606001519283518401936020818603126200011a5760208101519067ffffffffffffffff82116200011a57019360a0858203126200011a578251916200f79e8362006481565b60208601518352838601519167ffffffffffffffff83116200011a576200f806926020806200f7d29301918901016200b864565b8060208501526200f7fb60a0606089015198878701998a5260808101516060880152016200ba25565b60808501526200af05565b6200f8115750505050565b6200f4f16200f82f945192805193602085015260208452836200658a565b505f8080806200b72e565b6200f84f819a9897999a51620025116200a6b3565b156200f9d05750505050506060015192835184019360208501906020818703126200011a57602081015167ffffffffffffffff81116200011a57019460a090869003126200011a578151936200f8a58562006481565b602086015167ffffffffffffffff81116200011a578260206200f8cb928901016200f069565b85528286015167ffffffffffffffff81116200011a578260206200f8f2928901016200c468565b9560208601968752606081015192848701938452608082015167ffffffffffffffff81116200011a578160206200f92c928501016200f069565b606088015260a08201519167ffffffffffffffff83116200011a576200f95692016020016200f0ce565b60808601525f5b865180518210156200f9c557906200f97d896200f59b8360019562007fd7565b6200f98a575b016200f95d565b6200f9be84518651906020820152602081526200f9a887826200658a565b6200f9b5838a5162007fd7565b5190886200b793565b506200f983565b505095505050505050565b6200f9e9819a969394959997989a51620025116200ac1f565b156200fb16575050906200fa1160606200fa369594930151602080825183010191016200f284565b966200fa228460208a01516200af05565b6200fa63575b50505060808501516200af05565b6200fa4057505050565b6060836200f6c0836200eb0c96015193805194602086015260208552846200658a565b6200fb03928851917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83145f146200fb0d576200fade9250878a015173ffffffffffffffffffffffffffffffffffffffff6101408c0151169073ffffffffffffffffffffffffffffffffffffffff60c08d015116926200aad3565b905b85880151908651916020830152602082526200fafd87836200658a565b6200b793565b505f80806200fa28565b5050906200fae0565b6200fb2b819a9997989a51620025116200a958565b156200fc7457505060606200fb4c910151602080825183010191016200f13d565b936200fb5d8460208701516200af05565b6200fbe4575b50505060808201935f5b855180518210156200fbda57906200fb8d846200f59b8360019562007fd7565b6200fb9a575b016200fb6d565b6200fbd3868601518751906020820152602081526200fbba88826200658a565b6200fbca83606089015162007fd7565b51908a6200b793565b506200fb93565b5050945050505050565b6200fc61928551917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83145f146200fc6b576200fc4292508787015173ffffffffffffffffffffffffffffffffffffffff60e089015116916200a8b0565b905b85850151908651916020830152602082526200fafd87836200658a565b505f80806200fb63565b5050906200fc44565b909194979893506200fc8f819796939751620025116200ad06565b156200fced57505050506200fcb660606200fcc2920151602080825183010191016200efc7565b9360208501516200af05565b6200fccc57505050565b826200f4f1826200eb0c95015192805193602085015260208452836200658a565b6200fcfd8151620025116200ad43565b156200fd2457505050506200fcb660606200fcc2920151602080825183010191016200efc7565b6200fd38819795949751620025116200ad80565b156200feff575050506060015190815182019460208601926020818803126200011a57602081015167ffffffffffffffff81116200011a5701956101c090879003126200011a578351956200fd8d8762006532565b60208101518752848101516020880152606081015167ffffffffffffffff81116200011a578460206200fdc3928401016200b864565b858801526200fdd5608082016200ba25565b606088015260a0810151608088015260c081015160a0880190815260e082015167ffffffffffffffff81116200011a578560206200fe16928501016200b864565b9360c089019485526200fe2d61010084016200ba25565b60e08a01526101208301516101008a0152610140830151956101208a019687526101608401519367ffffffffffffffff85116200011a576200f806966200feba6101c0836200fe898f999660206200fec7988d9801016200b864565b986101408101998a526200fea161018083016200ba25565b6101608201526101806101a0830151910152016200c45a565b6101a08d0152516200af05565b6200fed6575b5050516200af05565b6200fef6918951908851916020830152602082526200f4f189836200658a565b505f806200fecd565b6200ff128198959851620025116200a873565b1562010055575050506060015193845185019160208301956020818503126200011a57602081015167ffffffffffffffff81116200011a57019261016090849003126200011a578351956200ff678762006463565b602084015187528484015160208801908152606085015167ffffffffffffffff81116200011a578260206200ff9f928801016200b864565b938689019485526200ffb4608087016200ba25565b60608a015260a086015160808a015260c08601519560a08a0196875260e08101519367ffffffffffffffff85116200011a576200f806966101608360c0620100098f999560208c976200fec79901016200b864565b98019788528d60e06201002061010084016200ba25565b9101528d6101006101208301519101528d6101206201004361014084016200c45a565b91015201516101408d0152516200af05565b6201006981989795985162002511620087e8565b15620101345750505060600151805181019491506020818603126200011a5760208101519067ffffffffffffffff82116200011a57019360c0858203126200011a57825191620100b98362006446565b60208601518352838601519167ffffffffffffffff83116200011a576200f80692602080620100ed9301918901016200b864565b8060208501526201012960c0606089015198878701998a52608081015160608801526201011d60a082016200ba25565b6080880152016200ba25565b60a08501526200af05565b620101448151620025116200ef01565b801562010434575b1562010264575050506060015193845185019060208201956020818403126200011a57602081015167ffffffffffffffff81116200011a57019160a090839003126200011a57835195620101a08762006481565b60208301518752848301519360208801948552620101c1606085016200ba25565b86890152608084015167ffffffffffffffff81116200011a57826020620101eb928701016200b864565b916060890192835260a08501519467ffffffffffffffff86116200011a57620102236201022f9260206200f80698889401016200b864565b8060808c01526200af05565b6201023d575b50516200af05565b6201025c9088518751906020820152602081526200f6ed88826200658a565b505f62010235565b9092919695506201027a8151620025116200aa34565b156201034c57506201029e6060620102aa920151602080825183010191016200efc7565b9460208601516200af05565b620102b7575b5050505050565b826200fafd9162010337968651917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83145f1462010343576201031f92508388015173ffffffffffffffffffffffffffffffffffffffff8060608b015116925116926200a995565b945b015192805193602085015260208452836200658a565b505f80808080620102b0565b50509462010321565b62010360909692959651620025116200aec8565b156201040c5760606201037f910151602080825183010191016200efc7565b9362010391602086019687516200af05565b6201039e57505050505050565b6200f516956200fafd9285928751927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84145f1462010402576201031f935073ffffffffffffffffffffffffffffffffffffffff858a01519151925116926200adfa565b5050509462010321565b7f88dd20d4000000000000000000000000000000000000000000000000000000005f5260045ffd5b50620104458151620025116200eec4565b6201014c565b60208101906201045c825162007eab565b925f5b8351811015620104a5576201047681845162007fd7565b5190602082519281808201948592010103126200011a57600191516201049d828862007fd7565b52016201045f565b50915050565b5f91825b8151841015620104e157620104d860019162008685620104d0878662007fd7565b51866200b16d565b930192620104af565b9250505090565b60405190620104f96040836200658a565b600982527f51554f54455f50415900000000000000000000000000000000000000000000006020830152565b602081528151602082015260e073ffffffffffffffffffffffffffffffffffffffff60c06201056460208601518460408701526101008601906200762c565b9460408101516060860152606081015160808601528260808201511660a086015260a08101518286015201511691015290565b906200791d9160405191602083015260208252620105b76040836200658a565b6200b932565b906200791d9291604051620105d2816200656d565b620105dc62008131565b905260405191602083015260208252620105f86040836200658a565b6200b7f86040518094602080830152602062010620825160408086015260808501906200766f565b9101516060830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018552846200658a565b9062010680916201066562008131565b50604051916020830152602082526200e4986040836200658a565b80518101906020818303126200011a5760208101519067ffffffffffffffff82116200011a5701906040828203126200011a5760405191620106c28362006550565b60208101519167ffffffffffffffff83116200011a57604092602080620106ee9301918401016200c468565b83520151602082015290565b604051620107088162006550565b5f81525f602082015290604051906201072360e0836200658a565b6006825260c05f5b818110620108ff575050604051620107438162006550565b600181527368b3465833fb72a70ecdf485e0e4c7bd8665fc4560208201526201076c8362007f00565b52620107788262007f00565b50604051620107878162006550565b6121058152732626664c2603336e57b271c5c0b26f421741e4816020820152620107b18362007f3b565b52620107bd8262007f3b565b50604051620107cc8162006550565b61a4b181527368b3465833fb72a70ecdf485e0e4c7bd8665fc456020820152620107f68362007f4c565b52620108028262007f4c565b50604051620108118162006550565b62aa36a78152733bfa4769fb09eefc5a80d6e87c3b9c650f7ae48e60208201526201083c8362007f5d565b52620108488262007f5d565b50604051620108578162006550565b62014a3481527394cc0aac535ccdb3c01d6787d6413c739ae12bc46020820152620108828362007f6e565b526201088e8262007f6e565b506040516201089d8162006550565b62066eee815273101f443b4d1b059569d643917553c771e1b9663e6020820152620108c88362007f7f565b52620108d48262007f7f565b505f5b82518110156200b09e5781620108ee828562007fd7565b5151146200b08b57600101620108d7565b602090604051620109108162006550565b5f81525f83820152828287010152016201072b565b604051608091906201093883826200658a565b60038152917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001825f5b8281106201096f57505050565b6020906201097c6200e937565b8282850101520162010962565b90620109958262006681565b620109a460405191826200658a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0620109d4829462006681565b01905f5b828110620109e557505050565b602090620109f26200e937565b82828501015201620109d8565b6040519261016062010a1281866200658a565b600a85527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015f5b8181106201158657505060405162010a5281620064f8565b6001815262010a606200ca2a565b602082015262010a6f620087ab565b604082015273986b5e1e1755e3c2440e960477f25201b0a8bbd4606082015262010a998562007f00565b5262010aa58462007f00565b5060405162010ab481620064f8565b6001815262010ac2620087ab565b602082015262010ad1620080da565b6040820152735f4ec3df9cbd43714fe2740f5e3616155c5b8419606082015262010afb8562007f3b565b5262010b078462007f3b565b5060405162010b1681620064f8565b6001815262010b24620134f1565b602082015262010b33620080da565b6040820152732c1d072e956affc0d435cb7ac38ef18d24d9127c606082015262010b5d8562007f4c565b5262010b698462007f4c565b5060405162010b7881620064f8565b6001815262010b86620134f1565b602082015262010b95620087ab565b604082015273dc530d9457755926550b59e8eccdae7624181557606082015262010bbf8562007f5d565b5262010bcb8462007f5d565b5060405162010bda81620064f8565b6001815262010be862011803565b602082015262010bf7620080da565b604082015273164b276057258d81941e97b0a900d4c7b358bce0606082015262010c218562007f6e565b5262010c2d8462007f6e565b5060405162010c3c81620064f8565b6001815262010c4a620131cd565b602082015262010c59620087ab565b60408201527386392dc19c0b719886221c78ab11eb8cf5c52812606082015262010c838562007f7f565b5262010c8f8462007f7f565b506040519062010c9f82620064f8565b60018252604091825162010cb484826200658a565b600481527f72455448000000000000000000000000000000000000000000000000000000006020820152602082015262010ced620087ab565b8382015273536218f9e9eb48863970252233c8f271f554c2d0606082015262010d168662007f90565b5262010d228562007f90565b50815162010d3081620064f8565b6001815262010d3e6201170f565b602082015262010d4d6201352e565b8382015273fdfd9c85ad200c506cf9e21f1fd8dd01932fbb23606082015262010d768662007fa1565b5262010d828562007fa1565b50815162010d9081620064f8565b6001815262010d9e6201352e565b602082015262010dad620080da565b8382015273f4030086522a5beea4988f8ca5b36dbc97bee88c606082015262010dd68662007fb3565b5262010de28562007fb3565b50815162010df081620064f8565b6001815262010dfe6201352e565b602082015262010e0d620087ab565b8382015273deb288f737066589598e9214e782fa5a8ed689e8606082015262010e368662007fc5565b5262010e428562007fc5565b5081519060c062010e5481846200658a565b600583527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015f5b8181106201156c575050825162010e9381620064f8565b612105815262010ea2620087ab565b602082015262010eb1620080da565b848201527371041dddad3595f9ced3dccfbe3d1f4b0a16bb70606082015262010eda8362007f00565b5262010ee68262007f00565b50825162010ef481620064f8565b612105815262010f03620134f1565b602082015262010f12620080da565b848201527317cab8fe31e32f08326e5e27412894e49b0f9d65606082015262010f3b8362007f3b565b5262010f478262007f3b565b50825162010f5581620064f8565b612105815262010f64620134f1565b602082015262010f73620087ab565b8482015273c5e65227fe3385b88468f9a01600017cdc9f3a12606082015262010f9c8362007f4c565b5262010fa88262007f4c565b50825162010fb681620064f8565b612105815262010fc56201187d565b602082015262010fd4620080da565b8482015273d7818272b9e248357d13057aab0b417af31e817d606082015262010ffd8362007f5d565b52620110098262007f5d565b5082516201101781620064f8565b6121058152620110266201187d565b602082015262011035620087ab565b8482015273806b4ac04501c29769051e42783cf04dce41440b60608201526201105e8362007f6e565b526201106a8262007f6e565b506201107562010925565b83516201108281620064f8565b62aa36a7815262011092620087ab565b6020820152620110a1620080da565b8582015273694aa1769357215de4fac081bf1f309adc3253066060820152620110ca8262007f00565b52620110d68162007f00565b508351620110e481620064f8565b62aa36a78152620110f4620134f1565b602082015262011103620080da565b8582015273c59e3633baac79493d908e63626716e204a45edf60608201526201112c8262007f3b565b52620111388162007f3b565b5083516201114681620064f8565b62aa36a7815262011156620134f1565b602082015262011165620087ab565b858201527342585ed362b3f1bca95c640fdff35ef89921273460608201526201118e8262007f4c565b526201119a8162007f4c565b50620111a562010925565b938051620111b381620064f8565b62014a348152620111c3620087ab565b6020820152620111d2620080da565b82820152734adc67696ba383f43dd60a9e78f2c97fbbfc7cb16060820152620111fb8662007f00565b52620112078562007f00565b5080516201121581620064f8565b62014a34815262011225620134f1565b602082015262011234620080da565b8282015273b113f5a928bcff189c998ab20d753a47f9de5a6160608201526201125d8662007f3b565b52620112698562007f3b565b5080516201127781620064f8565b62014a34815262011287620134f1565b602082015262011296620087ab565b828201527356a43eb56da12c0dc1d972acb089c06a5def8e696060820152620112bf8662007f4c565b52620112cb8562007f4c565b50620112ff620112f9620112f0620112e78b51885190620085f7565b855190620085f7565b875190620085f7565b62010989565b945f965f975b8a518910156201134c5762011343600191620113228b8e62007fd7565b516201132f828c62007fd7565b526201133c818b62007fd7565b50620084f7565b98019762011305565b975091939790929498505f965b8951881015620113995762011390600191620113768a8d62007fd7565b5162011383828b62007fd7565b526201133c818a62007fd7565b97019662011359565b96509193975091955f955b8851871015620113e457620113db600191620113c1898c62007fd7565b51620113ce828a62007fd7565b526201133c818962007fd7565b960195620113a4565b95509195909296505f945b87518610156201142f57620114266001916201140c888b62007fd7565b5162011419828962007fd7565b526201133c818862007fd7565b950194620113ef565b509350939094505f925f5b8351811015620114b2578662011451828662007fd7565b51511462011463575b6001016201143a565b6201147560206200cc4b838762007fd7565b80156201149a575b156201145a579362011491600191620084f7565b9490506201145a565b50620114ac826200cc4b838762007fd7565b6201147d565b509092620114c09062010989565b925f955f5b845181101562011562578082620114df6001938862007fd7565b515114620114ef575b01620114c5565b6201150b602062011501838962007fd7565b510151856200af05565b80156201154a575b15620114e8576201154362011529828862007fd7565b51996201153681620084f7565b9a62008595828b62007fd7565b50620114e8565b506201155c8562011501838962007fd7565b62011513565b5093955050505050565b602090620115796200e937565b8282870101520162010e7c565b602090620115936200e937565b8282890101520162010a3a565b60405190620115af8262006550565b60606020838281520152565b926201160c90929192604051620115d28162006446565b5f81525f60208201525f60408201525f6060820152620115f1620115a0565b608082015262011600620115a0565b60a0820152946200b055565b608001915f5b83518051821015620116ca576040620116418373ffffffffffffffffffffffffffffffffffffffff9362007fd7565b5101511673ffffffffffffffffffffffffffffffffffffffff8316148062011683575b620116725760010162011612565b929150506200b09a92505162007fd7565b5073ffffffffffffffffffffffffffffffffffffffff6060620116a883875162007fd7565b5101511673ffffffffffffffffffffffffffffffffffffffff84161462011664565b505050505090565b60405190620116e36040836200658a565b600582527f63624254430000000000000000000000000000000000000000000000000000006020830152565b60405190620117206040836200658a565b600482527f57425443000000000000000000000000000000000000000000000000000000006020830152565b604051906201175d6040836200658a565b600482527f55534454000000000000000000000000000000000000000000000000000000006020830152565b604051906201179a6040836200658a565b600582527f50595553440000000000000000000000000000000000000000000000000000006020830152565b60405190620117d76040836200658a565b600482527f65555344000000000000000000000000000000000000000000000000000000006020830152565b60405190620118146040836200658a565b600682527f77737445544800000000000000000000000000000000000000000000000000006020830152565b60405190620118516040836200658a565b600382527f44414900000000000000000000000000000000000000000000000000000000006020830152565b604051906201188e6040836200658a565b600582527f63624554480000000000000000000000000000000000000000000000000000006020830152565b906200791d9160208152815160208201526040620118e7602084015160608385015260808401906200762c565b9201519060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828503019101526200762c565b606060206200791d9381845280518285015201519160408082015201906200762c565b6040516201194e60a0826200658a565b6004815260805f5b81811062011b585750506040516201196e8162006481565b6001815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2602082015262011996620087ab565b604082015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6060820152620119bf6200b972565b6080820152620119cf8262007f00565b52620119db8162007f00565b50604051620119ea8162006481565b6121058152734200000000000000000000000000000000000006602082015262011a13620087ab565b604082015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee606082015262011a3c6200b972565b608082015262011a4c8262007f3b565b5262011a588162007f3b565b5060405162011a678162006481565b62aa36a78152732d5ee574e710219a521449679a4a7f2b43f046ad602082015262011a91620087ab565b604082015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee606082015262011aba6200b972565b608082015262011aca8262007f4c565b5262011ad68162007f4c565b5060405162011ae58162006481565b62014a348152734200000000000000000000000000000000000006602082015262011b0f620087ab565b604082015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee606082015262011b386200b972565b608082015262011b488262007f5d565b5262011b548162007f5d565b5090565b60209062011b656200eb0f565b8282860101520162011956565b9162011b8290620025116200ca2a565b918262011ba7575b508162011b95575090565b905062011ba28162012d10565b511490565b73ffffffffffffffffffffffffffffffffffffffff91925062011bcc60409162012d10565b0151161515905f62011b8a565b602062011bfe73ffffffffffffffffffffffffffffffffffffffff9294939462012f4a565b0151161515918262011c61575b508162011c16575090565b905062011c26620081966200ca2a565b90811562011c4a575b811562011c3a575090565b6200791d915062002511620087ab565b905062011c5a620081966200b972565b9062011c2f565b90915062011c6f8162012f4a565b5114905f62011c0b565b6020815261012073ffffffffffffffffffffffffffffffffffffffff61010062011ce962011cb486518560208801526101408701906200762c565b60208701517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08783030160408801526200762c565b946040810151606086015260608101516080860152608081015160a086015260a081015160c086015260c081015160e08601528260e0820151168286015201511691015290565b9092919262011d3e62008066565b5062011d4962008099565b50602082019384519462011d97604096875162011d6789826200658a565b601381527f4272696467696e6720766961204163726f737300000000000000000000000000602082015262013175565b62011da960608501518551906200b055565b9562011dde62011dc060a08701518751906200b055565b8262011dd28551828c0151906200b0a4565b9451910151906200b0a4565b9162011e0c6080870198602073ffffffffffffffffffffffffffffffffffffffff8b5116910151906200b273565b9382519662011e1c84896200658a565b6001885262011e517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0850160208a0162007fec565b83516106d762011e6560208201836200658a565b8082526201b8df602083013962011e7c8962007f00565b5262011e888862007f00565b5073ffffffffffffffffffffffffffffffffffffffff83511673ffffffffffffffffffffffffffffffffffffffff865116606083015160a08401519087850151928851947f0a9b761200000000000000000000000000000000000000000000000000000000865260048601526024850152604484015260648301526084820152848160a48162ff10105afa90811562012383575f905f9262012347575b508583015191670de0b6b3a76400000180670de0b6b3a764000011620007dd5762011f5e670de0b6b3a76400009162011f65946200814c565b04620085f7565b9260208701519862011f8262011f7b8262007f00565b516200b331565b9060608401519060a085015173ffffffffffffffffffffffffffffffffffffffff808651169a5116898701519373ffffffffffffffffffffffffffffffffffffffff60c0890151169262011fdb60e08a0151926201356b565b9563ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe28185160111620007dd5761025883018311620007dd578c9360209e8f968651966201202e89896200658a565b5f88527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08901368a8a013751998a9889017fbf9ca86b00000000000000000000000000000000000000000000000000000000905273ffffffffffffffffffffffffffffffffffffffff1660248901528060448901526064880152608487015260a48601528b60c486015260e485015261010484015261012483015f905263ffffffff81167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe20163ffffffff166101448401526102580163ffffffff1661016483015261018482015f90526101a482016101c090526101e4820162012132916200762c565b6101c482015f9052037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183526201216c90836200658a565b60e08501519262093a8084018411620007dd5788519c6201218d8e62006446565b8d52898d015f905273ffffffffffffffffffffffffffffffffffffffff16888d015260608c015260808b015262093a800160a08a015260608101519386825173ffffffffffffffffffffffffffffffffffffffff1692015194606084015191878501519060c086015173ffffffffffffffffffffffffffffffffffffffff169360a0870151908a51620122218c826200658a565b600681527f4143524f535300000000000000000000000000000000000000000000000000008d8201528b519a620122588c6200649e565b8b528c8b01528a8a01526060890152608088015260a087015260c086015260e085015261010084015260600151985173ffffffffffffffffffffffffffffffffffffffff1695620122a86200ef8a565b918451809487820190620122bc9162011c79565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018552620122ee90856200658a565b620122f9916200b4f8565b9460200151958351996201230d8b6200640b565b8a52848a015282890152606088015251906201232a90826200658a565b5f8152608086015260a085015260c0840152600160e08401529190565b809250868092503d83116201237b575b6201236381836200658a565b810103126200011a5760208151910151905f62011f25565b503d62012357565b85513d5f823e3d90fd5b909291926201239b62008066565b50620123a662008099565b50602082019162012403835193620123f86040958651620123c888826200658a565b601181527f4272696467696e67207669612043435450000000000000000000000000000000602082015262013175565b51620025116200ca2a565b1562012747576060810192806201241e85518451906200b055565b966201243782890151620124316200ca2a565b6200b0a4565b95620124656080860199602073ffffffffffffffffffffffffffffffffffffffff8c5116910151906200b273565b96602084519862012477868b6200658a565b60018a52620124ab7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08701838c0162007fec565b8551610259620124be848201836200658a565b8082526201bfb684830139620124d48b62007f00565b52620124e08a62007f00565b50019573ffffffffffffffffffffffffffffffffffffffff87516201250962011f7b8c62007f00565b9a85519060e060a08601958651938863ffffffff8d84019d8e518a620125466201253f8260c08a019e8f5116975116976201361a565b9a620136d4565b9251997f31be91250000000000000000000000000000000000000000000000000000000060208c01521660248a01526044890152166064870152608486015260a485015260a484526201259b60c4856200658a565b01519262093a808401809411620007dd578a80519e8f92620125bd8462006446565b8352602083015f905273ffffffffffffffffffffffffffffffffffffffff1691015260608d015260808c015260a08b0152606083015190835173ffffffffffffffffffffffffffffffffffffffff1693602001519651908551905173ffffffffffffffffffffffffffffffffffffffff1693519089516201263f8b826200658a565b600481527f434354500000000000000000000000000000000000000000000000000000000060208201528a5199620126778b6200649e565b8a5260208a015289890152606088015280608088015260a087015260c086015260e085015261010084015251975173ffffffffffffffffffffffffffffffffffffffff1694620126c66200ef8a565b91845180946020820190620126db9162011c79565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810185526201270d90856200658a565b62012718916200b4f8565b935194835198620127298a6200640b565b89526020890152828801526060870152516201232a6020826200658a565b7fd7f3645e000000000000000000000000000000000000000000000000000000005f5260045ffd5b6201277b82826200b932565b156201278d576200791d92506200ee4f565b505090565b906200791d91602081526020620127b5835160408385015260608401906200762c565b9201519060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828503019101526200762c565b9091604051620127f9816200656d565b6201280362008131565b905260405190620128148262006550565b83825260208201525f5b825160208101518210156201288c57620090cb826201283d926200ee35565b516020815191012084516020860120146201285b576001016201281e565b9062011b549293506201287c62000a44916040519283916020830162012792565b835151906200561c838362007fd7565b505062011b54919250620005a4906200b82e8451916040519384916020830162012792565b9190620128bf81846200eb3b565b92620128db6080620128d284846200eb3b565b0151836200af05565b15620128ed576200791d93506201334d565b915073ffffffffffffffffffffffffffffffffffffffff60606200791d94015116916201320a565b604051620129616020828180820195805191829101875e81015f8382015203017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826200658a565b519020906040516200b04e6020828180820195805191829101875e81015f8382015203017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826200658a565b60405190620129c082620064f8565b5f6060838281528160208201528260408201520152565b620129e1620129b1565b5060405190620129f360a0836200658a565b6004825260805f5b81811062012c3457505060405162012a1381620064f8565b6001815262012a216200ca2a565b602082015273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040820152735f4ec3df9cbd43714fe2740f5e3616155c5b8419606082015262012a658362007f00565b5262012a718262007f00565b5060405162012a8081620064f8565b612105815262012a8f6200ca2a565b602082015273833589fcd6edb6e08f4c7c32d4f71b54bda0291360408201527371041dddad3595f9ced3dccfbe3d1f4b0a16bb70606082015262012ad38362007f3b565b5262012adf8262007f3b565b5060405162012aee81620064f8565b62aa36a7815262012afe6200ca2a565b6020820152731c7d4b196cb0c7b01d743fbc6116a902379c7238604082015273694aa1769357215de4fac081bf1f309adc325306606082015262012b428362007f4c565b5262012b4e8262007f4c565b5060405162012b5d81620064f8565b62014a34815262012b6d6200ca2a565b602082015273036cbd53842c5426634e7929541ec2318f3dcf7e6040820152734adc67696ba383f43dd60a9e78f2c97fbbfc7cb1606082015262012bb18362007f5d565b5262012bbd8262007f5d565b505f5b825181101562012c08578362012bd7828562007fd7565b5151148062012bef575b6200b08b5760010162012bc0565b5062012c0260206200b0ce838662007fd7565b62012be1565b837fdf31ed00000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b60209062012c41620129b1565b82828701015201620129fb565b620005a49062012c6d6200eb0c949360405193849160208301620118ba565b62012cff6040519360208501906080809173ffffffffffffffffffffffffffffffffffffffff815116845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015273ffffffffffffffffffffffffffffffffffffffff604082015116604085015273ffffffffffffffffffffffffffffffffffffffff60608201511660608501520151910152565b60a083526200b7f860c0846200658a565b62012d1a62007e00565b906040519062012d2c60e0836200658a565b6006825260c05f5b81811062012f3057505060405162012d4c8162006515565b600181525f602082015273bd3fa81b58ba92a82136038b25adec7066af3155604082015262012d7b8362007f00565b5262012d878262007f00565b5060405162012d968162006515565b612105815260066020820152731682ae6375c4e4a97e4b583bc394c861a46d8962604082015262012dc78362007f3b565b5262012dd38262007f3b565b5060405162012de28162006515565b61a4b18152600360208201527319330d10d9cc8751218eaf51e8885d058642e08a604082015262012e138362007f4c565b5262012e1f8262007f4c565b5060405162012e2e8162006515565b62aa36a781525f6020820152739f3b8679c73c2fef8b59b4f3444d4e156fb70aa5604082015262012e5f8362007f5d565b5262012e6b8262007f5d565b5060405162012e7a8162006515565b62014a34815260066020820152739f3b8679c73c2fef8b59b4f3444d4e156fb70aa5604082015262012eac8362007f6e565b5262012eb88262007f6e565b5060405162012ec78162006515565b62066eee815260036020820152739f3b8679c73c2fef8b59b4f3444d4e156fb70aa5604082015262012ef98362007f7f565b5262012f058262007f7f565b505f5b82518110156200b09e578162012f1f828562007fd7565b5151146200b08b5760010162012f08565b60209062012f3d62007e00565b8282870101520162012d34565b60405162012f588162006550565b5f81525f6020820152906040519062012f7360e0836200658a565b6006825260c05f5b8181106201314f57505060405162012f938162006550565b60018152735c7bcd6e7de5423a257d81b442095a1a6ced35c5602082015262012fbc8362007f00565b5262012fc88262007f00565b5060405162012fd78162006550565b61210581527309aea4b2242abc8bb4bb78d537a67a245a7bec646020820152620130018362007f3b565b526201300d8262007f3b565b506040516201301c8162006550565b61a4b1815273e35e9842fceaca96570b734083f4a58e8f7c5f2a6020820152620130468362007f4c565b52620130528262007f4c565b50604051620130618162006550565b62aa36a78152735ef6c01e11889d86803e0b23e3cb3f9e9d97b66260208201526201308c8362007f5d565b52620130988262007f5d565b50604051620130a78162006550565b62014a3481527382b564983ae7274c86695917bbf8c99ecb6f0f8f6020820152620130d28362007f6e565b52620130de8262007f6e565b50604051620130ed8162006550565b62014a34815273e35e9842fceaca96570b734083f4a58e8f7c5f2a6020820152620131188362007f7f565b52620131248262007f7f565b505f5b82518110156200b09e57816201313e828562007fd7565b5151146200b08b5760010162013127565b602090604051620131608162006550565b5f81525f838201528282870101520162012f7b565b5f919062000a44620131ba849360405192839160208301957f4b5c4277000000000000000000000000000000000000000000000000000000008752602484016200caa5565b51906a636f6e736f6c652e6c6f675afa50565b60405190620131de6040836200658a565b600582527f73744554480000000000000000000000000000000000000000000000000000006020830152565b916201322062013219620087ab565b836200af05565b156201328d57506201324a60209173ffffffffffffffffffffffffffffffffffffffff936200eb3b565b015116604051907fa91a3f100000000000000000000000000000000000000000000000000000000060208301526024820152602481526200791d6044826200658a565b916201329c62013219620131cd565b620132c9577f1044d6e7000000000000000000000000000000000000000000000000000000005f5260045ffd5b6020620132f06200791d9373ffffffffffffffffffffffffffffffffffffffff936200eb3b565b01516040517f48ab02c400000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff929091168216602482015292166044830152816064810162000a44565b6201335b620132196200b972565b15620133e6576020620133886200791d9373ffffffffffffffffffffffffffffffffffffffff936200eb3b565b01511662000a446040519384927e8342b6000000000000000000000000000000000000000000000000000000006020850152602484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b9150620133f66200819662011803565b62013423577ffa11437b000000000000000000000000000000000000000000000000000000005f5260045ffd5b6201344660209173ffffffffffffffffffffffffffffffffffffffff936200eb3b565b015116604051907f1e64918f0000000000000000000000000000000000000000000000000000000060208301526024820152602481526200791d6044826200658a565b905f5b6020830151811015620134ca57620134a681845162007fd7565b51602081519101208251602084012014620134c4576001016201348c565b91505090565b5050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90565b60405190620135026040836200658a565b600482527f4c494e4b000000000000000000000000000000000000000000000000000000006020830152565b604051906201353f6040836200658a565b600382527f42544300000000000000000000000000000000000000000000000000000000006020830152565b6020620135788262012f4a565b01805190919073ffffffffffffffffffffffffffffffffffffffff1615620135b557505173ffffffffffffffffffffffffffffffffffffffff1690565b608490604051907f8b52ceb500000000000000000000000000000000000000000000000000000000825260406004830152600660448301527f4163726f7373000000000000000000000000000000000000000000000000000060648301526024820152fd5b6040620136278262012d10565b01805190919073ffffffffffffffffffffffffffffffffffffffff16156201366457505173ffffffffffffffffffffffffffffffffffffffff1690565b620083da906040519182917f8b52ceb500000000000000000000000000000000000000000000000000000000835260048301919060408352600460408401527f43435450000000000000000000000000000000000000000000000000000000006060840152602060808401930152565b620136df8162012d10565b805190919015620136f857506020015163ffffffff1690565b620083da906040519182917fbda62f2d00000000000000000000000000000000000000000000000000000000835260048301919060408352600460408401527f4343545000000000000000000000000000000000000000000000000000000000606084015260206080840193015256fe6080806040523460155761052d908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806392940bf9146101375763ae77a7081461002f575f80fd5b346101335760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013357610066610330565b7f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d4906001825c1461010b575f808080936001865d73ffffffffffffffffffffffffffffffffffffffff60243591165af16100be6103c1565b90156100c9575f825d005b610107906040519182917f9a367e1700000000000000000000000000000000000000000000000000000000835260206004840152602483019061041e565b0390fd5b7f37ed32e8000000000000000000000000000000000000000000000000000000005f5260045ffd5b5f80fd5b346101335760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101335761016e610330565b6024359073ffffffffffffffffffffffffffffffffffffffff8216809203610133577f951ae9fc8e231369dc30d9a40f12c78bb800223594870e32a7cda666d14d45d4916001835c1461010b5773ffffffffffffffffffffffffffffffffffffffff610270926001855d165f806040519360208501907fa9059cbb0000000000000000000000000000000000000000000000000000000082526024860152604435604486015260448552610223606486610353565b60405194610232604087610353565b602086527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020870152519082855af161026a6103c1565b91610461565b805190811591821561030d575b505015610289575f905d005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b81925090602091810103126101335760200151801515810361013357828061027d565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361013357565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761039457604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3d15610419573d9067ffffffffffffffff8211610394576040519161040e601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184610353565b82523d5f602084013e565b606090565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b919290156104dc5750815115610475575090565b3b1561047e5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156104ef5750805190602001fd5b610107906040519182917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152602483019061041e5660808060405234601557610563908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806373bf9a7f1461016e5763a21d1ade1461002f575f80fd5b3461016a5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016a5760043573ffffffffffffffffffffffffffffffffffffffff811680910361016a576024359073ffffffffffffffffffffffffffffffffffffffff8216820361016a5760443573ffffffffffffffffffffffffffffffffffffffff8116810361016a576084359167ffffffffffffffff831161016a575f936100e56020943690600401610418565b959093610125604051978896879586947ffabed41200000000000000000000000000000000000000000000000000000000865260643591600487016104f7565b03925af1801561015f5761013557005b6101569060203d602011610158575b61014e818361047a565b8101906104e8565b005b503d610144565b6040513d5f823e3d90fd5b5f80fd5b3461016a5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016a5760043567ffffffffffffffff811161016a576101bd903690600401610418565b60243567ffffffffffffffff811161016a576101dd903690600401610418565b919060443567ffffffffffffffff811161016a576101ff903690600401610418565b91909260643567ffffffffffffffff811161016a57610222903690600401610418565b909660843567ffffffffffffffff811161016a57610244903690600401610418565b95909288851480159061040e575b8015610404575b80156103fa575b6103d2575f989498947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe185360301955b8a811061029957005b808a896102f18f948f6102eb6102d9838c6102e58f838f978f906102de6102d98473ffffffffffffffffffffffffffffffffffffffff936102d997610449565b610459565b169b610449565b98610449565b96610449565b35908c8410156103a5578360051b8a01358b81121561016a578a019485359567ffffffffffffffff871161016a57602001958060051b3603871361016a5760209461036d5f92604051998a97889687957ffabed412000000000000000000000000000000000000000000000000000000008752600487016104f7565b03925af191821561015f57600192610387575b5001610290565b61039e9060203d81116101585761014e818361047a565b508d610380565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7fb4fa3fb3000000000000000000000000000000000000000000000000000000005f5260045ffd5b5086851415610260565b5080851415610259565b5081851415610252565b9181601f8401121561016a5782359167ffffffffffffffff831161016a576020808501948460051b01011161016a57565b91908110156103a55760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff8116810361016a5790565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104bb57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261016a575190565b929173ffffffffffffffffffffffffffffffffffffffff80921684521660208301526040820152608060608201528260808201527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161016a5760a09260051b809284830137010190566080806040523460155761076f908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c63ff20388514610024575f80fd5b346101765760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101765760043573ffffffffffffffffffffffffffffffffffffffff8116908181036101765760243567ffffffffffffffff8111610176576100959036906004016103d6565b9160443567ffffffffffffffff8111610176576100b69036906004016103d6565b6064359473ffffffffffffffffffffffffffffffffffffffff8616860361017657608435948282036103ae575f5b82811061017a57888888806100f557005b823b15610176576040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9290921660048301526024820152905f908290604490829084905af1801561016b5761015f57005b5f61016991610465565b005b6040513d5f823e3d90fd5b5f80fd5b610185818587610407565b35610193575b6001016100e4565b73ffffffffffffffffffffffffffffffffffffffff6101bb6101b6838686610407565b610444565b166102295f80896102556101d0878b8d610407565b6040517f095ea7b3000000000000000000000000000000000000000000000000000000006020820190815273ffffffffffffffffffffffffffffffffffffffff9094166024820152903560448201529485906064820190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101865285610465565b83519082865af16102646104d3565b8161037f575b5080610375575b15610318575b50506102876101b6828585610407565b90610293818688610407565b35918a3b15610176576040517ff2b9fdb800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101929092525f82604481838e5af191821561016b57600192610308575b50905061018b565b5f61031291610465565b5f610300565b61036e916103696040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201528d60248201525f604482015260448152610363606482610465565b82610548565b610548565b5f80610277565b50813b1515610271565b8051801592508215610394575b50505f61026a565b6103a79250602080918301019101610530565b5f8061038c565b7fb4fa3fb3000000000000000000000000000000000000000000000000000000005f5260045ffd5b9181601f840112156101765782359167ffffffffffffffff8311610176576020808501948460051b01011161017657565b91908110156104175760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff811681036101765790565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104a657604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3d1561052b573d9067ffffffffffffffff82116104a65760405191610520601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184610465565b82523d5f602084013e565b606090565b90816020910312610176575180151581036101765790565b9073ffffffffffffffffffffffffffffffffffffffff6105b692165f8060405193610574604086610465565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af16105b06104d3565b9161066a565b8051908115918215610650575b5050156105cc57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6106639250602080918301019101610530565b5f806105c3565b919290156106e5575081511561067e575090565b3b156106875790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156106f85750805190602001fd5b60446020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040519485937f08c379a00000000000000000000000000000000000000000000000000000000085528160048601528051918291826024880152018686015e5f85828601015201168101030190fd608080604052346015576117a6908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806305f03258146110205780638f706e1814610089578063981b4f771461004a5763ccd34cd514610045575f80fd5b611020565b34610085575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610085576020604051620151808152f35b5f80fd5b346100855760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100855760043567ffffffffffffffff811161008557806004019060a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc823603011261008557608481019161011761010d8483611060565b6020810190611093565b905015610ff85761012b61010d8483611060565b905061014461013a8584611060565b6040810190611093565b91905003610ff857803560248301359060448401359360640193610168858561114b565b61017190611352565b61017b868661114b565b60200161018790611352565b90610192878761114b565b60400161019e90611352565b916101a9888861114b565b6060016101b590611352565b6101bf898961114b565b60800135906101ce8a8a61114b565b60a0016101da906113c4565b906101e58b8b61114b565b60c081016101f291611373565b9384939192604051988997602089019960601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168a5260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016603489015260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016604888015260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016605c8701526070860152151560f81b609085015260918401378101609181015f9052036091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183526102f790836111c7565b6103018887611060565b359061030d8988611060565b6020810161031a91611093565b604051908160208101938490925f5b818110610fbd5750506103639250037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826111c7565b5190209161037461013a8b8a611060565b906040519060208201928391905f5b818110610f9c5750505091816103c761044e969593608095037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826111c7565b519020604051956020870192835260408701526060860152606085526103ed82866111c7565b60405194859360208501978a89528b60408701528960608701525180918587015e840190838201905f8252519283915e01015f8152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826111c7565b5190209161045b836114d9565b54610f8d57805b804210610f5957506104938161048d866104888161048361049a97426110e7565b6110f4565b61112b565b9061113e565b938461113e565b926104a5828261113e565b4211610f275750506104b6906114d9565b556104c96104c4838361114b565b611270565b90608082018051670de0b6b3a7640000810290808204670de0b6b3a76400001490151715610e75579051670de0b6b3a7640000810290808204670de0b6b3a76400001490151715610e755793909293945f9160a08601945b61052e61010d8487611060565b90508410156107a15773ffffffffffffffffffffffffffffffffffffffff61056b6105668661056061010d888b611060565b906113d1565b611352565b16604051907ffeaf968c00000000000000000000000000000000000000000000000000000000825260a082600481845afa80156106de575f925f9161074e575b505f83131561072257620151806105c282426110e7565b116106e957506020600491604051928380927f313ce5670000000000000000000000000000000000000000000000000000000082525afa9081156106de576106159160ff915f916106b0575b501661143e565b87519092901561066b57906001929161063d6106388861056061013a8a8d611060565b6113c4565b156106595761065092916104839161112b565b935b0192610521565b610666926104839161112b565b610650565b9498916001926106856106388c61056061013a8a8d611060565b1561069e5761069892916104839161112b565b97610652565b6106ab926104839161112b565b610698565b6106d1915060203d81116106d7575b6106c981836111c7565b810190611425565b8c61060e565b503d6106bf565b6040513d5f823e3d90fd5b6106f390426110e7565b907feb1fe96e000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b507f8bf47ece000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b92505060a0823d8211610799575b8161076960a093836111c7565b810103126100855761077a8261140e565b50602082015161079160806060850151940161140e565b50918b6105ab565b3d915061075c565b8783888888946004602073ffffffffffffffffffffffffffffffffffffffff604086015116604051928380927f313ce5670000000000000000000000000000000000000000000000000000000082525afa80156106de5773ffffffffffffffffffffffffffffffffffffffff606060ff6020936004955f91610f0a575b501696015116604051928380927f313ce5670000000000000000000000000000000000000000000000000000000082525afa80156106de5760ff915f91610eeb575b50925192169115610ea257916108799161088093611521565b9184611060565b35670de0b6b3a7640000019081670de0b6b3a764000011610e7557670de0b6b3a76400006108b08193829361112b565b040491045b6108c26104c4858561114b565b604081019273ffffffffffffffffffffffffffffffffffffffff84511673ffffffffffffffffffffffffffffffffffffffff83511690604051905f80602084017f095ea7b300000000000000000000000000000000000000000000000000000000815261097c8560248101896020604083019273ffffffffffffffffffffffffffffffffffffffff8c1681520152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018752866111c7565b84519082855af161098b61156d565b81610e46575b5080610e3c575b15610de9575b50505060a082015115610ca7576020610a455f9273ffffffffffffffffffffffffffffffffffffffff8551169060c08601519073ffffffffffffffffffffffffffffffffffffffff8588015116604051926109f88461117e565b83528583015287604083015260608201526040519485809481937f09b81346000000000000000000000000000000000000000000000000000000008352876004840152602483019061148f565b03925af19081156106de575f91610c59575b509173ffffffffffffffffffffffffffffffffffffffff947fe256398f708e8937c16a21cadd2cc58b7766662cdf76b3dfcf1e3eb3dc6cbd1694928680809694955b511691511690604051905f80602084017f095ea7b300000000000000000000000000000000000000000000000000000000815285602486015281604486015260448552610ae76064866111c7565b84519082855af1610af661156d565b81610c2a575b5080610c20575b15610bc2575b505050610b216020610b1b898461114b565b01611352565b92610b57610b4d610b376040610b1b8c8761114b565b99610b476060610b1b838861114b565b9461114b565b60c0810190611373565b9788949193816040519b168b521660208a01526040890152606088015260a060808801528160a088015260c08701375f60c08587010152169260c0817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f309601168101030190a3005b610c13610c1893604051907f095ea7b300000000000000000000000000000000000000000000000000000000602083015260248201525f604482015260448152610c0d6064826111c7565b826115b4565b6115b4565b878080610b09565b50803b1515610b03565b8051801592508215610c3f575b50508b610afc565b610c52925060208091830101910161159c565b8b80610c37565b9290506020939193833d602011610c9f575b81610c78602093836111c7565b8101031261008557915190929073ffffffffffffffffffffffffffffffffffffffff610a57565b3d9150610c6b565b92916020610d435f9273ffffffffffffffffffffffffffffffffffffffff8551169060c08601519073ffffffffffffffffffffffffffffffffffffffff858801511660405192610cf68461117e565b83528583015288604083015260608201526040519485809481937fb858183f000000000000000000000000000000000000000000000000000000008352876004840152602483019061148f565b03925af19081156106de575f91610d9b575b509173ffffffffffffffffffffffffffffffffffffffff947fe256398f708e8937c16a21cadd2cc58b7766662cdf76b3dfcf1e3eb3dc6cbd169492868080969594610a99565b9290506020939193833d602011610de1575b81610dba602093836111c7565b8101031261008557915190929073ffffffffffffffffffffffffffffffffffffffff610d55565b3d9150610dad565b610c13610e3493604051907f095ea7b300000000000000000000000000000000000000000000000000000000602083015260248201525f604482015260448152610c0d6064826111c7565b86808061099e565b50803b1515610998565b8051801592508215610e5b575b50508a610991565b610e6e925060208091830101910161159c565b8a80610e53565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9390610eb19261087992611521565b35670de0b6b3a76400000390670de0b6b3a76400008211610e7557670de0b6b3a7640000610ee18193829361112b565b04049104906108b5565b610f04915060203d6020116106d7576106c981836111c7565b89610860565b610f219150853d87116106d7576106c981836111c7565b8d61081e565b7feb41249f000000000000000000000000000000000000000000000000000000005f526004526024524260445260645ffd5b90507f35d9a881000000000000000000000000000000000000000000000000000000005f526004526024524260445260645ffd5b610f96836114d9565b54610462565b909192602080600192610fae87611229565b15158152019401929101610383565b9160019193506020809173ffffffffffffffffffffffffffffffffffffffff610fe588611208565b1681520194019101918492939193610329565b7fb4fa3fb3000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610085575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610085576020604051670de0b6b3a76400008152f35b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa181360301821215610085570190565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610085570180359067ffffffffffffffff821161008557602001918160051b3603831361008557565b91908203918211610e7557565b81156110fe570490565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b81810292918115918404141715610e7557565b91908201809211610e7557565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2181360301821215610085570190565b6080810190811067ffffffffffffffff82111761119a57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761119a57604052565b359073ffffffffffffffffffffffffffffffffffffffff8216820361008557565b3590811515820361008557565b67ffffffffffffffff811161119a57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60e081360312610085576040519060e0820182811067ffffffffffffffff82111761119a576040526112a181611208565b82526112af60208201611208565b60208301526112c060408201611208565b60408301526112d160608201611208565b6060830152608081013560808301526112ec60a08201611229565b60a083015260c08101359067ffffffffffffffff8211610085570136601f8201121561008557803561131d81611236565b9161132b60405193846111c7565b818352366020838301011161008557815f926020809301838601378301015260c082015290565b3573ffffffffffffffffffffffffffffffffffffffff811681036100855790565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610085570180359067ffffffffffffffff82116100855760200191813603831361008557565b3580151581036100855790565b91908110156113e15760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b519069ffffffffffffffffffff8216820361008557565b90816020910312610085575160ff811681036100855790565b604d8111610e7557600a0a90565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b906060806114a6845160808552608085019061144c565b9373ffffffffffffffffffffffffffffffffffffffff602082015116602085015260408101516040850152015191015290565b7fbc19af8a435a812779238b5beb2837d7c6d3cfc15997614e65288e2b0598eefa5c90604051906020820192835260408201526040815261151b6060826111c7565b51902090565b91808210156115495761153b6115469392611540926110e7565b61143e565b9061112b565b90565b9081811161155657505090565b61153b6115469392611567926110e7565b906110f4565b3d15611597573d9061157e82611236565b9161158c60405193846111c7565b82523d5f602084013e565b606090565b90816020910312610085575180151581036100855790565b9073ffffffffffffffffffffffffffffffffffffffff61162292165f80604051936115e06040866111c7565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af161161c61156d565b916116d6565b80519081159182156116bc575b50501561163857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6116cf925060208091830101910161159c565b5f8061162f565b9192901561175157508151156116ea575090565b3b156116f35790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156117645750805190602001fd5b6117a2906040519182917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152602483019061144c565b0390fd6080806040523460155761073b908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c63ff20388514610027575f80fd5b346103015760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610301576004359073ffffffffffffffffffffffffffffffffffffffff82168083036103015760243567ffffffffffffffff8111610301576100989036906004016103c3565b60449491943567ffffffffffffffff8111610301576100bb9036906004016103c3565b9290946064359073ffffffffffffffffffffffffffffffffffffffff821690818303610301576084359386860361039b57846101ee575b5050505050855b818110610104578680f35b61010f818487610462565b3561011d575b6001016100f9565b86610129828489610462565b3573ffffffffffffffffffffffffffffffffffffffff811681036101ea57610152838689610462565b3590863b156101e6576040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101919091528181604481838a5af180156101db576101c2575b5050610115565b816101cc916103f4565b6101d757865f6101bb565b8680fd5b6040513d84823e3d90fd5b8280fd5b5080fd5b7f095ea7b3000000000000000000000000000000000000000000000000000000006020830190815273ffffffffffffffffffffffffffffffffffffffff919091166024830152604480830186905282525f90819061024d6064856103f4565b83519082865af161025c61049f565b8161036c575b5080610362575b15610305575b5050843b15610301576040517ff2b9fdb800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101919091525f8160448183885af180156102f6576102e1575b808080806100f2565b6102ee9196505f906103f4565b5f945f6102d8565b6040513d5f823e3d90fd5b5f80fd5b61035b916103566040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201528960248201525f6044820152604481526103506064826103f4565b82610514565b610514565b5f8061026f565b50813b1515610269565b8051801592508215610381575b50505f610262565b61039492506020809183010191016104fc565b5f80610379565b7fb4fa3fb3000000000000000000000000000000000000000000000000000000005f5260045ffd5b9181601f840112156103015782359167ffffffffffffffff8311610301576020808501948460051b01011161030157565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761043557604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b91908110156104725760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3d156104f7573d9067ffffffffffffffff821161043557604051916104ec601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016602001846103f4565b82523d5f602084013e565b606090565b90816020910312610301575180151581036103015790565b9073ffffffffffffffffffffffffffffffffffffffff61058292165f80604051936105406040866103f4565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af161057c61049f565b91610636565b805190811591821561061c575b50501561059857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b61062f92506020809183010191016104fc565b5f8061058f565b919290156106b1575081511561064a575090565b3b156106535790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156106c45750805190602001fd5b60446020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040519485937f08c379a00000000000000000000000000000000000000000000000000000000085528160048601528051918291826024880152018686015e5f85828601015201168101030190fd60808060405234601557610605908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c90816306c0b3cc146103d657508063347a377f1461022c57806346f711ad146101305763d9caed121461004a575f80fd5b3461011e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e57806100826104c0565b73ffffffffffffffffffffffffffffffffffffffff61009f6104e3565b9116803b1561012c576040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9290921660048301526044803560248401528391839190829084905af180156101215761010d5750f35b816101179161055a565b61011e5780f35b80fd5b6040513d84823e3d90fd5b5050fd5b503461011e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e57806101696104c0565b6101716104e3565b610179610506565b916064359073ffffffffffffffffffffffffffffffffffffffff82168092036102285773ffffffffffffffffffffffffffffffffffffffff16803b156102285784928360849273ffffffffffffffffffffffffffffffffffffffff948560405198899788967f264413180000000000000000000000000000000000000000000000000000000088521660048701521660248501526044840152833560648401525af180156101215761010d5750f35b8480fd5b503461011e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e576102646104c0565b60243567ffffffffffffffff81116103d257610284903690600401610529565b9060443567ffffffffffffffff8111610228576102a5903690600401610529565b90928181036103aa57908592949173ffffffffffffffffffffffffffffffffffffffff849316925b8181106102d8578480f35b6102e38183896105c8565b3573ffffffffffffffffffffffffffffffffffffffff811681036103a65761030c8285896105c8565b3590853b156103a2576040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9190911660048201526024810191909152858160448183895af1908115610397578691610382575b50506001016102cd565b8161038c9161055a565b61022857845f610378565b6040513d88823e3d90fd5b8680fd5b8580fd5b6004867fb4fa3fb3000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b9050346104bc5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104bc5761040f6104c0565b6104176104e3565b9073ffffffffffffffffffffffffffffffffffffffff610435610506565b9116803b156104bc57835f60649273ffffffffffffffffffffffffffffffffffffffff83958184987fc3b35a7e000000000000000000000000000000000000000000000000000000008752166004860152166024840152833560448401525af180156104b1576104a3575080f35b6104af91505f9061055a565b005b6040513d5f823e3d90fd5b5f80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036104bc57565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036104bc57565b6044359073ffffffffffffffffffffffffffffffffffffffff821682036104bc57565b9181601f840112156104bc5782359167ffffffffffffffff83116104bc576020808501948460051b0101116104bc57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761059b57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b91908110156105d85760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd6080806040523460155761109e908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f5f3560e01c8063a927d4331461087d578063ae8adba7146101275763df3fb6571461003b575f80fd5b346101205760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610120576040519061007782610b56565b60043573ffffffffffffffffffffffffffffffffffffffff8116810361012357825260243573ffffffffffffffffffffffffffffffffffffffff8116810361012357602083015260443573ffffffffffffffffffffffffffffffffffffffff811681036101235760408301526064359073ffffffffffffffffffffffffffffffffffffffff8216820361012057602060a084846060820152608435608082015220604051908152f35b80fd5b5080fd5b50346101205761013636610be0565b91908094939461026c575b5082938261014e57505050f35b73ffffffffffffffffffffffffffffffffffffffff1690813b156102675761010461022b9185809460405196879586947f8720316d00000000000000000000000000000000000000000000000000000000865260048601906080809173ffffffffffffffffffffffffffffffffffffffff815116845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015273ffffffffffffffffffffffffffffffffffffffff604082015116604085015273ffffffffffffffffffffffffffffffffffffffff60608201511660608501520151910152565b60a48401523060c48401523060e48401525af1801561025c5761024b5750f35b8161025591610b9f565b6101205780f35b6040513d84823e3d90fd5b505050fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610755575073ffffffffffffffffffffffffffffffffffffffff815116936040519460208601957f095ea7b3000000000000000000000000000000000000000000000000000000008752858073ffffffffffffffffffffffffffffffffffffffff8516988960248501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60448501526044845261032e606485610b9f565b83519082865af161033d610e37565b81610726575b508061071c575b156106ca575b505060a0822094604051957f93c520620000000000000000000000000000000000000000000000000000000087526004870152306024870152606086604481845afa9586156106bf578596610604575b506fffffffffffffffffffffffffffffffff602086970151169061049560406020938151906103cf8683610b9f565b8982527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08601368784013782517f20b76e81000000000000000000000000000000000000000000000000000000008152885173ffffffffffffffffffffffffffffffffffffffff908116600483015260208a01518116602483015260408a01518116604483015260608a01511660648201526080890151608482015293849283928c60a485015260c48401523060e4840152610120610104840152610124830190610c98565b03818a865af180156105f9576105cb575b5073ffffffffffffffffffffffffffffffffffffffff8451166040519187808585017f095ea7b300000000000000000000000000000000000000000000000000000000815283602487015281604487015260448652610506606487610b9f565b85519082865af1610515610e37565b8161059b575b5080610591575b15610533575b505050505b93610141565b61058893610583917f095ea7b3000000000000000000000000000000000000000000000000000000006040519283015260248201528860448201526044815261057d606482610b9f565b82610eac565b610eac565b5f808080610528565b50813b1515610522565b805180159250869083156105b3575b5050505f61051b565b6105c39350820181019101610e94565b5f85816105aa565b6105ec9060403d6040116105f2575b6105e48183610b9f565b810190610cdb565b506104a6565b503d6105da565b6040513d89823e3d90fd5b95506060863d6060116106b7575b8161061f60609383610b9f565b810103126106b357604051956060870187811067ffffffffffffffff82111761068657869761067960406fffffffffffffffffffffffffffffffff9460209482528051845261066f858201610cf1565b8585015201610cf1565b60408201529750506103a0565b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8480fd5b3d9150610612565b6040513d87823e3d90fd5b610715916105836040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201528960248201528860448201526044815261057d606482610b9f565b5f80610350565b50813b151561034a565b805180159250821561073b575b50505f610343565b61074e9250602080918301019101610e94565b5f80610733565b9361083260408661077f87988573ffffffffffffffffffffffffffffffffffffffff885116610d0e565b81519061078d602083610b9f565b8782525f36602084013782517f20b76e81000000000000000000000000000000000000000000000000000000008152865173ffffffffffffffffffffffffffffffffffffffff9081166004830152602088015181166024830152604088015181166044830152606088015116606482015260808701516084820152938492839260a48401528960c48401523060e4840152610120610104840152610124830190610c98565b03818873ffffffffffffffffffffffffffffffffffffffff87165af180156106bf5761085f575b5061052d565b6108779060403d6040116105f2576105e48183610b9f565b50610859565b5034610b31578061088d36610be0565b93919290806109bd575b50836108a1575080f35b6040926109759273ffffffffffffffffffffffffffffffffffffffff61012493865197889687957f50d8cd4b00000000000000000000000000000000000000000000000000000000875260048701906080809173ffffffffffffffffffffffffffffffffffffffff815116845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015273ffffffffffffffffffffffffffffffffffffffff604082015116604085015273ffffffffffffffffffffffffffffffffffffffff60608201511660608501520151910152565b60a48501528260c48501523060e485015230610104850152165af1801561025c5761099f57808280f35b6109b79060403d6040116105f2576105e48183610b9f565b50808280f35b9091506109e5818373ffffffffffffffffffffffffffffffffffffffff602087015116610d0e565b73ffffffffffffffffffffffffffffffffffffffff821690604051610a0b602082610b9f565b5f808252366020830137823b15610b3157610afa925f92836040518096819582947f238d6579000000000000000000000000000000000000000000000000000000008452610adc600485018d6080809173ffffffffffffffffffffffffffffffffffffffff815116845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015273ffffffffffffffffffffffffffffffffffffffff604082015116604085015273ffffffffffffffffffffffffffffffffffffffff60608201511660608501520151910152565b60a48401523060c484015261010060e4840152610104830190610c98565b03925af18015610b2657610b11575b908491610897565b610b1e9194505f90610b9f565b5f925f610b09565b6040513d5f823e3d90fd5b5f80fd5b359073ffffffffffffffffffffffffffffffffffffffff82168203610b3157565b60a0810190811067ffffffffffffffff821117610b7257604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b7257604052565b906101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc830112610b315760043573ffffffffffffffffffffffffffffffffffffffff81168103610b31579160a0602480920312610b3157608060405191610c4883610b56565b610c5181610b35565b8352610c5f60208201610b35565b6020840152610c7060408201610b35565b6040840152610c8160608201610b35565b6060840152013560808201529060c4359060e43590565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b9190826040910312610b31576020825192015190565b51906fffffffffffffffffffffffffffffffff82168203610b3157565b6040519173ffffffffffffffffffffffffffffffffffffffff60208401917f095ea7b30000000000000000000000000000000000000000000000000000000083521693846024850152604484015260448352610d6b606484610b9f565b5f8073ffffffffffffffffffffffffffffffffffffffff84169285519082855af190610d95610e37565b82610e05575b5081610dfa575b5015610dad57505050565b610583610df893604051907f095ea7b300000000000000000000000000000000000000000000000000000000602083015260248201525f60448201526044815261057d606482610b9f565b565b90503b15155f610da2565b80519192508115918215610e1d575b5050905f610d9b565b610e309250602080918301019101610e94565b5f80610e14565b3d15610e8f573d9067ffffffffffffffff8211610b725760405191610e84601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184610b9f565b82523d5f602084013e565b606090565b90816020910312610b3157518015158103610b315790565b9073ffffffffffffffffffffffffffffffffffffffff610f1a92165f8060405193610ed8604086610b9f565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af1610f14610e37565b91610fce565b8051908115918215610fb4575b505015610f3057565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b610fc79250602080918301019101610e94565b5f80610f27565b919290156110495750815115610fe2575090565b3b15610feb5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b82519091501561105c5750805190602001fd5b61109a906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610c98565b0390fd60808060405234601557610a4f908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f5f3560e01c80630c0a769b1461040f57806350a4548914610317578063c3da3590146101465763f1afb11f14610046575f80fd5b346101345760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610134578061007e610500565b610086610523565b61008e610546565b73ffffffffffffffffffffffffffffffffffffffff806064359216936100b5838287610666565b16803b156101425784928360649273ffffffffffffffffffffffffffffffffffffffff9460405197889687957f4232cd63000000000000000000000000000000000000000000000000000000008752166004860152602485015260448401525af18015610137576101235750f35b8161012d9161059a565b6101345780f35b80fd5b6040513d84823e3d90fd5b8480fd5b50346101345760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101345761017e610500565b60243567ffffffffffffffff81116103135761019e903690600401610569565b60449291923567ffffffffffffffff8111610142576101c1903690600401610569565b9390928483036102eb579193859273ffffffffffffffffffffffffffffffffffffffff81169291845b8781106101f5578580f35b61023473ffffffffffffffffffffffffffffffffffffffff61022061021b848c89610608565b610645565b168461022d84868c610608565b3591610666565b61024261021b828a87610608565b61024d82848a610608565b3590863b156102e7576040517ff2b9fdb800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101919091528681604481838a5af19081156102dc5787916102c3575b50506001016101ea565b816102cd9161059a565b6102d857855f6102b9565b8580fd5b6040513d89823e3d90fd5b8780fd5b6004867fb4fa3fb3000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b50346101345760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101345780610350610500565b610358610523565b610360610546565b916064359073ffffffffffffffffffffffffffffffffffffffff82168092036101425773ffffffffffffffffffffffffffffffffffffffff16803b156101425784928360849273ffffffffffffffffffffffffffffffffffffffff948560405198899788967f903231770000000000000000000000000000000000000000000000000000000088521660048701521660248501526044840152833560648401525af18015610137576101235750f35b50346104fc5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fc57610447610500565b61044f610523565b73ffffffffffffffffffffffffffffffffffffffff604435926104758482848616610666565b1691823b156104fc576040517ff2b9fdb800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9290921660048301526024820152905f908290604490829084905af180156104f1576104e3575080f35b6104ef91505f9061059a565b005b6040513d5f823e3d90fd5b5f80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036104fc57565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036104fc57565b6044359073ffffffffffffffffffffffffffffffffffffffff821682036104fc57565b9181601f840112156104fc5782359167ffffffffffffffff83116104fc576020808501948460051b0101116104fc57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105db57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b91908110156106185760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff811681036104fc5790565b6040517f095ea7b3000000000000000000000000000000000000000000000000000000006020820190815273ffffffffffffffffffffffffffffffffffffffff8416602483015260448083019590955293815291926106c660648461059a565b5f8073ffffffffffffffffffffffffffffffffffffffff84169285519082855af1906106f06107b3565b82610781575b5081610776575b501561070857505050565b61076f6107749373ffffffffffffffffffffffffffffffffffffffff604051917f095ea7b30000000000000000000000000000000000000000000000000000000060208401521660248201525f60448201526044815261076960648261059a565b82610828565b610828565b565b90503b15155f6106fd565b80519192508115918215610799575b5050905f6106f6565b6107ac9250602080918301019101610810565b5f80610790565b3d1561080b573d9067ffffffffffffffff82116105db5760405191610800601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0166020018461059a565b82523d5f602084013e565b606090565b908160209103126104fc575180151581036104fc5790565b9073ffffffffffffffffffffffffffffffffffffffff61089692165f806040519361085460408661059a565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af16108906107b3565b9161094a565b8051908115918215610930575b5050156108ac57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6109439250602080918301019101610810565b5f806108a3565b919290156109c5575081511561095e575090565b3b156109675790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156109d85750805190602001fd5b60446020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040519485937f08c379a00000000000000000000000000000000000000000000000000000000085528160048601528051918291826024880152018686015e5f85828601015201168101030190fd608080604052346015576106fe908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c9081638340f5491461020c575063f3fef3a314610032575f80fd5b346101a95760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a95773ffffffffffffffffffffffffffffffffffffffff61007e6103c2565b6024357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81036101b5575016604051907f70a08231000000000000000000000000000000000000000000000000000000008252306004830152602082602481845afa918215610170575f9261017b575b506040517fba0876520000000000000000000000000000000000000000000000000000000081526004810192909252306024830181905260448301526020908290815f81606481015b03925af1801561017057610148575b005b6101469060203d602011610169575b61016181836103e5565b810190610453565b503d610157565b6040513d5f823e3d90fd5b91506020823d6020116101ad575b81610196602093836103e5565b810103126101a9579051906101376100ee565b5f80fd5b3d9150610189565b6040517fb460af9400000000000000000000000000000000000000000000000000000000815260048101919091523060248201819052604482015291602091839160649183915f91165af180156101705761014857005b346101a95760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a9576102436103c2565b906024359173ffffffffffffffffffffffffffffffffffffffff83168093036101a95760446020925f94823591868073ffffffffffffffffffffffffffffffffffffffff888401977f095ea7b3000000000000000000000000000000000000000000000000000000008952169687602485015285878501528684526102c96064856103e5565b83519082865af16102d8610462565b81610395575b508061038b575b15610331575b505060405194859384927f6e553f6500000000000000000000000000000000000000000000000000000000845260048401523060248401525af180156101705761014857005b6103849161037f6040517f095ea7b3000000000000000000000000000000000000000000000000000000008982015287602482015289878201528681526103796064826103e5565b826104d7565b6104d7565b85806102eb565b50813b15156102e5565b80518015925082156103aa575b5050886102de565b6103bb9250810188019088016104bf565b88806103a2565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101a957565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761042657604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b908160209103126101a9575190565b3d156104ba573d9067ffffffffffffffff821161042657604051916104af601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016602001846103e5565b82523d5f602084013e565b606090565b908160209103126101a9575180151581036101a95790565b9073ffffffffffffffffffffffffffffffffffffffff61054592165f80604051936105036040866103e5565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af161053f610462565b916105f9565b80519081159182156105df575b50501561055b57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6105f292506020809183010191016104bf565b5f80610552565b91929015610674575081511561060d575090565b3b156106165790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156106875750805190602001fd5b60446020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040519485937f08c379a00000000000000000000000000000000000000000000000000000000085528160048601528051918291826024880152018686015e5f85828601015201168101030190fd608080604052346015576107f3908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c639bc2f50914610024575f80fd5b346103b55760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b55760043573ffffffffffffffffffffffffffffffffffffffff8116908181036103b5576024359073ffffffffffffffffffffffffffffffffffffffff82168092036103b5576064359073ffffffffffffffffffffffffffffffffffffffff82168092036103b5576084359160a4359167ffffffffffffffff83116103b557366023840112156103b55782600401359267ffffffffffffffff84116103b55736602485830101116103b5576040515f80602083017f095ea7b30000000000000000000000000000000000000000000000000000000081528a60248501526044356044850152604484526101456064856104df565b835190828b5af161015461054d565b816104b0575b50806104a6575b15610449575b50604051937f70a08231000000000000000000000000000000000000000000000000000000008552306004860152602085602481875afa9485156103c1575f9561040e575b509160245f809493848295604051948593018337810182815203925af16101d161054d565b90156103cc575090602060249392604051948580927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9283156103c1575f93610389575b50820391821161035c5780821061032e575050604051905f80602084017f095ea7b30000000000000000000000000000000000000000000000000000000081528560248601528160448601526044855261027a6064866104df565b84519082855af161028961054d565b816102ff575b50806102f5575b1561029d57005b6102ee6102f393604051907f095ea7b300000000000000000000000000000000000000000000000000000000602083015260248201525f6044820152604481526102e86064826104df565b82610605565b610605565b005b50803b1515610296565b8051801592508215610314575b50505f61028f565b61032792506020809183010191016105ed565b5f8061030c565b7f42e0f17d000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9092506020813d6020116103b9575b816103a5602093836104df565b810103126103b55751915f61021f565b5f80fd5b3d9150610398565b6040513d5f823e3d90fd5b61040a906040519182917fbfa562650000000000000000000000000000000000000000000000000000000083526020600484015260248301906105aa565b0390fd5b91929094506020823d602011610441575b8161042c602093836104df565b810103126103b55790519390919060246101ac565b3d915061041f565b6104a09061049a6040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201528a60248201525f6044820152604481526104946064826104df565b89610605565b87610605565b5f610167565b50863b1515610161565b80518015925082156104c5575b50505f61015a565b6104d892506020809183010191016105ed565b5f806104bd565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761052057604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3d156105a5573d9067ffffffffffffffff8211610520576040519161059a601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016602001846104df565b82523d5f602084013e565b606090565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b908160209103126103b5575180151581036103b55790565b9073ffffffffffffffffffffffffffffffffffffffff61067392165f80604051936106316040866104df565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af161066d61054d565b91610727565b805190811591821561070d575b50501561068957565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b61072092506020809183010191016105ed565b5f80610680565b919290156107a2575081511561073b575090565b3b156107445790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156107b55750805190602001fd5b61040a906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906105aa5660808060405234601557610bad908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f5f3560e01c80628342b6146109c357806315a05a4e1461092e5780631e64918f1461081557806329793f7d1461078357806334ce5dc41461066057806348ab02c41461048e5780635869dba8146103f0578063a91a3f1014610357578063b781a58a1461021c5763e3d45a8314610087575f80fd5b346102195760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610219576100be610a98565b6100c6610abb565b60443591602060405180937f095ea7b3000000000000000000000000000000000000000000000000000000008252818773ffffffffffffffffffffffffffffffffffffffff8261013d8a89600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0393165af1801561020e5773ffffffffffffffffffffffffffffffffffffffff936020936024926101e3575b508560405195869485937fea598cb00000000000000000000000000000000000000000000000000000000085526004850152165af180156101d8576101ac575080f35b6101cd9060203d6020116101d1575b6101c58183610b18565b810190610b86565b5080f35b503d6101bb565b6040513d84823e3d90fd5b61020290853d8711610207575b6101fa8183610b18565b810190610b95565b610169565b503d6101f0565b6040513d86823e3d90fd5b80fd5b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102195780610250610a98565b73ffffffffffffffffffffffffffffffffffffffff6024359116906040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481865afa90811561020e57849161031e575b508181106102bb57505050f35b6102c491610ade565b90803b1561031a5782906004604051809481937fd0e30db00000000000000000000000000000000000000000000000000000000083525af180156101d8576103095750f35b8161031391610b18565b6102195780f35b5050fd5b9350506020833d60201161034f575b8161033a60209383610b18565b8101031261034b578392515f6102ae565b5f80fd5b3d915061032d565b5060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610219578061038b610a98565b479081610396575050f35b73ffffffffffffffffffffffffffffffffffffffff16803b1561031a5782906004604051809481937fd0e30db00000000000000000000000000000000000000000000000000000000083525af180156101d8576103095750f35b50346102195760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610219578073ffffffffffffffffffffffffffffffffffffffff61043e610a98565b16803b1561048b578180916024604051809481937f2e1a7d4d000000000000000000000000000000000000000000000000000000008352833560048401525af180156101d8576103095750f35b50fd5b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610219576104c1610a98565b73ffffffffffffffffffffffffffffffffffffffff6104de610abb565b16604051917f70a08231000000000000000000000000000000000000000000000000000000008352306004840152602083602481855afa92831561020e57849361062c575b508261052d578380f35b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101849052916020908390604490829088905af1801561020e5773ffffffffffffffffffffffffffffffffffffffff93602093602492610611575b508560405195869485937fea598cb00000000000000000000000000000000000000000000000000000000085526004850152165af180156101d8576105f2575b80808380f35b61060a9060203d6020116101d1576101c58183610b18565b505f6105ec565b61062790853d8711610207576101fa8183610b18565b6105ac565b9092506020813d602011610658575b8161064860209383610b18565b8101031261034b5751915f610523565b3d915061063b565b5060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610219578073ffffffffffffffffffffffffffffffffffffffff6106a9610a98565b166040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481855afa908115610778578391610743575b50806106f7575050f35b813b1561031a5782916024839260405194859384927f2e1a7d4d00000000000000000000000000000000000000000000000000000000845260048401525af180156101d8576103095750f35b9250506020823d602011610770575b8161075f60209383610b18565b8101031261034b578291515f6106ed565b3d9150610752565b6040513d85823e3d90fd5b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610219578073ffffffffffffffffffffffffffffffffffffffff6107cc610a98565b16803b1561048b5781600491604051928380927fd0e30db0000000000000000000000000000000000000000000000000000000008252602435905af180156101d8576103095750f35b50346102195760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610219578073ffffffffffffffffffffffffffffffffffffffff610863610a98565b16604051907f70a08231000000000000000000000000000000000000000000000000000000008252306004830152602082602481845afa9182156107785783926108f7575b50816108b2575050f35b602460209260405194859384927fde0e9a3e00000000000000000000000000000000000000000000000000000000845260048401525af180156101d8576101ac575080f35b925090506020823d602011610926575b8161091460209383610b18565b8101031261034b57829151905f6108a8565b3d9150610907565b50346102195760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102195780602073ffffffffffffffffffffffffffffffffffffffff6024610980610a98565b60405194859384927fde0e9a3e00000000000000000000000000000000000000000000000000000000845284356004850152165af180156101d8576101ac575080f35b503461034b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261034b576109fb610a98565b6024359047828110610a0b578380f35b73ffffffffffffffffffffffffffffffffffffffff610a2b921692610ade565b813b1561034b575f916024839260405194859384927f2e1a7d4d00000000000000000000000000000000000000000000000000000000845260048401525af18015610a8d57610a7a5780808380f35b610a8691505f90610b18565b5f5f6105ec565b6040513d5f823e3d90fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361034b57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361034b57565b91908203918211610aeb57565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b5957604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261034b575190565b9081602091031261034b5751801515810361034b579056608080604052346015576103f2908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c633e8bca6814610025575f80fd5b3461026f5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026f5760043573ffffffffffffffffffffffffffffffffffffffff811680910361026f576024359173ffffffffffffffffffffffffffffffffffffffff831680930361026f576044359060208101907fa9059cbb000000000000000000000000000000000000000000000000000000008252836024820152826044820152604481526100de6064826102ac565b5f806040938451936100f086866102ac565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020860152519082895af1903d156102a0573d67ffffffffffffffff8111610273576101819260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160191610171865193846102ac565b82523d5f602084013e5b876102ed565b805190811591821561024c575b5050156101c957807f707da3174303ef012eae997e76518ad0cc80830ffe62ad66a5db5df757187dbc915192835260643560208401523092a4005b608490517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b819250906020918101031261026f5760200151801515810361026f575f8061018e565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6101819160609061017b565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761027357604052565b919290156103685750815115610301575090565b3b1561030a5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b82519091501561037b5750805190602001fd5b60446020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040519485937f08c379a00000000000000000000000000000000000000000000000000000000085528160048601528051918291826024880152018686015e5f85828601015201168101030190fd60a08060405234602157306080526104fe908161002682396080518160ac0152f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c634d618e3b14610024575f80fd5b346103575760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103575760043567ffffffffffffffff8111610357576100739036906004016103e9565b9060243567ffffffffffffffff8111610357576100949036906004016103e9565b9273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630146103c157838103610399576100ea6100e5826104a1565b61045d565b938185527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610118836104a1565b015f5b8181106103885750505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301905b8381106101d657866040518091602082016020835281518091526040830190602060408260051b8601019301915f905b82821061018b57505050500390f35b919360206101c6827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc06001959799849503018652885161041a565b960192019201859493919261017c565b6101e96101e48286896104b9565b6104c9565b8382101561035b578160051b860135838112156103575786019081359167ffffffffffffffff83116103575760200190823603821361035757825f939284936040519283928337810184815203915af43d1561034f573d9067ffffffffffffffff82116103225761028160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160161045d565b9182523d5f602084013e5b156102b1579060019161029f828a6104ea565b526102aa81896104ea565b500161014c565b9061031e6102c36101e483888b6104b9565b9273ffffffffffffffffffffffffffffffffffffffff6040519485947f61d3730e000000000000000000000000000000000000000000000000000000008652600486015216602484015260606044840152606483019061041a565b0390fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b60609061028c565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b806060602080938a0101520161011b565b7fb4fa3fb3000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fb870face000000000000000000000000000000000000000000000000000000005f5260045ffd5b9181601f840112156103575782359167ffffffffffffffff8311610357576020808501948460051b01011161035757565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761032257604052565b67ffffffffffffffff81116103225760051b60200190565b919081101561035b5760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff811681036103575790565b805182101561035b5760209160051b01019056610100806040523461018e57604081610ab880380380916100208285610192565b83398101031261018e576020816100438261003c6004956101c9565b92016101c9565b608082905260a0523060c05260405163313ce56760e01b815292839182906001600160a01b03165afa80156101645760ff915f9161016f575b50168060120190816012116101215760a05160405163313ce56760e01b81529190602090839060049082906001600160a01b03165afa9182156101645760129260ff915f91610135575b501690030190811161012157604d811161012157600a0a60e0526040516108c190816101f7823960805181818161013b015261049f015260a0518181816102050152610548015260c0518161040f015260e051816105030152f35b634e487b7160e01b5f52601160045260245ffd5b610157915060203d60201161015d575b61014f8183610192565b8101906101dd565b5f6100c6565b503d610145565b6040513d5f823e3d90fd5b610188915060203d60201161015d5761014f8183610192565b5f61007c565b5f80fd5b601f909101601f19168101906001600160401b038211908210176101b557604052565b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b038216820361018e57565b9081602091031261018e575160ff8116810361018e579056fe60806040526004361015610011575f80fd5b5f3560e01c80633b8455f0146100f657806357da11551461003f5763afb18fe71461003a575f80fd5b6101bb565b346100f25760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f25760043573ffffffffffffffffffffffffffffffffffffffff811681036100f2576024359067ffffffffffffffff82116100f257366023830112156100f25781600401359167ffffffffffffffff83116100f25736602484830101116100f2576100ee926100e29260246044359301906103f3565b604051918291826101a7565b0390f35b5f80fd5b346100f2575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f25773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660805260206080f35b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b9060206101b8928181520190610164565b90565b346100f2575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b908092918237015f815290565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176102a457604052565b610236565b3d15610301573d9067ffffffffffffffff82116102a457604051916102f6601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184610263565b82523d5f602084013e565b606090565b519069ffffffffffffffffffff821682036100f257565b908160a09103126100f25761033181610306565b916020820151916040810151916101b8608060608401519301610306565b6040513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9190820391821161039457565b61035a565b9062020f58820180921161039457565b8181029291811591840414171561039457565b81156103c6570490565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b9291905a9373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163014610640575f92839261044860405180938193610229565b03915af4916104556102a9565b921561063857604051907ffeaf968c00000000000000000000000000000000000000000000000000000000825260a08260048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa918215610633575f926105fd575b505f8213156105d557610528916104fc6104f56104f0610501945a90610387565b610399565b3a906103a9565b6103a9565b7f0000000000000000000000000000000000000000000000000000000000000000906103bc565b908082116105a7575073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690610574813284610668565b604051908152329030907f10e10cf093312372223bfef1650c3d61c070dfb80c031f5ff167ebaff246ae4a90602090a490565b7ff7996704000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b7ffd1ee349000000000000000000000000000000000000000000000000000000005f5260045ffd5b61062091925060a03d60a01161062c575b6106188183610263565b81019061031d565b5050509050905f6104cf565b503d61060e565b61034f565b825160208401fd5b7fb870face000000000000000000000000000000000000000000000000000000005f5260045ffd5b9161071e915f8073ffffffffffffffffffffffffffffffffffffffff61073296604051958260208801967fa9059cbb0000000000000000000000000000000000000000000000000000000088521660248801526044870152604486526106cf606487610263565b1692604051946106e0604087610263565b602086527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020870152519082855af16107186102a9565b916107f1565b8051908115918215610734575b5050610766565b565b610747925060208091830101910161074e565b5f8061072b565b908160209103126100f2575180151581036100f25790565b1561076d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9192901561086c5750815115610805575090565b3b1561080e5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b82519091501561087f5750805190602001fd5b6108bd906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610164565b0390fd608080604052346015576106bd908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c63bf9ca86b14610027575f80fd5b6101c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103105760043573ffffffffffffffffffffffffffffffffffffffff8116809103610310576024359173ffffffffffffffffffffffffffffffffffffffff8316809303610310576044359073ffffffffffffffffffffffffffffffffffffffff8216809203610310576064359173ffffffffffffffffffffffffffffffffffffffff8316809303610310576084359473ffffffffffffffffffffffffffffffffffffffff86168096036103105760a43592610104359373ffffffffffffffffffffffffffffffffffffffff8516809503610310576101243563ffffffff8116809103610310576101443563ffffffff811680910361031057610164359063ffffffff821680920361031057610184359267ffffffffffffffff841161031057366023850112156103105783600401359567ffffffffffffffff8711610310573660248887010111610310576101a43590811515820361031057808c5f8f9360208291017f095ea7b30000000000000000000000000000000000000000000000000000000081528560248601528b6044860152604485526101ef6064866103b3565b84519082855af16101fe610421565b81610384575b508061037a575b1561031b575b5050505f146103145784985b8b3b156103105786956040519d8e9c8d9b8c9b7f7b939232000000000000000000000000000000000000000000000000000000008d5260048d015260248c015260448b015260648a0152608489015260c43560a489015260e43560c489015260e488015261010487015261012486015261014485015261016484016101809052816101848501526024016101a48401378082016101a4015f9052601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101036101a401915a945f95f18015610305576102f7575080f35b61030391505f906103b3565b005b6040513d5f823e3d90fd5b5f80fd5b5f9861021d565b6103729261036c91604051917f095ea7b300000000000000000000000000000000000000000000000000000000602084015260248301525f6044830152604482526103676064836103b3565b610496565b8c610496565b8b5f8c610211565b50803b151561020b565b8051801592508215610399575b50505f610204565b6103ac925060208091830101910161047e565b5f80610391565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176103f457604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3d15610479573d9067ffffffffffffffff82116103f4576040519161046e601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016602001846103b3565b82523d5f602084013e565b606090565b90816020910312610310575180151581036103105790565b9073ffffffffffffffffffffffffffffffffffffffff61050492165f80604051936104c26040866103b3565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af16104fe610421565b916105b8565b805190811591821561059e575b50501561051a57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6105b1925060208091830101910161047e565b5f80610511565b9192901561063357508151156105cc575090565b3b156105d55790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156106465750805190602001fd5b60446020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040519485937f08c379a00000000000000000000000000000000000000000000000000000000085528160048601528051918291826024880152018686015e5f85828601015201168101030190fd6080806040523460155761023f908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c6331be912514610025575f80fd5b3461017d5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261017d5760043573ffffffffffffffffffffffffffffffffffffffff811680910361017d57602435906044359063ffffffff821680920361017d576084359373ffffffffffffffffffffffffffffffffffffffff851680950361017d577f095ea7b30000000000000000000000000000000000000000000000000000000081528160048201528360248201526020816044815f895af1801561018957610194575b506020925f60849260405196879586947f6fd3504e00000000000000000000000000000000000000000000000000000000865260048601526024850152606435604485015260648401525af180156101895761014957005b6020813d602011610181575b81610162602093836101d1565b8101031261017d575167ffffffffffffffff81160361017d57005b5f80fd5b3d9150610155565b6040513d5f823e3d90fd5b6020813d6020116101c9575b816101ad602093836101d1565b8101031261017d575192831515840361017d57925060206100f1565b3d91506101a0565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761021257604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd"

    public static let AssetPositionNotFoundError = ABI.Function(
        name: "AssetPositionNotFound",
        inputs: []
    )

    public static let BadDataError = ABI.Function(
        name: "BadData",
        inputs: []
    )

    public static let BalanceNotRightError = ABI.Function(
        name: "BalanceNotRight",
        inputs: [.uint256, .uint256, .uint256]
    )

    public static let BridgeAmountTooLowError = ABI.Function(
        name: "BridgeAmountTooLow",
        inputs: []
    )

    public static let BridgingUnsupportedForAssetError = ABI.Function(
        name: "BridgingUnsupportedForAsset",
        inputs: []
    )

    public static let FundsUnavailableError = ABI.Function(
        name: "FundsUnavailable",
        inputs: [.string, .uint256, .uint256]
    )

    public static let ImpossibleToConstructQuotePayError = ABI.Function(
        name: "ImpossibleToConstructQuotePay",
        inputs: [.string]
    )

    public static let IndexOutOfBoundError = ABI.Function(
        name: "IndexOutOfBound",
        inputs: []
    )

    public static let InvalidActionTypeError = ABI.Function(
        name: "InvalidActionType",
        inputs: []
    )

    public static let InvalidAssetForBridgeError = ABI.Function(
        name: "InvalidAssetForBridge",
        inputs: []
    )

    public static let InvalidInputError = ABI.Function(
        name: "InvalidInput",
        inputs: []
    )

    public static let InvalidRepayActionContextError = ABI.Function(
        name: "InvalidRepayActionContext",
        inputs: []
    )

    public static let KeyNotFoundError = ABI.Function(
        name: "KeyNotFound",
        inputs: []
    )

    public static let MaxCostMissingForChainError = ABI.Function(
        name: "MaxCostMissingForChain",
        inputs: [.uint256]
    )

    public static let MaxCostTooHighError = ABI.Function(
        name: "MaxCostTooHigh",
        inputs: []
    )

    public static let MissingWrapperCounterpartError = ABI.Function(
        name: "MissingWrapperCounterpart",
        inputs: []
    )

    public static let MorphoMarketNotFoundError = ABI.Function(
        name: "MorphoMarketNotFound",
        inputs: []
    )

    public static let MorphoVaultNotFoundError = ABI.Function(
        name: "MorphoVaultNotFound",
        inputs: []
    )

    public static let NoKnownAssetQuoteError = ABI.Function(
        name: "NoKnownAssetQuote",
        inputs: [.string]
    )

    public static let NoKnownBridgeError = ABI.Function(
        name: "NoKnownBridge",
        inputs: [.string, .uint256]
    )

    public static let NoKnownDomainIdError = ABI.Function(
        name: "NoKnownDomainId",
        inputs: [.string, .uint256]
    )

    public static let NoKnownPaymentTokenError = ABI.Function(
        name: "NoKnownPaymentToken",
        inputs: [.uint256]
    )

    public static let NoKnownRouterError = ABI.Function(
        name: "NoKnownRouter",
        inputs: [.string, .uint256]
    )

    public static let NoPriceFeedPathFoundError = ABI.Function(
        name: "NoPriceFeedPathFound",
        inputs: [.string, .string]
    )

    public static let NotEnoughFundsToBridgeError = ABI.Function(
        name: "NotEnoughFundsToBridge",
        inputs: [.string, .uint256, .uint256]
    )

    public static let NotUnwrappableError = ABI.Function(
        name: "NotUnwrappable",
        inputs: []
    )

    public static let NotWrappableError = ABI.Function(
        name: "NotWrappable",
        inputs: []
    )

    public static let QuarkSecretNotFoundError = ABI.Function(
        name: "QuarkSecretNotFound",
        inputs: [.address]
    )

    public static let UnableToConstructPaycallError = ABI.Function(
        name: "UnableToConstructPaycall",
        inputs: [.string, .uint256]
    )

    public static let UnableToConstructQuotePayError = ABI.Function(
        name: "UnableToConstructQuotePay",
        inputs: [.string, .uint256]
    )

    public static let UnsupportedChainIdError = ABI.Function(
        name: "UnsupportedChainId",
        inputs: []
    )

    public enum RevertReason: Equatable, Error {
        case assetPositionNotFound
        case badData
        case balanceNotRight(BigUInt, BigUInt, BigUInt)
        case bridgeAmountTooLow
        case bridgingUnsupportedForAsset
        case fundsUnavailable(String, BigUInt, BigUInt)
        case impossibleToConstructQuotePay(String)
        case indexOutOfBound
        case invalidActionType
        case invalidAssetForBridge
        case invalidInput
        case invalidRepayActionContext
        case keyNotFound
        case maxCostMissingForChain(BigUInt)
        case maxCostTooHigh
        case missingWrapperCounterpart
        case morphoMarketNotFound
        case morphoVaultNotFound
        case noKnownAssetQuote(String)
        case noKnownBridge(String, BigUInt)
        case noKnownDomainId(String, BigUInt)
        case noKnownPaymentToken(BigUInt)
        case noKnownRouter(String, BigUInt)
        case noPriceFeedPathFound(String, String)
        case notEnoughFundsToBridge(String, BigUInt, BigUInt)
        case notUnwrappable
        case notWrappable
        case quarkSecretNotFound(EthAddress)
        case unableToConstructPaycall(String, BigUInt)
        case unableToConstructQuotePay(String, BigUInt)
        case unsupportedChainId
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (AssetPositionNotFoundError, _):
            return .assetPositionNotFound
        case (BadDataError, _):
            return .badData
        case (BalanceNotRightError, let .tuple3(.uint256(paymentAssetBalance), .uint256(assetsIn), .uint256(assetsOut))):
            return .balanceNotRight(paymentAssetBalance, assetsIn, assetsOut)
        case (BridgeAmountTooLowError, _):
            return .bridgeAmountTooLow
        case (BridgingUnsupportedForAssetError, _):
            return .bridgingUnsupportedForAsset
        case (FundsUnavailableError, let .tuple3(.string(assetSymbol), .uint256(requiredAmount), .uint256(actualAmount))):
            return .fundsUnavailable(assetSymbol, requiredAmount, actualAmount)
        case (ImpossibleToConstructQuotePayError, let .tuple1(.string(assetSymbol))):
            return .impossibleToConstructQuotePay(assetSymbol)
        case (IndexOutOfBoundError, _):
            return .indexOutOfBound
        case (InvalidActionTypeError, _):
            return .invalidActionType
        case (InvalidAssetForBridgeError, _):
            return .invalidAssetForBridge
        case (InvalidInputError, _):
            return .invalidInput
        case (InvalidRepayActionContextError, _):
            return .invalidRepayActionContext
        case (KeyNotFoundError, _):
            return .keyNotFound
        case (MaxCostMissingForChainError, let .tuple1(.uint256(chainId))):
            return .maxCostMissingForChain(chainId)
        case (MaxCostTooHighError, _):
            return .maxCostTooHigh
        case (MissingWrapperCounterpartError, _):
            return .missingWrapperCounterpart
        case (MorphoMarketNotFoundError, _):
            return .morphoMarketNotFound
        case (MorphoVaultNotFoundError, _):
            return .morphoVaultNotFound
        case (NoKnownAssetQuoteError, let .tuple1(.string(symbol))):
            return .noKnownAssetQuote(symbol)
        case (NoKnownBridgeError, let .tuple2(.string(bridgeType), .uint256(srcChainId))):
            return .noKnownBridge(bridgeType, srcChainId)
        case (NoKnownDomainIdError, let .tuple2(.string(bridgeType), .uint256(dstChainId))):
            return .noKnownDomainId(bridgeType, dstChainId)
        case (NoKnownPaymentTokenError, let .tuple1(.uint256(chainId))):
            return .noKnownPaymentToken(chainId)
        case (NoKnownRouterError, let .tuple2(.string(routerType), .uint256(chainId))):
            return .noKnownRouter(routerType, chainId)
        case (NoPriceFeedPathFoundError, let .tuple2(.string(inputAssetSymbol), .string(outputAssetSymbol))):
            return .noPriceFeedPathFound(inputAssetSymbol, outputAssetSymbol)
        case (NotEnoughFundsToBridgeError, let .tuple3(.string(assetSymbol), .uint256(requiredAmount), .uint256(amountLeftToBridge))):
            return .notEnoughFundsToBridge(assetSymbol, requiredAmount, amountLeftToBridge)
        case (NotUnwrappableError, _):
            return .notUnwrappable
        case (NotWrappableError, _):
            return .notWrappable
        case (QuarkSecretNotFoundError, let .tuple1(.address(account))):
            return .quarkSecretNotFound(account)
        case (UnableToConstructPaycallError, let .tuple2(.string(assetSymbol), .uint256(maxCost))):
            return .unableToConstructPaycall(assetSymbol, maxCost)
        case (UnableToConstructQuotePayError, let .tuple2(.string(assetSymbol), .uint256(totalQuoteAmount))):
            return .unableToConstructQuotePay(assetSymbol, totalQuoteAmount)
        case (UnsupportedChainIdError, _):
            return .unsupportedChainId
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [AssetPositionNotFoundError, BadDataError, BalanceNotRightError, BridgeAmountTooLowError, BridgingUnsupportedForAssetError, FundsUnavailableError, ImpossibleToConstructQuotePayError, IndexOutOfBoundError, InvalidActionTypeError, InvalidAssetForBridgeError, InvalidInputError, InvalidRepayActionContextError, KeyNotFoundError, MaxCostMissingForChainError, MaxCostTooHighError, MissingWrapperCounterpartError, MorphoMarketNotFoundError, MorphoVaultNotFoundError, NoKnownAssetQuoteError, NoKnownBridgeError, NoKnownDomainIdError, NoKnownPaymentTokenError, NoKnownRouterError, NoPriceFeedPathFoundError, NotEnoughFundsToBridgeError, NotUnwrappableError, NotWrappableError, QuarkSecretNotFoundError, UnableToConstructPaycallError, UnableToConstructQuotePayError, UnsupportedChainIdError]
    public static let functions: [ABI.Function] = [VERSIONFn, cometBorrowFn, cometRepayFn, cometSupplyFn, cometWithdrawFn, includeErrorsFn, morphoBorrowFn, morphoClaimRewardsFn, morphoRepayFn, morphoVaultSupplyFn, morphoVaultWithdrawFn, recurringSwapFn, swapFn, transferFn]
    public static let VERSIONFn = ABI.Function(
        name: "VERSION",
        inputs: [],
        outputs: [.string]
    )

    public static func VERSION(withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<String, RevertReason> {
        do {
            let query = try VERSIONFn.encoded(with: [])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try VERSIONFn.decode(output: result)

            switch decoded {
            case let .tuple1(.string(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, VERSIONFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func VERSIONDecode(input: Hex) throws {
        let decodedInput = try VERSIONFn.decodeInput(input: input)
        switch decodedInput {
        case .tuple0:
            return ()
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, VERSIONFn.inputTuple)
        }
    }

    public static let cometBorrowFn = ABI.Function(
        name: "cometBorrow",
        inputs: [.tuple([.uint256, .string, .uint256, .address, .uint256, .array(.uint256), .array(.string), .address, .bool, .string]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bytes32, .uint256, .uint256, .array(Quotes.AssetQuote.schema), .array(Quotes.NetworkOperationFee.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func cometBorrow(borrowIntent: CometActionsBuilder.CometBorrowIntent, chainAccountsList: [Accounts.ChainAccounts], quote: Quotes.Quote, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try cometBorrowFn.encoded(with: [borrowIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), quote.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try cometBorrowFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, cometBorrowFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func cometBorrowDecode(input: Hex) throws -> (CometActionsBuilder.CometBorrowIntent, [Accounts.ChainAccounts], Quotes.Quote) {
        let decodedInput = try cometBorrowFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple10(.uint256(amount),
                                  .string(assetSymbol),
                                  .uint256(blockTimestamp),
                                  .address(borrower),
                                  .uint256(chainId),
                                  .array(.uint256, collateralAmounts),
                                  .array(.string, collateralAssetSymbols),
                                  .address(comet),
                                  .bool(preferAcross),
                                  .string(paymentAssetSymbol)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple5(.bytes32(quoteId),
                                                                                                                                  .uint256(issuedAt),
                                                                                                                                  .uint256(expiresAt),
                                                                                                                                  .array(Quotes.AssetQuote.schema, assetQuotes),
                                                                                                                                  .array(Quotes.NetworkOperationFee.schema, networkOperationFees))):
            return try (CometActionsBuilder.CometBorrowIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, borrower: borrower, chainId: chainId, collateralAmounts: collateralAmounts.map { $0.asBigUInt! }, collateralAssetSymbols: collateralAssetSymbols.map { $0.asString! }, comet: comet, preferAcross: preferAcross, paymentAssetSymbol: paymentAssetSymbol), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, Quotes.Quote(quoteId: quoteId, issuedAt: issuedAt, expiresAt: expiresAt, assetQuotes: assetQuotes.map { try Quotes.AssetQuote.decodeValue($0) }, networkOperationFees: networkOperationFees.map { try Quotes.NetworkOperationFee.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, cometBorrowFn.inputTuple)
        }
    }

    public static let cometRepayFn = ABI.Function(
        name: "cometRepay",
        inputs: [.tuple([.uint256, .string, .uint256, .uint256, .array(.uint256), .array(.string), .address, .address, .bool, .string]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bytes32, .uint256, .uint256, .array(Quotes.AssetQuote.schema), .array(Quotes.NetworkOperationFee.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func cometRepay(repayIntent: CometActionsBuilder.CometRepayIntent, chainAccountsList: [Accounts.ChainAccounts], quote: Quotes.Quote, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try cometRepayFn.encoded(with: [repayIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), quote.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try cometRepayFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, cometRepayFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func cometRepayDecode(input: Hex) throws -> (CometActionsBuilder.CometRepayIntent, [Accounts.ChainAccounts], Quotes.Quote) {
        let decodedInput = try cometRepayFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple10(.uint256(amount),
                                  .string(assetSymbol),
                                  .uint256(blockTimestamp),
                                  .uint256(chainId),
                                  .array(.uint256, collateralAmounts),
                                  .array(.string, collateralAssetSymbols),
                                  .address(comet),
                                  .address(repayer),
                                  .bool(preferAcross),
                                  .string(paymentAssetSymbol)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple5(.bytes32(quoteId),
                                                                                                                                  .uint256(issuedAt),
                                                                                                                                  .uint256(expiresAt),
                                                                                                                                  .array(Quotes.AssetQuote.schema, assetQuotes),
                                                                                                                                  .array(Quotes.NetworkOperationFee.schema, networkOperationFees))):
            return try (CometActionsBuilder.CometRepayIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, chainId: chainId, collateralAmounts: collateralAmounts.map { $0.asBigUInt! }, collateralAssetSymbols: collateralAssetSymbols.map { $0.asString! }, comet: comet, repayer: repayer, preferAcross: preferAcross, paymentAssetSymbol: paymentAssetSymbol), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, Quotes.Quote(quoteId: quoteId, issuedAt: issuedAt, expiresAt: expiresAt, assetQuotes: assetQuotes.map { try Quotes.AssetQuote.decodeValue($0) }, networkOperationFees: networkOperationFees.map { try Quotes.NetworkOperationFee.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, cometRepayFn.inputTuple)
        }
    }

    public static let cometSupplyFn = ABI.Function(
        name: "cometSupply",
        inputs: [.tuple([.uint256, .string, .uint256, .uint256, .address, .address, .bool, .string]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bytes32, .uint256, .uint256, .array(Quotes.AssetQuote.schema), .array(Quotes.NetworkOperationFee.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func cometSupply(cometSupplyIntent: CometActionsBuilder.CometSupplyIntent, chainAccountsList: [Accounts.ChainAccounts], quote: Quotes.Quote, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try cometSupplyFn.encoded(with: [cometSupplyIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), quote.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try cometSupplyFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, cometSupplyFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func cometSupplyDecode(input: Hex) throws -> (CometActionsBuilder.CometSupplyIntent, [Accounts.ChainAccounts], Quotes.Quote) {
        let decodedInput = try cometSupplyFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple8(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .uint256(chainId),
                                 .address(comet),
                                 .address(sender),
                                 .bool(preferAcross),
                                 .string(paymentAssetSymbol)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple5(.bytes32(quoteId),
                                                                                                                                 .uint256(issuedAt),
                                                                                                                                 .uint256(expiresAt),
                                                                                                                                 .array(Quotes.AssetQuote.schema, assetQuotes),
                                                                                                                                 .array(Quotes.NetworkOperationFee.schema, networkOperationFees))):
            return try (CometActionsBuilder.CometSupplyIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, chainId: chainId, comet: comet, sender: sender, preferAcross: preferAcross, paymentAssetSymbol: paymentAssetSymbol), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, Quotes.Quote(quoteId: quoteId, issuedAt: issuedAt, expiresAt: expiresAt, assetQuotes: assetQuotes.map { try Quotes.AssetQuote.decodeValue($0) }, networkOperationFees: networkOperationFees.map { try Quotes.NetworkOperationFee.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, cometSupplyFn.inputTuple)
        }
    }

    public static let cometWithdrawFn = ABI.Function(
        name: "cometWithdraw",
        inputs: [.tuple([.uint256, .string, .uint256, .uint256, .address, .address, .bool, .string]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bytes32, .uint256, .uint256, .array(Quotes.AssetQuote.schema), .array(Quotes.NetworkOperationFee.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func cometWithdraw(cometWithdrawIntent: CometActionsBuilder.CometWithdrawIntent, chainAccountsList: [Accounts.ChainAccounts], quote: Quotes.Quote, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try cometWithdrawFn.encoded(with: [cometWithdrawIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), quote.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try cometWithdrawFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, cometWithdrawFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func cometWithdrawDecode(input: Hex) throws -> (CometActionsBuilder.CometWithdrawIntent, [Accounts.ChainAccounts], Quotes.Quote) {
        let decodedInput = try cometWithdrawFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple8(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .uint256(chainId),
                                 .address(comet),
                                 .address(withdrawer),
                                 .bool(preferAcross),
                                 .string(paymentAssetSymbol)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple5(.bytes32(quoteId),
                                                                                                                                 .uint256(issuedAt),
                                                                                                                                 .uint256(expiresAt),
                                                                                                                                 .array(Quotes.AssetQuote.schema, assetQuotes),
                                                                                                                                 .array(Quotes.NetworkOperationFee.schema, networkOperationFees))):
            return try (CometActionsBuilder.CometWithdrawIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, chainId: chainId, comet: comet, withdrawer: withdrawer, preferAcross: preferAcross, paymentAssetSymbol: paymentAssetSymbol), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, Quotes.Quote(quoteId: quoteId, issuedAt: issuedAt, expiresAt: expiresAt, assetQuotes: assetQuotes.map { try Quotes.AssetQuote.decodeValue($0) }, networkOperationFees: networkOperationFees.map { try Quotes.NetworkOperationFee.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, cometWithdrawFn.inputTuple)
        }
    }

    public static let includeErrorsFn = ABI.Function(
        name: "includeErrors",
        inputs: [],
        outputs: [.uint256]
    )

    public static func includeErrors(withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<BigUInt, RevertReason> {
        do {
            let query = try includeErrorsFn.encoded(with: [])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try includeErrorsFn.decode(output: result)

            switch decoded {
            case let .tuple1(.uint256(var0)):
                return .success(var0)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, includeErrorsFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func includeErrorsDecode(input: Hex) throws {
        let decodedInput = try includeErrorsFn.decodeInput(input: input)
        switch decodedInput {
        case .tuple0:
            return ()
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, includeErrorsFn.inputTuple)
        }
    }

    public static let morphoBorrowFn = ABI.Function(
        name: "morphoBorrow",
        inputs: [.tuple([.uint256, .string, .uint256, .address, .uint256, .uint256, .string, .bool]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bool, .string, .bytes32, .array(PaymentInfo.PaymentMaxCost.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func morphoBorrow(borrowIntent: MorphoActionsBuilder.MorphoBorrowIntent, chainAccountsList: [Accounts.ChainAccounts], payment: PaymentInfo.Payment, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try morphoBorrowFn.encoded(with: [borrowIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), payment.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try morphoBorrowFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, morphoBorrowFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func morphoBorrowDecode(input: Hex) throws -> (MorphoActionsBuilder.MorphoBorrowIntent, [Accounts.ChainAccounts], PaymentInfo.Payment) {
        let decodedInput = try morphoBorrowFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple8(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .address(borrower),
                                 .uint256(chainId),
                                 .uint256(collateralAmount),
                                 .string(collateralAssetSymbol),
                                 .bool(preferAcross)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple4(.bool(isToken),
                                                                                                                         .string(currency),
                                                                                                                         .bytes32(quoteId),
                                                                                                                         .array(PaymentInfo.PaymentMaxCost.schema, maxCosts))):
            return try (MorphoActionsBuilder.MorphoBorrowIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, borrower: borrower, chainId: chainId, collateralAmount: collateralAmount, collateralAssetSymbol: collateralAssetSymbol, preferAcross: preferAcross), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, PaymentInfo.Payment(isToken: isToken, currency: currency, quoteId: quoteId, maxCosts: maxCosts.map { try PaymentInfo.PaymentMaxCost.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, morphoBorrowFn.inputTuple)
        }
    }

    public static let morphoClaimRewardsFn = ABI.Function(
        name: "morphoClaimRewards",
        inputs: [.tuple([.uint256, .address, .uint256, .array(.address), .array(.uint256), .array(.address), .array(.address), .array(.bytes32), .bool]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bool, .string, .bytes32, .array(PaymentInfo.PaymentMaxCost.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func morphoClaimRewards(claimIntent: MorphoActionsBuilder.MorphoRewardsClaimIntent, chainAccountsList: [Accounts.ChainAccounts], payment: PaymentInfo.Payment, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try morphoClaimRewardsFn.encoded(with: [claimIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), payment.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try morphoClaimRewardsFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, morphoClaimRewardsFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func morphoClaimRewardsDecode(input: Hex) throws -> (MorphoActionsBuilder.MorphoRewardsClaimIntent, [Accounts.ChainAccounts], PaymentInfo.Payment) {
        let decodedInput = try morphoClaimRewardsFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple9(.uint256(blockTimestamp),
                                 .address(claimer),
                                 .uint256(chainId),
                                 .array(.address, accounts),
                                 .array(.uint256, claimables),
                                 .array(.address, distributors),
                                 .array(.address, rewards),
                                 .array(.bytes32, proofs),
                                 .bool(preferAcross)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple4(.bool(isToken),
                                                                                                                         .string(currency),
                                                                                                                         .bytes32(quoteId),
                                                                                                                         .array(PaymentInfo.PaymentMaxCost.schema, maxCosts))):
            return try (MorphoActionsBuilder.MorphoRewardsClaimIntent(blockTimestamp: blockTimestamp, claimer: claimer, chainId: chainId, accounts: accounts.map { $0.asEthAddress! }, claimables: claimables.map { $0.asBigUInt! }, distributors: distributors.map { $0.asEthAddress! }, rewards: rewards.map { $0.asEthAddress! }, proofs: proofs.map { $0.asHex! }, preferAcross: preferAcross), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, PaymentInfo.Payment(isToken: isToken, currency: currency, quoteId: quoteId, maxCosts: maxCosts.map { try PaymentInfo.PaymentMaxCost.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, morphoClaimRewardsFn.inputTuple)
        }
    }

    public static let morphoRepayFn = ABI.Function(
        name: "morphoRepay",
        inputs: [.tuple([.uint256, .string, .uint256, .address, .uint256, .uint256, .string, .bool]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bool, .string, .bytes32, .array(PaymentInfo.PaymentMaxCost.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func morphoRepay(repayIntent: MorphoActionsBuilder.MorphoRepayIntent, chainAccountsList: [Accounts.ChainAccounts], payment: PaymentInfo.Payment, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try morphoRepayFn.encoded(with: [repayIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), payment.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try morphoRepayFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, morphoRepayFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func morphoRepayDecode(input: Hex) throws -> (MorphoActionsBuilder.MorphoRepayIntent, [Accounts.ChainAccounts], PaymentInfo.Payment) {
        let decodedInput = try morphoRepayFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple8(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .address(repayer),
                                 .uint256(chainId),
                                 .uint256(collateralAmount),
                                 .string(collateralAssetSymbol),
                                 .bool(preferAcross)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple4(.bool(isToken),
                                                                                                                         .string(currency),
                                                                                                                         .bytes32(quoteId),
                                                                                                                         .array(PaymentInfo.PaymentMaxCost.schema, maxCosts))):
            return try (MorphoActionsBuilder.MorphoRepayIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, repayer: repayer, chainId: chainId, collateralAmount: collateralAmount, collateralAssetSymbol: collateralAssetSymbol, preferAcross: preferAcross), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, PaymentInfo.Payment(isToken: isToken, currency: currency, quoteId: quoteId, maxCosts: maxCosts.map { try PaymentInfo.PaymentMaxCost.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, morphoRepayFn.inputTuple)
        }
    }

    public static let morphoVaultSupplyFn = ABI.Function(
        name: "morphoVaultSupply",
        inputs: [.tuple([.uint256, .string, .uint256, .address, .uint256, .bool]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bool, .string, .bytes32, .array(PaymentInfo.PaymentMaxCost.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func morphoVaultSupply(supplyIntent: MorphoVaultActionsBuilder.MorphoVaultSupplyIntent, chainAccountsList: [Accounts.ChainAccounts], payment: PaymentInfo.Payment, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try morphoVaultSupplyFn.encoded(with: [supplyIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), payment.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try morphoVaultSupplyFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, morphoVaultSupplyFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func morphoVaultSupplyDecode(input: Hex) throws -> (MorphoVaultActionsBuilder.MorphoVaultSupplyIntent, [Accounts.ChainAccounts], PaymentInfo.Payment) {
        let decodedInput = try morphoVaultSupplyFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple6(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .address(sender),
                                 .uint256(chainId),
                                 .bool(preferAcross)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple4(.bool(isToken),
                                                                                                                         .string(currency),
                                                                                                                         .bytes32(quoteId),
                                                                                                                         .array(PaymentInfo.PaymentMaxCost.schema, maxCosts))):
            return try (MorphoVaultActionsBuilder.MorphoVaultSupplyIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, sender: sender, chainId: chainId, preferAcross: preferAcross), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, PaymentInfo.Payment(isToken: isToken, currency: currency, quoteId: quoteId, maxCosts: maxCosts.map { try PaymentInfo.PaymentMaxCost.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, morphoVaultSupplyFn.inputTuple)
        }
    }

    public static let morphoVaultWithdrawFn = ABI.Function(
        name: "morphoVaultWithdraw",
        inputs: [.tuple([.uint256, .string, .uint256, .uint256, .address, .bool]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bool, .string, .bytes32, .array(PaymentInfo.PaymentMaxCost.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func morphoVaultWithdraw(withdrawIntent: MorphoVaultActionsBuilder.MorphoVaultWithdrawIntent, chainAccountsList: [Accounts.ChainAccounts], payment: PaymentInfo.Payment, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try morphoVaultWithdrawFn.encoded(with: [withdrawIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), payment.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try morphoVaultWithdrawFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, morphoVaultWithdrawFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func morphoVaultWithdrawDecode(input: Hex) throws -> (MorphoVaultActionsBuilder.MorphoVaultWithdrawIntent, [Accounts.ChainAccounts], PaymentInfo.Payment) {
        let decodedInput = try morphoVaultWithdrawFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple6(.uint256(amount),
                                 .string(assetSymbol),
                                 .uint256(blockTimestamp),
                                 .uint256(chainId),
                                 .address(withdrawer),
                                 .bool(preferAcross)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple4(.bool(isToken),
                                                                                                                         .string(currency),
                                                                                                                         .bytes32(quoteId),
                                                                                                                         .array(PaymentInfo.PaymentMaxCost.schema, maxCosts))):
            return try (MorphoVaultActionsBuilder.MorphoVaultWithdrawIntent(amount: amount, assetSymbol: assetSymbol, blockTimestamp: blockTimestamp, chainId: chainId, withdrawer: withdrawer, preferAcross: preferAcross), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, PaymentInfo.Payment(isToken: isToken, currency: currency, quoteId: quoteId, maxCosts: maxCosts.map { try PaymentInfo.PaymentMaxCost.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, morphoVaultWithdrawFn.inputTuple)
        }
    }

    public static let recurringSwapFn = ABI.Function(
        name: "recurringSwap",
        inputs: [.tuple([.uint256, .address, .uint256, .address, .uint256, .bool, .bytes, .uint256, .address, .uint256, .bool]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bool, .string, .bytes32, .array(PaymentInfo.PaymentMaxCost.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func recurringSwap(swapIntent: SwapActionsBuilder.RecurringSwapIntent, chainAccountsList: [Accounts.ChainAccounts], payment: PaymentInfo.Payment, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try recurringSwapFn.encoded(with: [swapIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), payment.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try recurringSwapFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, recurringSwapFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func recurringSwapDecode(input: Hex) throws -> (SwapActionsBuilder.RecurringSwapIntent, [Accounts.ChainAccounts], PaymentInfo.Payment) {
        let decodedInput = try recurringSwapFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple11(.uint256(chainId),
                                  .address(sellToken),
                                  .uint256(sellAmount),
                                  .address(buyToken),
                                  .uint256(buyAmount),
                                  .bool(isExactOut),
                                  .bytes(path),
                                  .uint256(interval),
                                  .address(sender),
                                  .uint256(blockTimestamp),
                                  .bool(preferAcross)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple4(.bool(isToken),
                                                                                                                          .string(currency),
                                                                                                                          .bytes32(quoteId),
                                                                                                                          .array(PaymentInfo.PaymentMaxCost.schema, maxCosts))):
            return try (SwapActionsBuilder.RecurringSwapIntent(chainId: chainId, sellToken: sellToken, sellAmount: sellAmount, buyToken: buyToken, buyAmount: buyAmount, isExactOut: isExactOut, path: path, interval: interval, sender: sender, blockTimestamp: blockTimestamp, preferAcross: preferAcross), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, PaymentInfo.Payment(isToken: isToken, currency: currency, quoteId: quoteId, maxCosts: maxCosts.map { try PaymentInfo.PaymentMaxCost.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, recurringSwapFn.inputTuple)
        }
    }

    public static let swapFn = ABI.Function(
        name: "swap",
        inputs: [.tuple([.uint256, .address, .bytes, .address, .uint256, .address, .uint256, .address, .uint256, .address, .bool, .uint256, .bool]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bool, .string, .bytes32, .array(PaymentInfo.PaymentMaxCost.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func swap(swapIntent: SwapActionsBuilder.ZeroExSwapIntent, chainAccountsList: [Accounts.ChainAccounts], payment: PaymentInfo.Payment, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try swapFn.encoded(with: [swapIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), payment.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try swapFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, swapFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func swapDecode(input: Hex) throws -> (SwapActionsBuilder.ZeroExSwapIntent, [Accounts.ChainAccounts], PaymentInfo.Payment) {
        let decodedInput = try swapFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple13(.uint256(chainId),
                                  .address(entryPoint),
                                  .bytes(swapData),
                                  .address(sellToken),
                                  .uint256(sellAmount),
                                  .address(buyToken),
                                  .uint256(buyAmount),
                                  .address(feeToken),
                                  .uint256(feeAmount),
                                  .address(sender),
                                  .bool(isExactOut),
                                  .uint256(blockTimestamp),
                                  .bool(preferAcross)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple4(.bool(isToken),
                                                                                                                          .string(currency),
                                                                                                                          .bytes32(quoteId),
                                                                                                                          .array(PaymentInfo.PaymentMaxCost.schema, maxCosts))):
            return try (SwapActionsBuilder.ZeroExSwapIntent(chainId: chainId, entryPoint: entryPoint, swapData: swapData, sellToken: sellToken, sellAmount: sellAmount, buyToken: buyToken, buyAmount: buyAmount, feeToken: feeToken, feeAmount: feeAmount, sender: sender, isExactOut: isExactOut, blockTimestamp: blockTimestamp, preferAcross: preferAcross), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, PaymentInfo.Payment(isToken: isToken, currency: currency, quoteId: quoteId, maxCosts: maxCosts.map { try PaymentInfo.PaymentMaxCost.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, swapFn.inputTuple)
        }
    }

    public static let transferFn = ABI.Function(
        name: "transfer",
        inputs: [.tuple([.uint256, .string, .uint256, .address, .address, .uint256, .bool, .string]), .array(.tuple([.uint256, .array(Accounts.QuarkSecret.schema), .array(Accounts.AssetPositions.schema), .array(Accounts.CometPositions.schema), .array(Accounts.MorphoPositions.schema), .array(Accounts.MorphoVaultPositions.schema)])), .tuple([.bytes32, .uint256, .uint256, .array(Quotes.AssetQuote.schema), .array(Quotes.NetworkOperationFee.schema)])],
        outputs: [.tuple([.string, .array(IQuarkWallet.QuarkOperation.schema), .array(Actions.Action.schema), EIP712Helper.EIP712Data.schema, .string])]
    )

    public static func transfer(transferIntent: TransferActionsBuilder.TransferIntent, chainAccountsList: [Accounts.ChainAccounts], quote: Quotes.Quote, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<QuarkBuilderBase.BuilderResult, RevertReason> {
        do {
            let query = try transferFn.encoded(with: [transferIntent.asValue, .array(Accounts.ChainAccounts.schema, chainAccountsList.map {
                $0.asValue
            }), quote.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try transferFn.decode(output: result)

            switch decoded {
            case let .tuple1(.tuple5(.string(version),
                                     .array(IQuarkWallet.QuarkOperation.schema, quarkOperations),
                                     .array(Actions.Action.schema, actions),
                                     eip712Data,
                                     .string(paymentCurrency))):
                return try .success(QuarkBuilderBase.BuilderResult(version: version, quarkOperations: quarkOperations.map {
                    try IQuarkWallet.QuarkOperation.decodeValue($0)
                }, actions: actions.map {
                    try Actions.Action.decodeValue($0)
                }, eip712Data: EIP712Helper.EIP712Data.decodeValue(eip712Data), paymentCurrency: paymentCurrency))
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, transferFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func transferDecode(input: Hex) throws -> (TransferActionsBuilder.TransferIntent, [Accounts.ChainAccounts], Quotes.Quote) {
        let decodedInput = try transferFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple3(.tuple8(.uint256(chainId),
                                 .string(assetSymbol),
                                 .uint256(amount),
                                 .address(sender),
                                 .address(recipient),
                                 .uint256(blockTimestamp),
                                 .bool(preferAcross),
                                 .string(paymentAssetSymbol)), .array(Accounts.ChainAccounts.schema, chainAccountsList), .tuple5(.bytes32(quoteId),
                                                                                                                                 .uint256(issuedAt),
                                                                                                                                 .uint256(expiresAt),
                                                                                                                                 .array(Quotes.AssetQuote.schema, assetQuotes),
                                                                                                                                 .array(Quotes.NetworkOperationFee.schema, networkOperationFees))):
            return try (TransferActionsBuilder.TransferIntent(chainId: chainId, assetSymbol: assetSymbol, amount: amount, sender: sender, recipient: recipient, blockTimestamp: blockTimestamp, preferAcross: preferAcross, paymentAssetSymbol: paymentAssetSymbol), chainAccountsList.map { try Accounts.ChainAccounts.decodeValue($0) }, Quotes.Quote(quoteId: quoteId, issuedAt: issuedAt, expiresAt: expiresAt, assetQuotes: assetQuotes.map { try Quotes.AssetQuote.decodeValue($0) }, networkOperationFees: networkOperationFees.map { try Quotes.NetworkOperationFee.decodeValue($0) }))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, transferFn.inputTuple)
        }
    }
}
