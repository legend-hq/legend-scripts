@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum MorphoActions {
    public struct MarketParams: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .address, .address, .uint256])

        public let loanToken: EthAddress
        public let collateralToken: EthAddress
        public let oracle: EthAddress
        public let irm: EthAddress
        public let lltv: BigUInt

        public init(loanToken: EthAddress, collateralToken: EthAddress, oracle: EthAddress, irm: EthAddress, lltv: BigUInt) {
            self.loanToken = loanToken
            self.collateralToken = collateralToken
            self.oracle = oracle
            self.irm = irm
            self.lltv = lltv
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple5(.address(loanToken),
                    .address(collateralToken),
                    .address(oracle),
                    .address(irm),
                    .uint256(lltv))
        }

        public static func decode(hex: Hex) throws -> MarketParams {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> MarketParams {
            switch value {
            case let .tuple5(.address(loanToken),
                             .address(collateralToken),
                             .address(oracle),
                             .address(irm),
                             .uint256(lltv)):
                return MarketParams(loanToken: loanToken, collateralToken: collateralToken, oracle: oracle, irm: irm, lltv: lltv)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public static let creationCode: Hex = ""
    public static let runtimeCode: Hex = ""

    public enum RevertReason: Equatable, Error {
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [marketIdFn, repayAndWithdrawCollateralFn, supplyCollateralAndBorrowFn]
    public static let marketIdFn = ABI.Function(
        name: "marketId",
        inputs: [.tuple([.address, .address, .address, .address, .uint256])],
        outputs: [.bytes32]
    )

    public static func marketId(params: MarketParams, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Hex, RevertReason> {
        do {
            let query = try marketIdFn.encoded(with: [params.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try marketIdFn.decode(output: result)

            switch decoded {
            case let .tuple1(.bytes32(marketParamsId)):
                return .success(marketParamsId)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, marketIdFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func marketIdDecode(input: Hex) throws -> (MarketParams) {
        let decodedInput = try marketIdFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.tuple5(.address(loanToken),
                                 .address(collateralToken),
                                 .address(oracle),
                                 .address(irm),
                                 .uint256(lltv))):
            return try (MarketParams(loanToken: loanToken, collateralToken: collateralToken, oracle: oracle, irm: irm, lltv: lltv))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, marketIdFn.inputTuple)
        }
    }

    public static let repayAndWithdrawCollateralFn = ABI.Function(
        name: "repayAndWithdrawCollateral",
        inputs: [.address, .tuple([.address, .address, .address, .address, .uint256]), .uint256, .uint256],
        outputs: []
    )

    public static func repayAndWithdrawCollateral(morpho: EthAddress, marketParams: MarketParams, repayAmount: BigUInt, withdrawAmount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try repayAndWithdrawCollateralFn.encoded(with: [.address(morpho), marketParams.asValue, .uint256(repayAmount), .uint256(withdrawAmount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try repayAndWithdrawCollateralFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, repayAndWithdrawCollateralFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func repayAndWithdrawCollateralDecode(input: Hex) throws -> (EthAddress, MarketParams, BigUInt, BigUInt) {
        let decodedInput = try repayAndWithdrawCollateralFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple4(.address(morpho), .tuple5(.address(loanToken),
                                                   .address(collateralToken),
                                                   .address(oracle),
                                                   .address(irm),
                                                   .uint256(lltv)), .uint256(repayAmount), .uint256(withdrawAmount)):
            return try (morpho, MarketParams(loanToken: loanToken, collateralToken: collateralToken, oracle: oracle, irm: irm, lltv: lltv), repayAmount, withdrawAmount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, repayAndWithdrawCollateralFn.inputTuple)
        }
    }

    public static let supplyCollateralAndBorrowFn = ABI.Function(
        name: "supplyCollateralAndBorrow",
        inputs: [.address, .tuple([.address, .address, .address, .address, .uint256]), .uint256, .uint256],
        outputs: []
    )

    public static func supplyCollateralAndBorrow(morpho: EthAddress, marketParams: MarketParams, supplyAssetAmount: BigUInt, borrowAssetAmount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try supplyCollateralAndBorrowFn.encoded(with: [.address(morpho), marketParams.asValue, .uint256(supplyAssetAmount), .uint256(borrowAssetAmount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try supplyCollateralAndBorrowFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, supplyCollateralAndBorrowFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func supplyCollateralAndBorrowDecode(input: Hex) throws -> (EthAddress, MarketParams, BigUInt, BigUInt) {
        let decodedInput = try supplyCollateralAndBorrowFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple4(.address(morpho), .tuple5(.address(loanToken),
                                                   .address(collateralToken),
                                                   .address(oracle),
                                                   .address(irm),
                                                   .uint256(lltv)), .uint256(supplyAssetAmount), .uint256(borrowAssetAmount)):
            return try (morpho, MarketParams(loanToken: loanToken, collateralToken: collateralToken, oracle: oracle, irm: irm, lltv: lltv), supplyAssetAmount, borrowAssetAmount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, supplyCollateralAndBorrowFn.inputTuple)
        }
    }
}
