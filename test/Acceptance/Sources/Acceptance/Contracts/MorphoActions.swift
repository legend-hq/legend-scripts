@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum MorphoActions {
    public struct MarketParams: Equatable {
        public static let schema: ABI.Schema = .tuple([.address, .address, .address, .address, .uint256])

        public let loanToken: EthAddress
        public let collateralToken: EthAddress
        public let oracle: EthAddress
        public let irm: EthAddress
        public let lltv: BigUInt

        public init(loanToken: EthAddress, collateralToken: EthAddress, oracle: EthAddress, irm: EthAddress, lltv: BigUInt) {
            self.loanToken = loanToken
            self.collateralToken = collateralToken
            self.oracle = oracle
            self.irm = irm
            self.lltv = lltv
        }

        public var encoded: Hex {
            asValue.encoded
        }

        public var asValue: ABI.Value {
            .tuple5(.address(loanToken),
                    .address(collateralToken),
                    .address(oracle),
                    .address(irm),
                    .uint256(lltv))
        }

        public static func decode(hex: Hex) throws -> MarketParams {
            if let value = try? schema.decode(hex) {
                return try decodeValue(value)
            }
            // both versions are valid encodings of tuples with dynamic fields ( bytes or string ), so try both decodings
            if case let .tuple1(wrappedValue) = try? ABI.Schema.tuple([schema]).decode(hex) {
                return try decodeValue(wrappedValue)
            }
            // retry original to throw the error
            return try decodeValue(schema.decode(hex))
        }

        public static func decodeValue(_ value: ABI.Value) throws -> MarketParams {
            switch value {
            case let .tuple5(.address(loanToken),
                             .address(collateralToken),
                             .address(oracle),
                             .address(irm),
                             .uint256(lltv)):
                return MarketParams(loanToken: loanToken, collateralToken: collateralToken, oracle: oracle, irm: irm, lltv: lltv)
            default:
                throw ABI.DecodeError.mismatchedType(value.schema, schema)
            }
        }
    }

    public static let creationCode: Hex = "0x608060405234601c57600e6020565b61157b61002b823961157b90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b6102ee565b61001d5f3561004c565b8063a927d43314610047578063ae8adba7146100425763df3fb6570361000e576102b9565b61023f565b610208565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61008290610060565b90565b61008e81610079565b0361009557565b5f80fd5b905035906100a682610085565b565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906100ed906100ac565b810190811067ffffffffffffffff82111761010757604052565b6100b6565b9061011f610118610052565b92836100e3565b565b90565b61012d81610121565b0361013457565b5f80fd5b9050359061014582610124565b565b919060a0838203126101b7576101b09061016160a061010c565b9361016e825f8301610099565b5f86015261017f8260208301610099565b60208601526101918260408301610099565b60408601526101a38260608301610099565b6060860152608001610138565b6080830152565b6100a8565b610100818303126101fe576101d3825f8301610099565b926101fb6101e48460208501610147565b936101f28160c08601610138565b9360e001610138565b90565b61005c565b5f0190565b3461023a5761022461021b3660046101bc565b92919091610612565b61022c610052565b8061023681610203565b0390f35b610058565b346102715761025b6102523660046101bc565b92919091610a76565b610263610052565b8061026d81610203565b0390f35b610058565b9060a08282031261028f5761028c915f01610147565b90565b61005c565b90565b6102a090610294565b9052565b91906102b7905f60208501940190610297565b565b346102e9576102e56102d46102cf366004610276565b610e0a565b6102dc610052565b918291826102a4565b0390f35b610058565b5f80fd5b6102fc9051610079565b90565b90565b61031661031161031b92610060565b6102ff565b610060565b90565b61032790610302565b90565b6103339061031e565b90565b61033f90610302565b90565b61034b90610336565b90565b61035790610336565b90565b5f80fd5b60e01b90565b9050519061037182610124565b565b9060208282031261038c57610389915f01610364565b90565b61005c565b61039a90610079565b9052565b91906103b1905f60208501940190610391565b565b6103bb610052565b3d5f823e3d90fd5b90565b6103da6103d56103df926103c3565b6102ff565b610121565b90565b6103eb90610302565b90565b6103f7906103e2565b90565b61040390610336565b90565b67ffffffffffffffff8111610424576104206020916100ac565b0190565b6100b6565b9061043b61043683610406565b61010c565b918252565b369037565b9061046a61045283610429565b926020806104608693610406565b9201910390610440565b565b5f91031261047657565b61005c565b61048490610079565b9052565b61049190610121565b9052565b906080806104ed936104ad5f8201515f86019061047b565b6104bf6020820151602086019061047b565b6104d16040820151604086019061047b565b6104e36060820151606086019061047b565b0151910190610488565b565b6104f890610121565b9052565b5190565b60209181520190565b90825f9392825e0152565b61053361053c6020936105419361052a816104fc565b93848093610500565b95869101610509565b6100ac565b0190565b90926105799061056f61058696946105656101008601975f870190610495565b60a08501906104ef565b60c0830190610391565b60e0818403910152610514565b90565b91906040838203126105b157806105a56105ae925f8601610364565b93602001610364565b90565b61005c565b6105bf906103c6565b9052565b90959492610610946105ff610609926105f5610100966105eb61012088019c5f890190610495565b60a08701906104ef565b60c08501906105b6565b60e0830190610391565b0190610391565b565b91929092806106496106437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610121565b91610121565b146107f3575b8061066261065c5f6103c6565b91610121565b11610724575b508061067c6106765f6103c6565b91610121565b11610687575b505050565b61069a6106956040936103ee565b6103fa565b6106d15f6350d8cd4b9593956106dc826106b33061034e565b6106bc3061034e565b916106c5610052565b9a8b998a98899761035e565b8752600487016105c3565b03925af1801561071f576106f2575b8080610682565b6107129060403d8111610718575b61070a81836100e3565b810190610589565b506106eb565b503d610700565b6103b3565b61074361073b610736602087016102f2565b61032a565b848391610ede565b61075461074f846103ee565b6103fa565b9063238d6579908590926107673061034e565b6107786107735f6103c6565b610445565b823b156107ee575f946107a9869261079e94610792610052565b998a988997889661035e565b865260048601610545565b03925af180156107e9576107bd575b610668565b6107dc905f3d81116107e2575b6107d481836100e3565b81019061046c565b5f6107b8565b503d6107ca565b6103b3565b61035a565b50610846602061081461080f61080a8388016102f2565b61032a565b610342565b6370a082319061083b6108263061034e565b9261082f610052565b9586948593849361035e565b83526004830161039e565b03915afa90811561088c575f9161085e575b5061064f565b61087f915060203d8111610885575b61087781836100e3565b810190610373565b5f610858565b503d61086d565b6103b3565b91936108c96108e196946108bf6108d394976108b56101208801995f890190610495565b60a08701906104ef565b60c08501906105b6565b60e0830190610391565b610100818403910152610514565b90565b6fffffffffffffffffffffffffffffffff1690565b610902816108e4565b0361090957565b5f80fd5b9050519061091a826108f9565b565b91906060838203126109685761096190610936606061010c565b93610943825f8301610364565b5f860152610954826020830161090d565b602086015260400161090d565b6040830152565b6100a8565b9060608282031261098657610983915f0161091c565b90565b61005c565b9160206109ac9294936109a560408201965f830190610297565b0190610391565b565b6109b890516108e4565b90565b6109cf6109ca6109d4926108e4565b6102ff565b610121565b90565b6109e0906109bb565b9052565b9193610a1c610a349694610a12610a269497610a086101208801995f890190610495565b60a08701906105b6565b60c08501906109d7565b60e0830190610391565b610100818403910152610514565b90565b610a6d610a7494610a6360e094989795610a5961010086019a5f870190610495565b60a08501906104ef565b60c0830190610391565b0190610391565b565b909180610a8b610a855f6103c6565b91610121565b11610b59575b5082610aa5610a9f5f6103c6565b91610121565b11610ab0575b505050565b610abc610ac1916103ee565b6103fa565b91638720316d919092610ad33061034e565b610adc3061034e565b823b15610b54575f94610b0d8692610b0294610af6610052565b998a988997889661035e565b865260048601610a37565b03925af18015610b4f57610b23575b8080610aab565b610b42905f3d8111610b48575b610b3a81836100e3565b81019061046c565b5f610b1c565b503d610b30565b6103b3565b61035a565b80610b8c610b867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610121565b91610121565b145f14610d425750610bd2610baa610ba55f85016102f2565b61032a565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91610ede565b610be3610bde826103ee565b6103fa565b6320b76e81835f92610bfc610bf7866103ee565b6103fa565b60606393c5206291610c0d89610e0a565b90610c32610c1a3061034e565b94610c3d610c26610052565b9687958694859461035e565b84526004840161098b565b03915afa8015610d3d57604094610ca0610c6660205f94610c95968691610d0f575b50016109ae565b610c6f3061034e565b610c80610c7b866103c6565b610445565b91610c89610052565b9a8b998a98899761035e565b8752600487016109e4565b03925af18015610d0a57610cdd575b50610cd6610cc6610cc15f85016102f2565b61032a565b82610cd05f6103c6565b91610ede565b5b5f610a91565b610cfd9060403d8111610d03575b610cf581836100e3565b810190610589565b50610caf565b503d610ceb565b6103b3565b610d30915060603d8111610d36575b610d2881836100e3565b81019061096d565b5f610c5f565b503d610d1e565b6103b3565b610d60610d58610d535f86016102f2565b61032a565b838391610ede565b6040610d73610d6e846103ee565b6103fa565b916320b76e8192610db45f879395610dbf82610d8e3061034e565b610d9f610d9a866103c6565b610445565b91610da8610052565b9a8b998a98899761035e565b875260048701610891565b03925af18015610e0157610dd4575b50610cd7565b610df49060403d8111610dfa575b610dec81836100e3565b810190610589565b50610dce565b503d610de2565b6103b3565b5f90565b60a090610e15610e06565b502090565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b610e5c610e57610e6192610e1a565b61035e565b610e23565b90565b916020610e85929493610e7e60408201965f830190610391565b01906104ef565b565b151590565b60ff1690565b610ea6610ea1610eab926103c3565b6102ff565b610e8c565b90565b610eb790610e92565b9052565b916020610edc929493610ed560408201965f830190610391565b0190610eae565b565b9091610f1f600491610f10610ef663095ea7b3610e48565b9186610f00610052565b9586946020860190815201610e64565b602082018103825203826100e3565b90610f34610f2e82849061100b565b15610e87565b610f3e575b505050565b610f8b6004610f9094610f868491610f77610f5c63095ea7b3610e48565b915f90610f67610052565b9687946020860190815201610ebb565b602082018103825203836100e3565b6111fd565b6111fd565b5f8080610f39565b5f90565b606090565b3d5f14610fbc57610fb13d610429565b903d5f602084013e5b565b610fc4610f9c565b90610fba565b610fd381610e87565b03610fda57565b5f80fd5b90505190610feb82610fca565b565b9060208282031261100657611003915f01610fde565b90565b61005c565b905f8091611017610f98565b5061102184610342565b9082602082019151925af1611034610fa1565b8161105f575b509081611046575b5090565b611059915061105490610342565b611269565b5f611042565b905061106a816104fc565b61107c6110765f6103c6565b91610121565b1490811561108c575b505f61103a565b6110a79150602061109c826104fc565b818301019101610fed565b5f611085565b67ffffffffffffffff81116110cb576110c76020916100ac565b0190565b6100b6565b906110e26110dd836110ad565b61010c565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61111860206110d0565b90611125602083016110e7565b565b61112f61110e565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b611195602a604092611132565b61119e8161113b565b0190565b6111b79060208101905f818303910152611188565b90565b156111c157565b6111c9610052565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806111f9600482016111a2565b0390fd5b6112469161120d61121c92610342565b90611216611127565b91611289565b611225816104fc565b6112376112315f6103c6565b91610121565b14908115611248575b506111ba565b565b61126391506020611258826104fc565b818301019101610fed565b5f611240565b611271610f98565b503b61128561127f5f6103c6565b91610121565b1190565b906112a89291611297610f9c565b50906112a25f6103c6565b91611379565b90565b6112b490610336565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b6113116026604092611132565b61131a816112b7565b0190565b6113339060208101905f818303910152611304565b90565b1561133d57565b611345610052565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806113756004820161131e565b0390fd5b915f80916113cf959361138a610f9c565b506113b1611397306112ab565b316113aa6113a485610121565b91610121565b1015611336565b8591602082019151925af1916113c5610fa1565b909290919261146e565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b611406601d602092611132565b61140f816113d2565b0190565b6114289060208101905f8183039101526113f9565b90565b1561143257565b61143a610052565b7f08c379a00000000000000000000000000000000000000000000000000000000081528061146a60048201611413565b0390fd5b919290611479610f9c565b505f146114bd575061148a826104fc565b61149c6114965f6103c6565b91610121565b146114a6575b5090565b6114b26114b791611269565b61142b565b5f6114a2565b82611510565b5190565b6114e66114ef6020936114f4936114dd816114c3565b93848093611132565b95869101610509565b6100ac565b0190565b61150d9160208201915f8184039101526114c7565b90565b9061151a826104fc565b61152c6115265f6103c6565b91610121565b115f1461153c5750805190602001fd5b61157790611548610052565b9182917f08c379a0000000000000000000000000000000000000000000000000000000008352600483016114f8565b0390fd"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b6102ee565b61001d5f3561004c565b8063a927d43314610047578063ae8adba7146100425763df3fb6570361000e576102b9565b61023f565b610208565b60e01c90565b60405190565b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61008290610060565b90565b61008e81610079565b0361009557565b5f80fd5b905035906100a682610085565b565b5f80fd5b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b906100ed906100ac565b810190811067ffffffffffffffff82111761010757604052565b6100b6565b9061011f610118610052565b92836100e3565b565b90565b61012d81610121565b0361013457565b5f80fd5b9050359061014582610124565b565b919060a0838203126101b7576101b09061016160a061010c565b9361016e825f8301610099565b5f86015261017f8260208301610099565b60208601526101918260408301610099565b60408601526101a38260608301610099565b6060860152608001610138565b6080830152565b6100a8565b610100818303126101fe576101d3825f8301610099565b926101fb6101e48460208501610147565b936101f28160c08601610138565b9360e001610138565b90565b61005c565b5f0190565b3461023a5761022461021b3660046101bc565b92919091610612565b61022c610052565b8061023681610203565b0390f35b610058565b346102715761025b6102523660046101bc565b92919091610a76565b610263610052565b8061026d81610203565b0390f35b610058565b9060a08282031261028f5761028c915f01610147565b90565b61005c565b90565b6102a090610294565b9052565b91906102b7905f60208501940190610297565b565b346102e9576102e56102d46102cf366004610276565b610e0a565b6102dc610052565b918291826102a4565b0390f35b610058565b5f80fd5b6102fc9051610079565b90565b90565b61031661031161031b92610060565b6102ff565b610060565b90565b61032790610302565b90565b6103339061031e565b90565b61033f90610302565b90565b61034b90610336565b90565b61035790610336565b90565b5f80fd5b60e01b90565b9050519061037182610124565b565b9060208282031261038c57610389915f01610364565b90565b61005c565b61039a90610079565b9052565b91906103b1905f60208501940190610391565b565b6103bb610052565b3d5f823e3d90fd5b90565b6103da6103d56103df926103c3565b6102ff565b610121565b90565b6103eb90610302565b90565b6103f7906103e2565b90565b61040390610336565b90565b67ffffffffffffffff8111610424576104206020916100ac565b0190565b6100b6565b9061043b61043683610406565b61010c565b918252565b369037565b9061046a61045283610429565b926020806104608693610406565b9201910390610440565b565b5f91031261047657565b61005c565b61048490610079565b9052565b61049190610121565b9052565b906080806104ed936104ad5f8201515f86019061047b565b6104bf6020820151602086019061047b565b6104d16040820151604086019061047b565b6104e36060820151606086019061047b565b0151910190610488565b565b6104f890610121565b9052565b5190565b60209181520190565b90825f9392825e0152565b61053361053c6020936105419361052a816104fc565b93848093610500565b95869101610509565b6100ac565b0190565b90926105799061056f61058696946105656101008601975f870190610495565b60a08501906104ef565b60c0830190610391565b60e0818403910152610514565b90565b91906040838203126105b157806105a56105ae925f8601610364565b93602001610364565b90565b61005c565b6105bf906103c6565b9052565b90959492610610946105ff610609926105f5610100966105eb61012088019c5f890190610495565b60a08701906104ef565b60c08501906105b6565b60e0830190610391565b0190610391565b565b91929092806106496106437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610121565b91610121565b146107f3575b8061066261065c5f6103c6565b91610121565b11610724575b508061067c6106765f6103c6565b91610121565b11610687575b505050565b61069a6106956040936103ee565b6103fa565b6106d15f6350d8cd4b9593956106dc826106b33061034e565b6106bc3061034e565b916106c5610052565b9a8b998a98899761035e565b8752600487016105c3565b03925af1801561071f576106f2575b8080610682565b6107129060403d8111610718575b61070a81836100e3565b810190610589565b506106eb565b503d610700565b6103b3565b61074361073b610736602087016102f2565b61032a565b848391610ede565b61075461074f846103ee565b6103fa565b9063238d6579908590926107673061034e565b6107786107735f6103c6565b610445565b823b156107ee575f946107a9869261079e94610792610052565b998a988997889661035e565b865260048601610545565b03925af180156107e9576107bd575b610668565b6107dc905f3d81116107e2575b6107d481836100e3565b81019061046c565b5f6107b8565b503d6107ca565b6103b3565b61035a565b50610846602061081461080f61080a8388016102f2565b61032a565b610342565b6370a082319061083b6108263061034e565b9261082f610052565b9586948593849361035e565b83526004830161039e565b03915afa90811561088c575f9161085e575b5061064f565b61087f915060203d8111610885575b61087781836100e3565b810190610373565b5f610858565b503d61086d565b6103b3565b91936108c96108e196946108bf6108d394976108b56101208801995f890190610495565b60a08701906104ef565b60c08501906105b6565b60e0830190610391565b610100818403910152610514565b90565b6fffffffffffffffffffffffffffffffff1690565b610902816108e4565b0361090957565b5f80fd5b9050519061091a826108f9565b565b91906060838203126109685761096190610936606061010c565b93610943825f8301610364565b5f860152610954826020830161090d565b602086015260400161090d565b6040830152565b6100a8565b9060608282031261098657610983915f0161091c565b90565b61005c565b9160206109ac9294936109a560408201965f830190610297565b0190610391565b565b6109b890516108e4565b90565b6109cf6109ca6109d4926108e4565b6102ff565b610121565b90565b6109e0906109bb565b9052565b9193610a1c610a349694610a12610a269497610a086101208801995f890190610495565b60a08701906105b6565b60c08501906109d7565b60e0830190610391565b610100818403910152610514565b90565b610a6d610a7494610a6360e094989795610a5961010086019a5f870190610495565b60a08501906104ef565b60c0830190610391565b0190610391565b565b909180610a8b610a855f6103c6565b91610121565b11610b59575b5082610aa5610a9f5f6103c6565b91610121565b11610ab0575b505050565b610abc610ac1916103ee565b6103fa565b91638720316d919092610ad33061034e565b610adc3061034e565b823b15610b54575f94610b0d8692610b0294610af6610052565b998a988997889661035e565b865260048601610a37565b03925af18015610b4f57610b23575b8080610aab565b610b42905f3d8111610b48575b610b3a81836100e3565b81019061046c565b5f610b1c565b503d610b30565b6103b3565b61035a565b80610b8c610b867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610121565b91610121565b145f14610d425750610bd2610baa610ba55f85016102f2565b61032a565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91610ede565b610be3610bde826103ee565b6103fa565b6320b76e81835f92610bfc610bf7866103ee565b6103fa565b60606393c5206291610c0d89610e0a565b90610c32610c1a3061034e565b94610c3d610c26610052565b9687958694859461035e565b84526004840161098b565b03915afa8015610d3d57604094610ca0610c6660205f94610c95968691610d0f575b50016109ae565b610c6f3061034e565b610c80610c7b866103c6565b610445565b91610c89610052565b9a8b998a98899761035e565b8752600487016109e4565b03925af18015610d0a57610cdd575b50610cd6610cc6610cc15f85016102f2565b61032a565b82610cd05f6103c6565b91610ede565b5b5f610a91565b610cfd9060403d8111610d03575b610cf581836100e3565b810190610589565b50610caf565b503d610ceb565b6103b3565b610d30915060603d8111610d36575b610d2881836100e3565b81019061096d565b5f610c5f565b503d610d1e565b6103b3565b610d60610d58610d535f86016102f2565b61032a565b838391610ede565b6040610d73610d6e846103ee565b6103fa565b916320b76e8192610db45f879395610dbf82610d8e3061034e565b610d9f610d9a866103c6565b610445565b91610da8610052565b9a8b998a98899761035e565b875260048701610891565b03925af18015610e0157610dd4575b50610cd7565b610df49060403d8111610dfa575b610dec81836100e3565b810190610589565b50610dce565b503d610de2565b6103b3565b5f90565b60a090610e15610e06565b502090565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b610e5c610e57610e6192610e1a565b61035e565b610e23565b90565b916020610e85929493610e7e60408201965f830190610391565b01906104ef565b565b151590565b60ff1690565b610ea6610ea1610eab926103c3565b6102ff565b610e8c565b90565b610eb790610e92565b9052565b916020610edc929493610ed560408201965f830190610391565b0190610eae565b565b9091610f1f600491610f10610ef663095ea7b3610e48565b9186610f00610052565b9586946020860190815201610e64565b602082018103825203826100e3565b90610f34610f2e82849061100b565b15610e87565b610f3e575b505050565b610f8b6004610f9094610f868491610f77610f5c63095ea7b3610e48565b915f90610f67610052565b9687946020860190815201610ebb565b602082018103825203836100e3565b6111fd565b6111fd565b5f8080610f39565b5f90565b606090565b3d5f14610fbc57610fb13d610429565b903d5f602084013e5b565b610fc4610f9c565b90610fba565b610fd381610e87565b03610fda57565b5f80fd5b90505190610feb82610fca565b565b9060208282031261100657611003915f01610fde565b90565b61005c565b905f8091611017610f98565b5061102184610342565b9082602082019151925af1611034610fa1565b8161105f575b509081611046575b5090565b611059915061105490610342565b611269565b5f611042565b905061106a816104fc565b61107c6110765f6103c6565b91610121565b1490811561108c575b505f61103a565b6110a79150602061109c826104fc565b818301019101610fed565b5f611085565b67ffffffffffffffff81116110cb576110c76020916100ac565b0190565b6100b6565b906110e26110dd836110ad565b61010c565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61111860206110d0565b90611125602083016110e7565b565b61112f61110e565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b611195602a604092611132565b61119e8161113b565b0190565b6111b79060208101905f818303910152611188565b90565b156111c157565b6111c9610052565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806111f9600482016111a2565b0390fd5b6112469161120d61121c92610342565b90611216611127565b91611289565b611225816104fc565b6112376112315f6103c6565b91610121565b14908115611248575b506111ba565b565b61126391506020611258826104fc565b818301019101610fed565b5f611240565b611271610f98565b503b61128561127f5f6103c6565b91610121565b1190565b906112a89291611297610f9c565b50906112a25f6103c6565b91611379565b90565b6112b490610336565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b6113116026604092611132565b61131a816112b7565b0190565b6113339060208101905f818303910152611304565b90565b1561133d57565b611345610052565b7f08c379a0000000000000000000000000000000000000000000000000000000008152806113756004820161131e565b0390fd5b915f80916113cf959361138a610f9c565b506113b1611397306112ab565b316113aa6113a485610121565b91610121565b1015611336565b8591602082019151925af1916113c5610fa1565b909290919261146e565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b611406601d602092611132565b61140f816113d2565b0190565b6114289060208101905f8183039101526113f9565b90565b1561143257565b61143a610052565b7f08c379a00000000000000000000000000000000000000000000000000000000081528061146a60048201611413565b0390fd5b919290611479610f9c565b505f146114bd575061148a826104fc565b61149c6114965f6103c6565b91610121565b146114a6575b5090565b6114b26114b791611269565b61142b565b5f6114a2565b82611510565b5190565b6114e66114ef6020936114f4936114dd816114c3565b93848093611132565b95869101610509565b6100ac565b0190565b61150d9160208201915f8184039101526114c7565b90565b9061151a826104fc565b61152c6115265f6103c6565b91610121565b115f1461153c5750805190602001fd5b61157790611548610052565b9182917f08c379a0000000000000000000000000000000000000000000000000000000008352600483016114f8565b0390fd"

    public enum RevertReason: Equatable, Error {
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = []
    public static let functions: [ABI.Function] = [marketIdFn, repayAndWithdrawCollateralFn, supplyCollateralAndBorrowFn]
    public static let marketIdFn = ABI.Function(
        name: "marketId",
        inputs: [.tuple([.address, .address, .address, .address, .uint256])],
        outputs: [.bytes32]
    )

    public static func marketId(params: MarketParams, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Hex, RevertReason> {
        do {
            let query = try marketIdFn.encoded(with: [params.asValue])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try marketIdFn.decode(output: result)

            switch decoded {
            case let .tuple1(.bytes32(marketParamsId)):
                return .success(marketParamsId)
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, marketIdFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func marketIdDecode(input: Hex) throws -> (MarketParams) {
        let decodedInput = try marketIdFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple1(.tuple5(.address(loanToken),
                                 .address(collateralToken),
                                 .address(oracle),
                                 .address(irm),
                                 .uint256(lltv))):
            return try (MarketParams(loanToken: loanToken, collateralToken: collateralToken, oracle: oracle, irm: irm, lltv: lltv))
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, marketIdFn.inputTuple)
        }
    }

    public static let repayAndWithdrawCollateralFn = ABI.Function(
        name: "repayAndWithdrawCollateral",
        inputs: [.address, .tuple([.address, .address, .address, .address, .uint256]), .uint256, .uint256],
        outputs: []
    )

    public static func repayAndWithdrawCollateral(morpho: EthAddress, marketParams: MarketParams, repayAmount: BigUInt, withdrawAmount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try repayAndWithdrawCollateralFn.encoded(with: [.address(morpho), marketParams.asValue, .uint256(repayAmount), .uint256(withdrawAmount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try repayAndWithdrawCollateralFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, repayAndWithdrawCollateralFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func repayAndWithdrawCollateralDecode(input: Hex) throws -> (EthAddress, MarketParams, BigUInt, BigUInt) {
        let decodedInput = try repayAndWithdrawCollateralFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple4(.address(morpho), .tuple5(.address(loanToken),
                                                   .address(collateralToken),
                                                   .address(oracle),
                                                   .address(irm),
                                                   .uint256(lltv)), .uint256(repayAmount), .uint256(withdrawAmount)):
            return try (morpho, MarketParams(loanToken: loanToken, collateralToken: collateralToken, oracle: oracle, irm: irm, lltv: lltv), repayAmount, withdrawAmount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, repayAndWithdrawCollateralFn.inputTuple)
        }
    }

    public static let supplyCollateralAndBorrowFn = ABI.Function(
        name: "supplyCollateralAndBorrow",
        inputs: [.address, .tuple([.address, .address, .address, .address, .uint256]), .uint256, .uint256],
        outputs: []
    )

    public static func supplyCollateralAndBorrow(morpho: EthAddress, marketParams: MarketParams, supplyAssetAmount: BigUInt, borrowAssetAmount: BigUInt, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try supplyCollateralAndBorrowFn.encoded(with: [.address(morpho), marketParams.asValue, .uint256(supplyAssetAmount), .uint256(borrowAssetAmount)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try supplyCollateralAndBorrowFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, supplyCollateralAndBorrowFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func supplyCollateralAndBorrowDecode(input: Hex) throws -> (EthAddress, MarketParams, BigUInt, BigUInt) {
        let decodedInput = try supplyCollateralAndBorrowFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple4(.address(morpho), .tuple5(.address(loanToken),
                                                   .address(collateralToken),
                                                   .address(oracle),
                                                   .address(irm),
                                                   .uint256(lltv)), .uint256(supplyAssetAmount), .uint256(borrowAssetAmount)):
            return try (morpho, MarketParams(loanToken: loanToken, collateralToken: collateralToken, oracle: oracle, irm: irm, lltv: lltv), supplyAssetAmount, borrowAssetAmount)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, supplyCollateralAndBorrowFn.inputTuple)
        }
    }
}
