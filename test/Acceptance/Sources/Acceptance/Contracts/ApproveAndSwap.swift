@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum ApproveAndSwap {
    public static let creationCode: Hex = "0x608060405234601c57600e6020565b610def61002b8239610def90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b6101b8565b61001d5f3561002c565b639bc2f5090361000e5761017e565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61006690610044565b90565b6100728161005d565b0361007957565b5f80fd5b9050359061008a82610069565b565b90565b6100988161008c565b0361009f57565b5f80fd5b905035906100b08261008f565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100f85781359167ffffffffffffffff83116100f35760200192600183028401116100ee57565b6100ba565b6100b6565b6100b2565b9160c08383031261017457610114825f850161007d565b92610122836020830161007d565b9261013081604084016100a3565b9261013e826060850161007d565b9261014c83608083016100a3565b9260a082013567ffffffffffffffff811161016f5761016b92016100be565b9091565b610040565b61003c565b5f0190565b346101b35761019d6101913660046100fd565b95949094939193610499565b6101a5610032565b806101af81610179565b0390f35b610038565b5f80fd5b90565b6101d36101ce6101d892610044565b6101bc565b610044565b90565b6101e4906101bf565b90565b6101f0906101db565b90565b6101fc906101bf565b90565b610208906101f3565b90565b610214906101f3565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061025890610217565b810190811067ffffffffffffffff82111761027257604052565b610221565b60e01b90565b9050519061028a8261008f565b565b906020828203126102a5576102a2915f0161027d565b90565b61003c565b6102b39061005d565b9052565b91906102ca905f602085019401906102aa565b565b6102d4610032565b3d5f823e3d90fd5b905090565b90825f939282370152565b9091826102fc81610303936102dc565b80936102e1565b0190565b9091610312926102ec565b90565b90610328610321610032565b928361024e565b565b67ffffffffffffffff811161034857610344602091610217565b0190565b610221565b9061035f61035a8361032a565b610315565b918252565b606090565b3d5f14610384576103793d61034d565b903d5f602084013e5b565b61038c610364565b90610382565b151590565b5190565b60209181520190565b90825f9392825e0152565b6103ce6103d76020936103dc936103c581610397565b9384809361039b565b958691016103a4565b610217565b0190565b6103f59160208201915f8184039101526103af565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61043461043a9193929361008c565b9261008c565b820391821161044557565b6103f8565b6104539061008c565b9052565b91602061047892949361047160408201965f83019061044a565b019061044a565b565b90565b61049161048c6104969261047a565b6101bc565b61008c565b90565b9592916104b5909591956104ac876101e7565b90889091610780565b6104fd60206104cb6104c6856101e7565b6101ff565b6370a08231906104f26104dd3061020b565b926104e6610032565b95869485938493610277565b8352600483016102b7565b03915afa9182156106bc575f928392839161068e575b509482899261052c610523610032565b93849283610307565b03925af161054261053b610369565b9115610392565b61064f575090602061055e610559610590946101e7565b6101ff565b6370a08231906105856105703061020b565b92610579610032565b96879485938493610277565b8352600483016102b7565b03915afa801561064a576105ab925f9161061c575b50610425565b90816105bf6105b98361008c565b9161008c565b106105e5575050906105d36105e3926101e7565b906105dd5f61047d565b91610780565b565b6106185f9283927f42e0f17d00000000000000000000000000000000000000000000000000000000845260048401610457565b0390fd5b61063d915060203d8111610643575b610635818361024e565b81019061028c565b5f6105a5565b503d61062b565b6102cc565b61068a9061065b610032565b9182917fbfa56265000000000000000000000000000000000000000000000000000000008352600483016103e0565b0390fd5b6106af915060203d81116106b5575b6106a7818361024e565b81019061028c565b5f610513565b503d61069d565b6102cc565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6107036106fe610708926106c1565b610277565b6106ca565b90565b91602061072c92949361072560408201965f8301906102aa565b019061044a565b565b60ff1690565b61074861074361074d9261047a565b6101bc565b61072e565b90565b61075990610734565b9052565b91602061077e92949361077760408201965f8301906102aa565b0190610750565b565b90916107c16004916107b261079863095ea7b36106ef565b91866107a2610032565b958694602086019081520161070b565b6020820181038252038261024e565b906107d66107d082849061087f565b15610392565b6107e0575b505050565b61082d60046108329461082884916108196107fe63095ea7b36106ef565b915f90610809610032565b968794602086019081520161075d565b6020820181038252038361024e565b610a71565b610a71565b5f80806107db565b5f90565b61084781610392565b0361084e57565b5f80fd5b9050519061085f8261083e565b565b9060208282031261087a57610877915f01610852565b90565b61003c565b905f809161088b61083a565b50610895846101ff565b9082602082019151925af16108a8610369565b816108d3575b5090816108ba575b5090565b6108cd91506108c8906101ff565b610add565b5f6108b6565b90506108de81610397565b6108f06108ea5f61047d565b9161008c565b14908115610900575b505f6108ae565b61091b9150602061091082610397565b818301019101610861565b5f6108f9565b67ffffffffffffffff811161093f5761093b602091610217565b0190565b610221565b9061095661095183610921565b610315565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61098c6020610944565b906109996020830161095b565b565b6109a3610982565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610a09602a6040926109a6565b610a12816109af565b0190565b610a2b9060208101905f8183039101526109fc565b90565b15610a3557565b610a3d610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a6d60048201610a16565b0390fd5b610aba91610a81610a90926101ff565b90610a8a61099b565b91610afd565b610a9981610397565b610aab610aa55f61047d565b9161008c565b14908115610abc575b50610a2e565b565b610ad791506020610acc82610397565b818301019101610861565b5f610ab4565b610ae561083a565b503b610af9610af35f61047d565b9161008c565b1190565b90610b1c9291610b0b610364565b5090610b165f61047d565b91610bed565b90565b610b28906101f3565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b8560266040926109a6565b610b8e81610b2b565b0190565b610ba79060208101905f818303910152610b78565b90565b15610bb157565b610bb9610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610be960048201610b92565b0390fd5b915f8091610c439593610bfe610364565b50610c25610c0b30610b1f565b31610c1e610c188561008c565b9161008c565b1015610baa565b8591602082019151925af191610c39610369565b9092909192610ce2565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c7a601d6020926109a6565b610c8381610c46565b0190565b610c9c9060208101905f818303910152610c6d565b90565b15610ca657565b610cae610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610cde60048201610c87565b0390fd5b919290610ced610364565b505f14610d315750610cfe82610397565b610d10610d0a5f61047d565b9161008c565b14610d1a575b5090565b610d26610d2b91610add565b610c9f565b5f610d16565b82610d84565b5190565b610d5a610d63602093610d6893610d5181610d37565b938480936109a6565b958691016103a4565b610217565b0190565b610d819160208201915f818403910152610d3b565b90565b90610d8e82610397565b610da0610d9a5f61047d565b9161008c565b115f14610db05750805190602001fd5b610deb90610dbc610032565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d6c565b0390fd"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b6101b8565b61001d5f3561002c565b639bc2f5090361000e5761017e565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff1690565b61006690610044565b90565b6100728161005d565b0361007957565b5f80fd5b9050359061008a82610069565b565b90565b6100988161008c565b0361009f57565b5f80fd5b905035906100b08261008f565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100f85781359167ffffffffffffffff83116100f35760200192600183028401116100ee57565b6100ba565b6100b6565b6100b2565b9160c08383031261017457610114825f850161007d565b92610122836020830161007d565b9261013081604084016100a3565b9261013e826060850161007d565b9261014c83608083016100a3565b9260a082013567ffffffffffffffff811161016f5761016b92016100be565b9091565b610040565b61003c565b5f0190565b346101b35761019d6101913660046100fd565b95949094939193610499565b6101a5610032565b806101af81610179565b0390f35b610038565b5f80fd5b90565b6101d36101ce6101d892610044565b6101bc565b610044565b90565b6101e4906101bf565b90565b6101f0906101db565b90565b6101fc906101bf565b90565b610208906101f3565b90565b610214906101f3565b90565b601f801991011690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061025890610217565b810190811067ffffffffffffffff82111761027257604052565b610221565b60e01b90565b9050519061028a8261008f565b565b906020828203126102a5576102a2915f0161027d565b90565b61003c565b6102b39061005d565b9052565b91906102ca905f602085019401906102aa565b565b6102d4610032565b3d5f823e3d90fd5b905090565b90825f939282370152565b9091826102fc81610303936102dc565b80936102e1565b0190565b9091610312926102ec565b90565b90610328610321610032565b928361024e565b565b67ffffffffffffffff811161034857610344602091610217565b0190565b610221565b9061035f61035a8361032a565b610315565b918252565b606090565b3d5f14610384576103793d61034d565b903d5f602084013e5b565b61038c610364565b90610382565b151590565b5190565b60209181520190565b90825f9392825e0152565b6103ce6103d76020936103dc936103c581610397565b9384809361039b565b958691016103a4565b610217565b0190565b6103f59160208201915f8184039101526103af565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b61043461043a9193929361008c565b9261008c565b820391821161044557565b6103f8565b6104539061008c565b9052565b91602061047892949361047160408201965f83019061044a565b019061044a565b565b90565b61049161048c6104969261047a565b6101bc565b61008c565b90565b9592916104b5909591956104ac876101e7565b90889091610780565b6104fd60206104cb6104c6856101e7565b6101ff565b6370a08231906104f26104dd3061020b565b926104e6610032565b95869485938493610277565b8352600483016102b7565b03915afa9182156106bc575f928392839161068e575b509482899261052c610523610032565b93849283610307565b03925af161054261053b610369565b9115610392565b61064f575090602061055e610559610590946101e7565b6101ff565b6370a08231906105856105703061020b565b92610579610032565b96879485938493610277565b8352600483016102b7565b03915afa801561064a576105ab925f9161061c575b50610425565b90816105bf6105b98361008c565b9161008c565b106105e5575050906105d36105e3926101e7565b906105dd5f61047d565b91610780565b565b6106185f9283927f42e0f17d00000000000000000000000000000000000000000000000000000000845260048401610457565b0390fd5b61063d915060203d8111610643575b610635818361024e565b81019061028c565b5f6105a5565b503d61062b565b6102cc565b61068a9061065b610032565b9182917fbfa56265000000000000000000000000000000000000000000000000000000008352600483016103e0565b0390fd5b6106af915060203d81116106b5575b6106a7818361024e565b81019061028c565b5f610513565b503d61069d565b6102cc565b63ffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6107036106fe610708926106c1565b610277565b6106ca565b90565b91602061072c92949361072560408201965f8301906102aa565b019061044a565b565b60ff1690565b61074861074361074d9261047a565b6101bc565b61072e565b90565b61075990610734565b9052565b91602061077e92949361077760408201965f8301906102aa565b0190610750565b565b90916107c16004916107b261079863095ea7b36106ef565b91866107a2610032565b958694602086019081520161070b565b6020820181038252038261024e565b906107d66107d082849061087f565b15610392565b6107e0575b505050565b61082d60046108329461082884916108196107fe63095ea7b36106ef565b915f90610809610032565b968794602086019081520161075d565b6020820181038252038361024e565b610a71565b610a71565b5f80806107db565b5f90565b61084781610392565b0361084e57565b5f80fd5b9050519061085f8261083e565b565b9060208282031261087a57610877915f01610852565b90565b61003c565b905f809161088b61083a565b50610895846101ff565b9082602082019151925af16108a8610369565b816108d3575b5090816108ba575b5090565b6108cd91506108c8906101ff565b610add565b5f6108b6565b90506108de81610397565b6108f06108ea5f61047d565b9161008c565b14908115610900575b505f6108ae565b61091b9150602061091082610397565b818301019101610861565b5f6108f9565b67ffffffffffffffff811161093f5761093b602091610217565b0190565b610221565b9061095661095183610921565b610315565b918252565b5f7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b61098c6020610944565b906109996020830161095b565b565b6109a3610982565b90565b60209181520190565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201520152565b610a09602a6040926109a6565b610a12816109af565b0190565b610a2b9060208101905f8183039101526109fc565b90565b15610a3557565b610a3d610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610a6d60048201610a16565b0390fd5b610aba91610a81610a90926101ff565b90610a8a61099b565b91610afd565b610a9981610397565b610aab610aa55f61047d565b9161008c565b14908115610abc575b50610a2e565b565b610ad791506020610acc82610397565b818301019101610861565b5f610ab4565b610ae561083a565b503b610af9610af35f61047d565b9161008c565b1190565b90610b1c9291610b0b610364565b5090610b165f61047d565b91610bed565b90565b610b28906101f3565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201520152565b610b8560266040926109a6565b610b8e81610b2b565b0190565b610ba79060208101905f818303910152610b78565b90565b15610bb157565b610bb9610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610be960048201610b92565b0390fd5b915f8091610c439593610bfe610364565b50610c25610c0b30610b1f565b31610c1e610c188561008c565b9161008c565b1015610baa565b8591602082019151925af191610c39610369565b9092909192610ce2565b90565b5f7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c7a601d6020926109a6565b610c8381610c46565b0190565b610c9c9060208101905f818303910152610c6d565b90565b15610ca657565b610cae610032565b7f08c379a000000000000000000000000000000000000000000000000000000000815280610cde60048201610c87565b0390fd5b919290610ced610364565b505f14610d315750610cfe82610397565b610d10610d0a5f61047d565b9161008c565b14610d1a575b5090565b610d26610d2b91610add565b610c9f565b5f610d16565b82610d84565b5190565b610d5a610d63602093610d6893610d5181610d37565b938480936109a6565b958691016103a4565b610217565b0190565b610d819160208201915f818403910152610d3b565b90565b90610d8e82610397565b610da0610d9a5f61047d565b9161008c565b115f14610db05750805190602001fd5b610deb90610dbc610032565b9182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610d6c565b0390fd"

    public static let ApproveAndSwapFailedError = ABI.Function(
        name: "ApproveAndSwapFailed",
        inputs: [.bytes]
    )

    public static let TooMuchSlippageError = ABI.Function(
        name: "TooMuchSlippage",
        inputs: [.uint256, .uint256]
    )

    public enum RevertReason: Equatable, Error {
        case approveAndSwapFailed(Hex)
        case tooMuchSlippage(BigUInt, BigUInt)
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (ApproveAndSwapFailedError, let .tuple1(.bytes(data))):
            return .approveAndSwapFailed(data)
        case (TooMuchSlippageError, let .tuple2(.uint256(expectedBuyAmount), .uint256(actualBuyAmount))):
            return .tooMuchSlippage(expectedBuyAmount, actualBuyAmount)
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [ApproveAndSwapFailedError, TooMuchSlippageError]
    public static let functions: [ABI.Function] = [runFn]
    public static let runFn = ABI.Function(
        name: "run",
        inputs: [.address, .address, .uint256, .address, .uint256, .bytes],
        outputs: []
    )

    public static func run(to: EthAddress, sellToken: EthAddress, sellAmount: BigUInt, buyToken: EthAddress, buyAmount: BigUInt, data: Hex, withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<Void, RevertReason> {
        do {
            let query = try runFn.encoded(with: [.address(to), .address(sellToken), .uint256(sellAmount), .address(buyToken), .uint256(buyAmount), .bytes(data)])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try runFn.decode(output: result)

            switch decoded {
            case .tuple0:
                return .success(())
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, runFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func runDecode(input: Hex) throws -> (EthAddress, EthAddress, BigUInt, EthAddress, BigUInt, Hex) {
        let decodedInput = try runFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple6(.address(to), .address(sellToken), .uint256(sellAmount), .address(buyToken), .uint256(buyAmount), .bytes(data)):
            return (to, sellToken, sellAmount, buyToken, buyAmount, data)
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, runFn.inputTuple)
        }
    }
}
