@preconcurrency import BigInt
@preconcurrency import Eth
import Foundation

public enum Multicall {
    public static let creationCode: Hex = "0x60a060405234602b57600e6071565b6014602f565b61081061007e823960805181610631015261081090f35b6035565b60405190565b5f80fd5b60018060a01b031690565b90565b60566052605a926039565b6044565b6039565b90565b6064906047565b90565b606e90605d565b90565b6078306067565b60805256fe60806040526004361015610013575b61025e565b61001d5f3561002c565b634d618e3b0361000e57610225565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561008a5781359167ffffffffffffffff831161008557602001926020830284011161008057565b61004c565b610048565b610044565b909182601f830112156100c95781359167ffffffffffffffff83116100c45760200192602083028401116100bf57565b61004c565b610048565b610044565b9091604082840312610128575f82013567ffffffffffffffff811161012357836100f9918401610050565b929093602082013567ffffffffffffffff811161011e5761011a920161008f565b9091565b610040565b610040565b61003c565b5190565b60209181520190565b60200190565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61018161018a60209361018f9361017881610140565b93848093610144565b9586910161014d565b610158565b0190565b9061019d91610162565b90565b60200190565b906101ba6101b38361012d565b8092610131565b90816101cb6020830284019461013a565b925f915b8383106101de57505050505090565b909192939460206102006101fa83856001950387528951610193565b976101a0565b93019301919392906101cf565b6102229160208201915f8184039101526101a6565b90565b346102595761025561024461023b3660046100ce565b92919091610613565b61024c610032565b9182918261020d565b0390f35b610038565b5f80fd5b606090565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b61029761029261029c92610267565b610280565b610267565b90565b6102a890610283565b90565b6102b49061029f565b90565b6102c090610267565b90565b5f0190565b5090565b5090565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061030a90610158565b810190811067ffffffffffffffff82111761032457604052565b6102d3565b9061033c610335610032565b9283610300565b565b67ffffffffffffffff81116103565760208091020190565b6102d3565b9061036d6103688361033e565b610329565b918252565b606090565b5f5b82811061038557505050565b602090610390610372565b8184015201610379565b906103bf6103a78361035b565b926020806103b5869361033e565b9201910390610377565b565b90565b6103d86103d36103dd926103c1565b610280565b6102d0565b90565b60016103ec91016102d0565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b919081101561042c576020020190565b6103ef565b61043a816102b7565b0361044157565b5f80fd5b3561044f81610431565b90565b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156104a0570180359067ffffffffffffffff821161049b5760200191600182023603831361049657565b61045a565b610456565b610452565b908210156104c05760206104bc920281019061045e565b9091565b6103ef565b905090565b90825f939282370152565b9091826104e5816104ec936104c5565b80936104ca565b0190565b90916104fb926104d5565b90565b67ffffffffffffffff811161051c57610518602091610158565b0190565b6102d3565b9061053361052e836104fe565b610329565b918252565b606090565b3d5f146105585761054d3d610521565b903d5f602084013e5b565b610560610538565b90610556565b151590565b610574906102d0565b9052565b610581906102b7565b9052565b60209181520190565b6105ad6105b66020936105bb936105a481610140565b93848093610585565b9586910161014d565b610158565b0190565b6105e36105f09492936105d960608401955f85019061056b565b6020830190610578565b604081840391015261058e565b90565b906105fd8261012d565b81101561060e576020809102010190565b6103ef565b9093929161061f610262565b50610629306102ab565b61065b6106557f00000000000000000000000000000000000000000000000000000000000000006102b7565b916102b7565b146107db5761066b8286906102c8565b61068761068161067c8487906102cc565b6102d0565b916102d0565b036107a65761069f61069a8387906102c8565b61039a565b926106a95f6103c4565b5b806106c76106c16106bc878b906102c8565b6102d0565b916102d0565b101561079c575f806106e36106de878b869161041c565b610445565b6106ef868686916104a5565b906107046106fb610032565b928392836104f0565b03915af461071a61071361053d565b9115610566565b61074557906107396107409287839161073383836105f3565b526105f3565b51506103e0565b6106aa565b8461079861076061075b8b86809591909161041c565b610445565b92610769610032565b9384937f61d3730e000000000000000000000000000000000000000000000000000000008552600485016105bf565b0390fd5b5050505090915090565b5f7fb4fa3fb3000000000000000000000000000000000000000000000000000000008152806107d7600482016102c3565b0390fd5b5f7fb870face0000000000000000000000000000000000000000000000000000000081528061080c600482016102c3565b0390fd"
    public static let runtimeCode: Hex = "0x60806040526004361015610013575b61025e565b61001d5f3561002c565b634d618e3b0361000e57610225565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561008a5781359167ffffffffffffffff831161008557602001926020830284011161008057565b61004c565b610048565b610044565b909182601f830112156100c95781359167ffffffffffffffff83116100c45760200192602083028401116100bf57565b61004c565b610048565b610044565b9091604082840312610128575f82013567ffffffffffffffff811161012357836100f9918401610050565b929093602082013567ffffffffffffffff811161011e5761011a920161008f565b9091565b610040565b610040565b61003c565b5190565b60209181520190565b60200190565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61018161018a60209361018f9361017881610140565b93848093610144565b9586910161014d565b610158565b0190565b9061019d91610162565b90565b60200190565b906101ba6101b38361012d565b8092610131565b90816101cb6020830284019461013a565b925f915b8383106101de57505050505090565b909192939460206102006101fa83856001950387528951610193565b976101a0565b93019301919392906101cf565b6102229160208201915f8184039101526101a6565b90565b346102595761025561024461023b3660046100ce565b92919091610613565b61024c610032565b9182918261020d565b0390f35b610038565b5f80fd5b606090565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b61029761029261029c92610267565b610280565b610267565b90565b6102a890610283565b90565b6102b49061029f565b90565b6102c090610267565b90565b5f0190565b5090565b5090565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9061030a90610158565b810190811067ffffffffffffffff82111761032457604052565b6102d3565b9061033c610335610032565b9283610300565b565b67ffffffffffffffff81116103565760208091020190565b6102d3565b9061036d6103688361033e565b610329565b918252565b606090565b5f5b82811061038557505050565b602090610390610372565b8184015201610379565b906103bf6103a78361035b565b926020806103b5869361033e565b9201910390610377565b565b90565b6103d86103d36103dd926103c1565b610280565b6102d0565b90565b60016103ec91016102d0565b90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b919081101561042c576020020190565b6103ef565b61043a816102b7565b0361044157565b5f80fd5b3561044f81610431565b90565b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156104a0570180359067ffffffffffffffff821161049b5760200191600182023603831361049657565b61045a565b610456565b610452565b908210156104c05760206104bc920281019061045e565b9091565b6103ef565b905090565b90825f939282370152565b9091826104e5816104ec936104c5565b80936104ca565b0190565b90916104fb926104d5565b90565b67ffffffffffffffff811161051c57610518602091610158565b0190565b6102d3565b9061053361052e836104fe565b610329565b918252565b606090565b3d5f146105585761054d3d610521565b903d5f602084013e5b565b610560610538565b90610556565b151590565b610574906102d0565b9052565b610581906102b7565b9052565b60209181520190565b6105ad6105b66020936105bb936105a481610140565b93848093610585565b9586910161014d565b610158565b0190565b6105e36105f09492936105d960608401955f85019061056b565b6020830190610578565b604081840391015261058e565b90565b906105fd8261012d565b81101561060e576020809102010190565b6103ef565b9093929161061f610262565b50610629306102ab565b61065b6106557f00000000000000000000000000000000000000000000000000000000000000006102b7565b916102b7565b146107db5761066b8286906102c8565b61068761068161067c8487906102cc565b6102d0565b916102d0565b036107a65761069f61069a8387906102c8565b61039a565b926106a95f6103c4565b5b806106c76106c16106bc878b906102c8565b6102d0565b916102d0565b101561079c575f806106e36106de878b869161041c565b610445565b6106ef868686916104a5565b906107046106fb610032565b928392836104f0565b03915af461071a61071361053d565b9115610566565b61074557906107396107409287839161073383836105f3565b526105f3565b51506103e0565b6106aa565b8461079861076061075b8b86809591909161041c565b610445565b92610769610032565b9384937f61d3730e000000000000000000000000000000000000000000000000000000008552600485016105bf565b0390fd5b5050505090915090565b5f7fb4fa3fb3000000000000000000000000000000000000000000000000000000008152806107d7600482016102c3565b0390fd5b5f7fb870face0000000000000000000000000000000000000000000000000000000081528061080c600482016102c3565b0390fd"

    public static let AlreadyInitializedError = ABI.Function(
        name: "AlreadyInitialized",
        inputs: []
    )

    public static let InvalidCallContextError = ABI.Function(
        name: "InvalidCallContext",
        inputs: []
    )

    public static let InvalidInputError = ABI.Function(
        name: "InvalidInput",
        inputs: []
    )

    public static let MulticallErrorError = ABI.Function(
        name: "MulticallError",
        inputs: [.uint256, .address, .bytes]
    )

    public enum RevertReason: Equatable, Error {
        case alreadyInitialized
        case invalidCallContext
        case invalidInput
        case multicallError(BigUInt, EthAddress, Hex)
        case unknownRevert(String, String)
    }

    public static func rewrapError(_ error: ABI.Function, value: ABI.Value) -> RevertReason {
        switch (error, value) {
        case (AlreadyInitializedError, _):
            return .alreadyInitialized
        case (InvalidCallContextError, _):
            return .invalidCallContext
        case (InvalidInputError, _):
            return .invalidInput
        case (MulticallErrorError, let .tuple3(.uint256(callIndex), .address(callContract), .bytes(err))):
            return .multicallError(callIndex, callContract, err)
        case let (e, v):
            return .unknownRevert(e.name, String(describing: v))
        }
    }

    public static let errors: [ABI.Function] = [AlreadyInitializedError, InvalidCallContextError, InvalidInputError, MulticallErrorError]
    public static let functions: [ABI.Function] = [runFn]
    public static let runFn = ABI.Function(
        name: "run",
        inputs: [.array(.address), .array(.bytes)],
        outputs: [.array(.bytes)]
    )

    public static func run(callContracts: [EthAddress], callDatas: [Hex], withFunctions ffis: EVM.FFIMap = [:]) async throws -> Result<[Hex], RevertReason> {
        do {
            let query = try runFn.encoded(with: [.array(.address, callContracts.map {
                .address($0)
            }), .array(.bytes, callDatas.map {
                .bytes($0)
            })])
            let result = try await EVM.runQuery(bytecode: runtimeCode, query: query, withErrors: errors, withFunctions: ffis)
            let decoded = try runFn.decode(output: result)

            switch decoded {
            case let .tuple1(.array(.bytes, var0)):
                return .success(var0.map {
                    $0.asHex!
                })
            default:
                throw ABI.DecodeError.mismatchedType(decoded.schema, runFn.outputTuple)
            }
        } catch let EVM.QueryError.error(e, v) {
            return .failure(rewrapError(e, value: v))
        }
    }

    public static func runDecode(input: Hex) throws -> ([EthAddress], [Hex]) {
        let decodedInput = try runFn.decodeInput(input: input)
        switch decodedInput {
        case let .tuple2(.array(.address, callContracts), .array(.bytes, callDatas)):
            return (callContracts.map { $0.asEthAddress! }, callDatas.map { $0.asHex! })
        default:
            throw ABI.DecodeError.mismatchedType(decodedInput.schema, runFn.inputTuple)
        }
    }
}
