name: Acceptance Tests

on:
  workflow_dispatch:
  pull_request:

env:
  FOUNDRY_PROFILE: ir

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  check:
    strategy:
      fail-fast: true

    name: Foundry project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      
      - name: Install Swift
        uses: NeedleInAJayStack/setup-swift@e1e16eadfa117a794ccda27f60935a0c9e143df5
        with:
          swift-version: "6.0.2"

      - name: Run Swift Build
        run: |
          # Note: bypassing issue with `memset_s` being in tiny-keccak
          # but not available on Ubuntu
          swift build  --destination destination-ubuntu.json
        id: swift-build
        working-directory: test/Acceptance

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: lib
          key: ${{ runner.os }}-foundry-lib-${{ hashFiles('foundry.toml') }}
          restore-keys: |
            ${{ runner.os }}-foundry-lib-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: forge install

      - name: Restore Forge Build Cache
        id: cache-forge-build
        uses: actions/cache@v3
        with:
          path: cache
          key: ${{ runner.os }}-foundry-cache-${{ hashFiles('foundry.toml', 'src/**/*.sol') }}
          restore-keys: |
            ${{ runner.os }}-foundry-cache-

      - name: Cache Build Artifacts
        id: cache-build
        uses: actions/cache@v3
        with:
          path: out
          key: ${{ runner.os }}-foundry-out-${{ hashFiles('foundry.toml', 'src/**/*.sol') }}
          restore-keys: |
            ${{ runner.os }}-foundry-out-

      - name: Run Forge build
        run: |
          forge build
        id: build

      - name: Generate Contract Scripts
        run: Scripts/generate-contract-scripts.sh
        id: generate-contract-scripts
        working-directory: test/Acceptance
        env:
          DESTINATION_FILE: destination-ubuntu.json

      - name: Run Acceptance Tests
        run: |
          swift test --destination destination-ubuntu.json --xunit-output results.xml
        id: test
        working-directory: test/Acceptance

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Acceptance Tests
          path: test/Acceptance/results-swift-testing.xml
          reporter: swift-xunit
